
Rotation Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009328  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009434  08009434  00019434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a8  080094a8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080094a8  080094a8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094a8  080094a8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080094b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  2000017c  0800962c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013fc  0800962c  000213fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f54e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003006  00000000  00000000  0002f736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00032740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3b  00000000  00000000  000334e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a2c  00000000  00000000  00033f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014dad  00000000  00000000  0004d94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008737c  00000000  00000000  000626fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003744  00000000  00000000  000e9a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ed1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800941c 	.word	0x0800941c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800941c 	.word	0x0800941c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <MX_GPIO_Init+0x130>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a45      	ldr	r2, [pc, #276]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b4:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a3f      	ldr	r2, [pc, #252]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a39      	ldr	r2, [pc, #228]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	482e      	ldr	r0, [pc, #184]	; (8000abc <MX_GPIO_Init+0x134>)
 8000a04:	f000 fe6a 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4826      	ldr	r0, [pc, #152]	; (8000abc <MX_GPIO_Init+0x134>)
 8000a22:	f000 fcd7 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4821      	ldr	r0, [pc, #132]	; (8000abc <MX_GPIO_Init+0x134>)
 8000a38:	f000 fccc 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROT01_Pin|ROT02_Pin|ROT03_Pin;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0x138>)
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <MX_GPIO_Init+0x13c>)
 8000a50:	f000 fcc0 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a54:	f248 73f8 	movw	r3, #34808	; 0x87f8
 8000a58:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <MX_GPIO_Init+0x13c>)
 8000a66:	f000 fcb5 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a6a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000a6e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a70:	2303      	movs	r3, #3
 8000a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <MX_GPIO_Init+0x140>)
 8000a7c:	f000 fcaa 	bl	80013d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2006      	movs	r0, #6
 8000a86:	f000 fc6e 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f000 fc87 	bl	800139e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2007      	movs	r0, #7
 8000a96:	f000 fc66 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fc7f 	bl	800139e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2008      	movs	r0, #8
 8000aa6:	f000 fc5e 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f000 fc77 	bl	800139e <HAL_NVIC_EnableIRQ>

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	10310000 	.word	0x10310000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_I2C1_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x58>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b0a:	f000 fe31 	bl	8001770 <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 fa3a 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000198 	.word	0x20000198
 8000b20:	40005400 	.word	0x40005400
 8000b24:	000186a0 	.word	0x000186a0

08000b28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x70>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d123      	bne.n	8000b90 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_I2C_MspInit+0x78>)
 8000b74:	f000 fc2e 	bl	80013d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	61d3      	str	r3, [r2, #28]
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000baa:	f000 faa3 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bae:	f000 f88d 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb2:	f7ff fee9 	bl	8000988 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000bb6:	f007 ff61 	bl	8008a7c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000bba:	f7ff ff87 	bl	8000acc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000bbe:	f000 f913 	bl	8000de8 <MPU6050_Init>

  while (1)
  {

	  /* Get tick in millis */
	  timer_curr = HAL_GetTick();
 8000bc2:	f000 faef 	bl	80011a4 <HAL_GetTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <main+0xf4>)
 8000bcc:	801a      	strh	r2, [r3, #0]

	  /* Get the difference between the current timer and last timer in millis
	   * Calculate the rotation each 1000ms */
	  uint16_t timer_diff = timer_curr - timer_bfr;
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <main+0xf4>)
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <main+0xf8>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	80fb      	strh	r3, [r7, #6]
	  if (timer_diff >= 100) {
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2b63      	cmp	r3, #99	; 0x63
 8000bde:	d914      	bls.n	8000c0a <main+0x66>

		  MPU6050_Read_Accel();
 8000be0:	f000 f958 	bl	8000e94 <MPU6050_Read_Accel>
//		  /* Set the timer before as a current timer */
//		  timer_bfr = timer_curr;
//		  dados[0] = rot_buff[0];
//		  dados[1] = rot_buff[1];
//		  dados[2] = rot_buff[2];
		  dados[3] = Accel_X_RAW;
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <main+0xfc>)
 8000be6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <main+0x100>)
 8000bec:	80da      	strh	r2, [r3, #6]
		  dados[4] = Accel_Y_RAW;
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <main+0x104>)
 8000bf0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <main+0x100>)
 8000bf6:	811a      	strh	r2, [r3, #8]
		  dados[5] = Accel_Z_RAW;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <main+0x108>)
 8000bfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <main+0x100>)
 8000c00:	815a      	strh	r2, [r3, #10]

		  /* Transmit via USB */
		  CDC_Transmit_FS(dados, 12);
 8000c02:	210c      	movs	r1, #12
 8000c04:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <main+0x100>)
 8000c06:	f007 fff7 	bl	8008bf8 <CDC_Transmit_FS>
	  }
	  if (timer_diff >= 1000) {
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c10:	d3d7      	bcc.n	8000bc2 <main+0x1e>

		  MPU6050_Read_Accel();
 8000c12:	f000 f93f 	bl	8000e94 <MPU6050_Read_Accel>

		  /* Calculate rotations in RPM*/
		  rot_01 = 3*rotPulsesCnt_01;
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <main+0x10c>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <main+0x110>)
 8000c24:	801a      	strh	r2, [r3, #0]
		  rot_02 = 3*rotPulsesCnt_02;
 8000c26:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <main+0x114>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	0052      	lsls	r2, r2, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <main+0x118>)
 8000c34:	801a      	strh	r2, [r3, #0]
		  rot_03 = 3*rotPulsesCnt_03;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <main+0x11c>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	0052      	lsls	r2, r2, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <main+0x120>)
 8000c44:	801a      	strh	r2, [r3, #0]

		  /* Reset pulse variables */
		  rotPulsesCnt_01 = 0;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <main+0x10c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
		  rotPulsesCnt_02 = 0;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <main+0x114>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
		  rotPulsesCnt_03 = 0;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <main+0x11c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	801a      	strh	r2, [r3, #0]

		  /* Fill the buffer to transmit via USB*/
		  rot_buff[0] = rot_01;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <main+0x110>)
 8000c5a:	881a      	ldrh	r2, [r3, #0]
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <main+0x124>)
 8000c5e:	801a      	strh	r2, [r3, #0]
		  rot_buff[1] = rot_02;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <main+0x118>)
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <main+0x124>)
 8000c66:	805a      	strh	r2, [r3, #2]
		  rot_buff[2] = rot_03;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <main+0x120>)
 8000c6a:	881a      	ldrh	r2, [r3, #0]
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <main+0x124>)
 8000c6e:	809a      	strh	r2, [r3, #4]

		  /* Set the timer before as a current timer */
		  timer_bfr = timer_curr;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <main+0xf4>)
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <main+0xf8>)
 8000c76:	801a      	strh	r2, [r3, #0]
		  dados[0] = rot_buff[0];
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <main+0x124>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <main+0x100>)
 8000c80:	801a      	strh	r2, [r3, #0]
		  dados[1] = rot_buff[1];
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <main+0x124>)
 8000c84:	885b      	ldrh	r3, [r3, #2]
 8000c86:	b21a      	sxth	r2, r3
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <main+0x100>)
 8000c8a:	805a      	strh	r2, [r3, #2]
		  dados[2] = rot_buff[2];
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <main+0x124>)
 8000c8e:	889b      	ldrh	r3, [r3, #4]
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <main+0x100>)
 8000c94:	809a      	strh	r2, [r3, #4]
  {
 8000c96:	e794      	b.n	8000bc2 <main+0x1e>
 8000c98:	200001fa 	.word	0x200001fa
 8000c9c:	200001f8 	.word	0x200001f8
 8000ca0:	20000202 	.word	0x20000202
 8000ca4:	20000208 	.word	0x20000208
 8000ca8:	20000204 	.word	0x20000204
 8000cac:	20000206 	.word	0x20000206
 8000cb0:	200001ec 	.word	0x200001ec
 8000cb4:	200001f2 	.word	0x200001f2
 8000cb8:	200001ee 	.word	0x200001ee
 8000cbc:	200001f4 	.word	0x200001f4
 8000cc0:	200001f0 	.word	0x200001f0
 8000cc4:	200001f6 	.word	0x200001f6
 8000cc8:	200001fc 	.word	0x200001fc

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	2228      	movs	r2, #40	; 0x28
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 fb72 	bl	80093c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 faec 	bl	8004300 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d2e:	f000 f92d 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fd58 	bl	8004804 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d5a:	f000 f917 	bl	8000f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fec5 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d74:	f000 f90a 	bl	8000f8c <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3750      	adds	r7, #80	; 0x50
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/* External Interrupt Callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	//Blink LED for debug
 8000d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d90:	f000 fcbc 	bl	800170c <HAL_GPIO_TogglePin>
	if(GPIO_Pin == ROT01_Pin) {		//If pulse in ROT01 is detected, increase of pulse count variable.
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d106      	bne.n	8000da8 <HAL_GPIO_EXTI_Callback+0x28>
		rotPulsesCnt_01++;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000da4:	801a      	strh	r2, [r3, #0]
		return;
 8000da6:	e013      	b.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x50>
	}
	if(GPIO_Pin == ROT02_Pin) {		//If pulse in ROT02 is detected, increase of pulse count variable.
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d106      	bne.n	8000dbc <HAL_GPIO_EXTI_Callback+0x3c>
		rotPulsesCnt_02++;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000db8:	801a      	strh	r2, [r3, #0]
		return;
 8000dba:	e009      	b.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x50>
	}
	if(GPIO_Pin == ROT03_Pin) {		//If pulse in ROT03 is detected, increase of pulse count variable.
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d106      	bne.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x50>
		rotPulsesCnt_03++;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dcc:	801a      	strh	r2, [r3, #0]
		return;
 8000dce:	bf00      	nop
	}
}
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	200001ec 	.word	0x200001ec
 8000de0:	200001ee 	.word	0x200001ee
 8000de4:	200001f0 	.word	0x200001f0

08000de8 <MPU6050_Init>:


void MPU6050_Init (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	2275      	movs	r2, #117	; 0x75
 8000e00:	21d0      	movs	r1, #208	; 0xd0
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <MPU6050_Init+0xa8>)
 8000e04:	f000 fef2 	bl	8001bec <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b68      	cmp	r3, #104	; 0x68
 8000e0c:	d13b      	bne.n	8000e86 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	9302      	str	r3, [sp, #8]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	1dbb      	adds	r3, r7, #6
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	226b      	movs	r2, #107	; 0x6b
 8000e24:	21d0      	movs	r1, #208	; 0xd0
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <MPU6050_Init+0xa8>)
 8000e28:	f000 fde6 	bl	80019f8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	2301      	movs	r3, #1
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	2219      	movs	r2, #25
 8000e42:	21d0      	movs	r1, #208	; 0xd0
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <MPU6050_Init+0xa8>)
 8000e46:	f000 fdd7 	bl	80019f8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	1dbb      	adds	r3, r7, #6
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	221c      	movs	r2, #28
 8000e60:	21d0      	movs	r1, #208	; 0xd0
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <MPU6050_Init+0xa8>)
 8000e64:	f000 fdc8 	bl	80019f8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	1dbb      	adds	r3, r7, #6
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	221b      	movs	r2, #27
 8000e7e:	21d0      	movs	r1, #208	; 0xd0
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MPU6050_Init+0xa8>)
 8000e82:	f000 fdb9 	bl	80019f8 <HAL_I2C_Mem_Write>
	}

}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000198 	.word	0x20000198

08000e94 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	223b      	movs	r2, #59	; 0x3b
 8000eac:	21d0      	movs	r1, #208	; 0xd0
 8000eae:	482f      	ldr	r0, [pc, #188]	; (8000f6c <MPU6050_Read_Accel+0xd8>)
 8000eb0:	f000 fe9c 	bl	8001bec <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000eb4:	783b      	ldrb	r3, [r7, #0]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	787b      	ldrb	r3, [r7, #1]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <MPU6050_Read_Accel+0xdc>)
 8000ec4:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ec6:	78bb      	ldrb	r3, [r7, #2]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <MPU6050_Read_Accel+0xe0>)
 8000ed6:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ed8:	793b      	ldrb	r3, [r7, #4]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	797b      	ldrb	r3, [r7, #5]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <MPU6050_Read_Accel+0xe4>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MPU6050_Read_Accel+0xdc>)
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fa7d 	bl	80003f0 <__aeabi_i2d>
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MPU6050_Read_Accel+0xe8>)
 8000efc:	f7ff fc0c 	bl	8000718 <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff fcee 	bl	80008e8 <__aeabi_d2f>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <MPU6050_Read_Accel+0xec>)
 8000f10:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MPU6050_Read_Accel+0xe0>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa69 	bl	80003f0 <__aeabi_i2d>
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MPU6050_Read_Accel+0xe8>)
 8000f24:	f7ff fbf8 	bl	8000718 <__aeabi_ddiv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff fcda 	bl	80008e8 <__aeabi_d2f>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <MPU6050_Read_Accel+0xf0>)
 8000f38:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MPU6050_Read_Accel+0xe4>)
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fa55 	bl	80003f0 <__aeabi_i2d>
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MPU6050_Read_Accel+0xe8>)
 8000f4c:	f7ff fbe4 	bl	8000718 <__aeabi_ddiv>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fcc6 	bl	80008e8 <__aeabi_d2f>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <MPU6050_Read_Accel+0xf4>)
 8000f60:	6013      	str	r3, [r2, #0]

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000198 	.word	0x20000198
 8000f70:	20000202 	.word	0x20000202
 8000f74:	20000204 	.word	0x20000204
 8000f78:	20000206 	.word	0x20000206
 8000f7c:	40d00000 	.word	0x40d00000
 8000f80:	20000214 	.word	0x20000214
 8000f84:	20000218 	.word	0x20000218
 8000f88:	2000021c 	.word	0x2000021c

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 f89d 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT01_Pin);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fb76 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT02_Pin);
 800105c:	2002      	movs	r0, #2
 800105e:	f000 fb6f 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}

08001066 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT03_Pin);
 800106a:	2004      	movs	r0, #4
 800106c:	f000 fb68 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800107a:	f001 fcf7 	bl	8002a6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000eec 	.word	0x20000eec

08001088 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800108e:	f001 fced 	bl	8002a6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000eec 	.word	0x20000eec

0800109c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a8:	f7ff fff8 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ae:	490c      	ldr	r1, [pc, #48]	; (80010e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c4:	4c09      	ldr	r4, [pc, #36]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d2:	f008 f97f 	bl	80093d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d6:	f7ff fd65 	bl	8000ba4 <main>
  bx lr
 80010da:	4770      	bx	lr
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80010e4:	080094b0 	.word	0x080094b0
  ldr r2, =_sbss
 80010e8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80010ec:	200013fc 	.word	0x200013fc

080010f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC1_2_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x28>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x28>)
 80010fe:	f043 0310 	orr.w	r3, r3, #16
 8001102:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f923 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	200f      	movs	r0, #15
 800110c:	f000 f808 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff ff42 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40022000 	.word	0x40022000

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x54>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x58>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f93b 	bl	80013ba <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f000 f903 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_InitTick+0x5c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x20>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <HAL_IncTick+0x20>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000220 	.word	0x20000220

080011a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <HAL_GetTick+0x10>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000220 	.word	0x20000220

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4906      	ldr	r1, [pc, #24]	; (8001250 <__NVIC_EnableIRQ+0x34>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff90 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff2d 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff42 	bl	8001200 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff90 	bl	80012a8 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5f 	bl	8001254 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff35 	bl	800121c <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	e169      	b.n	80016bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e8:	2201      	movs	r2, #1
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8158 	bne.w	80016b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a9a      	ldr	r2, [pc, #616]	; (8001674 <HAL_GPIO_Init+0x2a0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d05e      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001410:	4a98      	ldr	r2, [pc, #608]	; (8001674 <HAL_GPIO_Init+0x2a0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d875      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 8001416:	4a98      	ldr	r2, [pc, #608]	; (8001678 <HAL_GPIO_Init+0x2a4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d058      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 800141c:	4a96      	ldr	r2, [pc, #600]	; (8001678 <HAL_GPIO_Init+0x2a4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d86f      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 8001422:	4a96      	ldr	r2, [pc, #600]	; (800167c <HAL_GPIO_Init+0x2a8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d052      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001428:	4a94      	ldr	r2, [pc, #592]	; (800167c <HAL_GPIO_Init+0x2a8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d869      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 800142e:	4a94      	ldr	r2, [pc, #592]	; (8001680 <HAL_GPIO_Init+0x2ac>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d04c      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001434:	4a92      	ldr	r2, [pc, #584]	; (8001680 <HAL_GPIO_Init+0x2ac>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d863      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 800143a:	4a92      	ldr	r2, [pc, #584]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d046      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
 8001440:	4a90      	ldr	r2, [pc, #576]	; (8001684 <HAL_GPIO_Init+0x2b0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d85d      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d82a      	bhi.n	80014a0 <HAL_GPIO_Init+0xcc>
 800144a:	2b12      	cmp	r3, #18
 800144c:	d859      	bhi.n	8001502 <HAL_GPIO_Init+0x12e>
 800144e:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <HAL_GPIO_Init+0x80>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	080014cf 	.word	0x080014cf
 8001458:	080014a9 	.word	0x080014a9
 800145c:	080014bb 	.word	0x080014bb
 8001460:	080014fd 	.word	0x080014fd
 8001464:	08001503 	.word	0x08001503
 8001468:	08001503 	.word	0x08001503
 800146c:	08001503 	.word	0x08001503
 8001470:	08001503 	.word	0x08001503
 8001474:	08001503 	.word	0x08001503
 8001478:	08001503 	.word	0x08001503
 800147c:	08001503 	.word	0x08001503
 8001480:	08001503 	.word	0x08001503
 8001484:	08001503 	.word	0x08001503
 8001488:	08001503 	.word	0x08001503
 800148c:	08001503 	.word	0x08001503
 8001490:	08001503 	.word	0x08001503
 8001494:	08001503 	.word	0x08001503
 8001498:	080014b1 	.word	0x080014b1
 800149c:	080014c5 	.word	0x080014c5
 80014a0:	4a79      	ldr	r2, [pc, #484]	; (8001688 <HAL_GPIO_Init+0x2b4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a6:	e02c      	b.n	8001502 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e029      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	3304      	adds	r3, #4
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e024      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	3308      	adds	r3, #8
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e01f      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	330c      	adds	r3, #12
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	e01a      	b.n	8001504 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d6:	2304      	movs	r3, #4
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e013      	b.n	8001504 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d105      	bne.n	80014f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e4:	2308      	movs	r3, #8
 80014e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	611a      	str	r2, [r3, #16]
          break;
 80014ee:	e009      	b.n	8001504 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f0:	2308      	movs	r3, #8
 80014f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	615a      	str	r2, [r3, #20]
          break;
 80014fa:	e003      	b.n	8001504 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x130>
          break;
 8001502:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2bff      	cmp	r3, #255	; 0xff
 8001508:	d801      	bhi.n	800150e <HAL_GPIO_Init+0x13a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	e001      	b.n	8001512 <HAL_GPIO_Init+0x13e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3304      	adds	r3, #4
 8001512:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d802      	bhi.n	8001520 <HAL_GPIO_Init+0x14c>
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	e002      	b.n	8001526 <HAL_GPIO_Init+0x152>
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	3b08      	subs	r3, #8
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	210f      	movs	r1, #15
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	401a      	ands	r2, r3
 8001538:	6a39      	ldr	r1, [r7, #32]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80b1 	beq.w	80016b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001554:	4b4d      	ldr	r3, [pc, #308]	; (800168c <HAL_GPIO_Init+0x2b8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a4c      	ldr	r2, [pc, #304]	; (800168c <HAL_GPIO_Init+0x2b8>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <HAL_GPIO_Init+0x2b8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800156c:	4a48      	ldr	r2, [pc, #288]	; (8001690 <HAL_GPIO_Init+0x2bc>)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a40      	ldr	r2, [pc, #256]	; (8001694 <HAL_GPIO_Init+0x2c0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d013      	beq.n	80015c0 <HAL_GPIO_Init+0x1ec>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a3f      	ldr	r2, [pc, #252]	; (8001698 <HAL_GPIO_Init+0x2c4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00d      	beq.n	80015bc <HAL_GPIO_Init+0x1e8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3e      	ldr	r2, [pc, #248]	; (800169c <HAL_GPIO_Init+0x2c8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0x1e4>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <HAL_GPIO_Init+0x2cc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_GPIO_Init+0x1e0>
 80015b0:	2303      	movs	r3, #3
 80015b2:	e006      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015b4:	2304      	movs	r3, #4
 80015b6:	e004      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_GPIO_Init+0x1ee>
 80015c0:	2300      	movs	r3, #0
 80015c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c4:	f002 0203 	and.w	r2, r2, #3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015d2:	492f      	ldr	r1, [pc, #188]	; (8001690 <HAL_GPIO_Init+0x2bc>)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	492c      	ldr	r1, [pc, #176]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	4928      	ldr	r1, [pc, #160]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001604:	4013      	ands	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4922      	ldr	r1, [pc, #136]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	491e      	ldr	r1, [pc, #120]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 800162c:	4013      	ands	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4918      	ldr	r1, [pc, #96]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	43db      	mvns	r3, r3
 8001652:	4914      	ldr	r1, [pc, #80]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001654:	4013      	ands	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d021      	beq.n	80016a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e021      	b.n	80016b6 <HAL_GPIO_Init+0x2e2>
 8001672:	bf00      	nop
 8001674:	10320000 	.word	0x10320000
 8001678:	10310000 	.word	0x10310000
 800167c:	10220000 	.word	0x10220000
 8001680:	10210000 	.word	0x10210000
 8001684:	10120000 	.word	0x10120000
 8001688:	10110000 	.word	0x10110000
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000
 8001694:	40010800 	.word	0x40010800
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40011000 	.word	0x40011000
 80016a0:	40011400 	.word	0x40011400
 80016a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_GPIO_Init+0x304>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4909      	ldr	r1, [pc, #36]	; (80016d8 <HAL_GPIO_Init+0x304>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	3301      	adds	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f47f ae8e 	bne.w	80013e8 <HAL_GPIO_Init+0x14>
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	372c      	adds	r7, #44	; 0x2c
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	611a      	str	r2, [r3, #16]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4013      	ands	r3, r2
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43d9      	mvns	r1, r3
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	400b      	ands	r3, r1
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	611a      	str	r2, [r3, #16]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fb0e 	bl	8000d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e12b      	b.n	80019da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff f9c6 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d4:	f003 f95e 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 80017d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a81      	ldr	r2, [pc, #516]	; (80019e4 <HAL_I2C_Init+0x274>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d807      	bhi.n	80017f4 <HAL_I2C_Init+0x84>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4a80      	ldr	r2, [pc, #512]	; (80019e8 <HAL_I2C_Init+0x278>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	bf94      	ite	ls
 80017ec:	2301      	movls	r3, #1
 80017ee:	2300      	movhi	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e006      	b.n	8001802 <HAL_I2C_Init+0x92>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <HAL_I2C_Init+0x27c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	bf94      	ite	ls
 80017fc:	2301      	movls	r3, #1
 80017fe:	2300      	movhi	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0e7      	b.n	80019da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4a78      	ldr	r2, [pc, #480]	; (80019f0 <HAL_I2C_Init+0x280>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9b      	lsrs	r3, r3, #18
 8001814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a6a      	ldr	r2, [pc, #424]	; (80019e4 <HAL_I2C_Init+0x274>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d802      	bhi.n	8001844 <HAL_I2C_Init+0xd4>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	e009      	b.n	8001858 <HAL_I2C_Init+0xe8>
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	4a69      	ldr	r2, [pc, #420]	; (80019f4 <HAL_I2C_Init+0x284>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	3301      	adds	r3, #1
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	430b      	orrs	r3, r1
 800185e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800186a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	495c      	ldr	r1, [pc, #368]	; (80019e4 <HAL_I2C_Init+0x274>)
 8001874:	428b      	cmp	r3, r1
 8001876:	d819      	bhi.n	80018ac <HAL_I2C_Init+0x13c>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e59      	subs	r1, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fbb1 f3f3 	udiv	r3, r1, r3
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800188c:	400b      	ands	r3, r1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <HAL_I2C_Init+0x138>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e59      	subs	r1, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a6:	e051      	b.n	800194c <HAL_I2C_Init+0x1dc>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e04f      	b.n	800194c <HAL_I2C_Init+0x1dc>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d111      	bne.n	80018d8 <HAL_I2C_Init+0x168>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	e012      	b.n	80018fe <HAL_I2C_Init+0x18e>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e58      	subs	r0, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	0099      	lsls	r1, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Init+0x196>
 8001902:	2301      	movs	r3, #1
 8001904:	e022      	b.n	800194c <HAL_I2C_Init+0x1dc>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10e      	bne.n	800192c <HAL_I2C_Init+0x1bc>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e58      	subs	r0, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6859      	ldr	r1, [r3, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	440b      	add	r3, r1
 800191c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001920:	3301      	adds	r3, #1
 8001922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	e00f      	b.n	800194c <HAL_I2C_Init+0x1dc>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	0099      	lsls	r1, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	6809      	ldr	r1, [r1, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800197a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6911      	ldr	r1, [r2, #16]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68d2      	ldr	r2, [r2, #12]
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	430b      	orrs	r3, r1
 800198e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	000186a0 	.word	0x000186a0
 80019e8:	001e847f 	.word	0x001e847f
 80019ec:	003d08ff 	.word	0x003d08ff
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	10624dd3 	.word	0x10624dd3

080019f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	817b      	strh	r3, [r7, #10]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	813b      	strh	r3, [r7, #8]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a12:	f7ff fbc7 	bl	80011a4 <HAL_GetTick>
 8001a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	f040 80d9 	bne.w	8001bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2319      	movs	r3, #25
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	496d      	ldr	r1, [pc, #436]	; (8001be4 <HAL_I2C_Mem_Write+0x1ec>)
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fcc1 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0cc      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_I2C_Mem_Write+0x56>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e0c5      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d007      	beq.n	8001a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2221      	movs	r2, #33	; 0x21
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2240      	movs	r2, #64	; 0x40
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a3a      	ldr	r2, [r7, #32]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ab6:	88f8      	ldrh	r0, [r7, #6]
 8001ab8:	893a      	ldrh	r2, [r7, #8]
 8001aba:	8979      	ldrh	r1, [r7, #10]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 faf8 	bl	80020bc <I2C_RequestMemoryWrite>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d052      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e081      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 fd86 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d107      	bne.n	8001afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d11b      	bne.n	8001b78 <HAL_I2C_Mem_Write+0x180>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1aa      	bne.n	8001ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fd79 	bl	800267c <I2C_WaitOnBTFFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d107      	bne.n	8001ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e016      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	00100002 	.word	0x00100002
 8001be8:	ffff0000 	.word	0xffff0000

08001bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	817b      	strh	r3, [r7, #10]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	813b      	strh	r3, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c0a:	f7ff facb 	bl	80011a4 <HAL_GetTick>
 8001c0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	f040 8244 	bne.w	80020a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2319      	movs	r3, #25
 8001c24:	2201      	movs	r2, #1
 8001c26:	4982      	ldr	r1, [pc, #520]	; (8001e30 <HAL_I2C_Mem_Read+0x244>)
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fbc5 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e237      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_I2C_Mem_Read+0x5a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e230      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d007      	beq.n	8001c6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2222      	movs	r2, #34	; 0x22
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a62      	ldr	r2, [pc, #392]	; (8001e34 <HAL_I2C_Mem_Read+0x248>)
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cae:	88f8      	ldrh	r0, [r7, #6]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa92 	bl	80021e8 <I2C_RequestMemoryRead>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1ec      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d113      	bne.n	8001cfe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e1c0      	b.n	8002080 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d11e      	bne.n	8001d44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d16:	b672      	cpsid	i
}
 8001d18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d40:	b662      	cpsie	i
}
 8001d42:	e035      	b.n	8001db0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d11e      	bne.n	8001d8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5c:	b672      	cpsid	i
}
 8001d5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d86:	b662      	cpsie	i
}
 8001d88:	e012      	b.n	8001db0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001db0:	e166      	b.n	8002080 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	f200 811f 	bhi.w	8001ffa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d123      	bne.n	8001e0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fc9f 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e167      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e0a:	e139      	b.n	8002080 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d152      	bne.n	8001eba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4906      	ldr	r1, [pc, #24]	; (8001e38 <HAL_I2C_Mem_Read+0x24c>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 faca 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e13c      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
 8001e2e:	bf00      	nop
 8001e30:	00100002 	.word	0x00100002
 8001e34:	ffff0000 	.word	0xffff0000
 8001e38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e82:	b662      	cpsie	i
}
 8001e84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb8:	e0e2      	b.n	8002080 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	497b      	ldr	r1, [pc, #492]	; (80020b0 <HAL_I2C_Mem_Read+0x4c4>)
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fa77 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0e9      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f1a:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_I2C_Mem_Read+0x4c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	08db      	lsrs	r3, r3, #3
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_I2C_Mem_Read+0x4cc>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0a1a      	lsrs	r2, r3, #8
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00da      	lsls	r2, r3, #3
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d118      	bne.n	8001f72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0220 	orr.w	r2, r3, #32
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f62:	b662      	cpsie	i
}
 8001f64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e09a      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d1d9      	bne.n	8001f34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fc2:	b662      	cpsie	i
}
 8001fc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ff8:	e042      	b.n	8002080 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fb84 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e04c      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d118      	bne.n	8002080 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f ae94 	bne.w	8001db2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	00010004 	.word	0x00010004
 80020b4:	20000000 	.word	0x20000000
 80020b8:	14f8b589 	.word	0x14f8b589

080020bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	817b      	strh	r3, [r7, #10]
 80020ce:	460b      	mov	r3, r1
 80020d0:	813b      	strh	r3, [r7, #8]
 80020d2:	4613      	mov	r3, r2
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f960 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210c:	d103      	bne.n	8002116 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e05f      	b.n	80021da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800211a:	897b      	ldrh	r3, [r7, #10]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	492d      	ldr	r1, [pc, #180]	; (80021e4 <I2C_RequestMemoryWrite+0x128>)
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f9bb 	bl	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e04c      	b.n	80021da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	6a39      	ldr	r1, [r7, #32]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fa46 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b04      	cmp	r3, #4
 800216c:	d107      	bne.n	800217e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e02b      	b.n	80021da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002188:	893b      	ldrh	r3, [r7, #8]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	e021      	b.n	80021d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002194:	893b      	ldrh	r3, [r7, #8]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b29b      	uxth	r3, r3
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	6a39      	ldr	r1, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa20 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d107      	bne.n	80021ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e005      	b.n	80021da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ce:	893b      	ldrh	r3, [r7, #8]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	00010002 	.word	0x00010002

080021e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	817b      	strh	r3, [r7, #10]
 80021fa:	460b      	mov	r3, r1
 80021fc:	813b      	strh	r3, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002210:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2200      	movs	r2, #0
 800222a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f8c2 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002248:	d103      	bne.n	8002252 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0aa      	b.n	80023ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002256:	897b      	ldrh	r3, [r7, #10]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002264:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	4952      	ldr	r1, [pc, #328]	; (80023b4 <I2C_RequestMemoryRead+0x1cc>)
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f91d 	bl	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e097      	b.n	80023ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f9a8 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00d      	beq.n	80022be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d107      	bne.n	80022ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e076      	b.n	80023ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022c4:	893b      	ldrh	r3, [r7, #8]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	611a      	str	r2, [r3, #16]
 80022ce:	e021      	b.n	8002314 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022d0:	893b      	ldrh	r3, [r7, #8]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f982 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00d      	beq.n	800230a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d107      	bne.n	8002306 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002304:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e050      	b.n	80023ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800230a:	893b      	ldrh	r3, [r7, #8]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	6a39      	ldr	r1, [r7, #32]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f967 	bl	80025ec <I2C_WaitOnTXEFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b04      	cmp	r3, #4
 800232a:	d107      	bne.n	800233c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e035      	b.n	80023ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2200      	movs	r2, #0
 8002358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f82b 	bl	80023b8 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002376:	d103      	bne.n	8002380 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e013      	b.n	80023ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002384:	897b      	ldrh	r3, [r7, #10]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	6a3a      	ldr	r2, [r7, #32]
 8002398:	4906      	ldr	r1, [pc, #24]	; (80023b4 <I2C_RequestMemoryRead+0x1cc>)
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f886 	bl	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	00010002 	.word	0x00010002

080023b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c8:	e048      	b.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d044      	beq.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d2:	f7fe fee7 	bl	80011a4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d302      	bcc.n	80023e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d139      	bne.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	0c1b      	lsrs	r3, r3, #16
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10d      	bne.n	800240e <I2C_WaitOnFlagUntilTimeout+0x56>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	43da      	mvns	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4013      	ands	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	e00c      	b.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x70>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	43da      	mvns	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	429a      	cmp	r2, r3
 800242c:	d116      	bne.n	800245c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e023      	b.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10d      	bne.n	8002482 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	e00c      	b.n	800249c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d093      	beq.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ba:	e071      	b.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ca:	d123      	bne.n	8002514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e067      	b.n	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d041      	beq.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251c:	f7fe fe42 	bl	80011a4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d302      	bcc.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d136      	bne.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10c      	bne.n	8002556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	e00b      	b.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e021      	b.n	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10c      	bne.n	80025c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	43da      	mvns	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e00b      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f af6d 	bne.w	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f8:	e034      	b.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8e3 	bl	80027c6 <I2C_IsAcknowledgeFailed>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e034      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d028      	beq.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7fe fdc7 	bl	80011a4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11d      	bne.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b80      	cmp	r3, #128	; 0x80
 8002634:	d016      	beq.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e007      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b80      	cmp	r3, #128	; 0x80
 8002670:	d1c3      	bne.n	80025fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002688:	e034      	b.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f89b 	bl	80027c6 <I2C_IsAcknowledgeFailed>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e034      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d028      	beq.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7fe fd7f 	bl	80011a4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d11d      	bne.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d016      	beq.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d1c3      	bne.n	800268a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002718:	e049      	b.n	80027ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b10      	cmp	r3, #16
 8002726:	d119      	bne.n	800275c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0210 	mvn.w	r2, #16
 8002730:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e030      	b.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275c:	f7fe fd22 	bl	80011a4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d302      	bcc.n	8002772 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11d      	bne.n	80027ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d016      	beq.n	80027ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e007      	b.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d1ae      	bne.n	800271a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027dc:	d11b      	bne.n	8002816 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002824:	b08b      	sub	sp, #44	; 0x2c
 8002826:	af06      	add	r7, sp, #24
 8002828:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0f1      	b.n	8002a18 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d106      	bne.n	800284e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f006 fb09 	bl	8008e60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f002 fa28 	bl	8004cb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	687e      	ldr	r6, [r7, #4]
 8002868:	466d      	mov	r5, sp
 800286a:	f106 0410 	add.w	r4, r6, #16
 800286e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	602b      	str	r3, [r5, #0]
 8002876:	1d33      	adds	r3, r6, #4
 8002878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	f002 f9f2 	bl	8004c64 <USB_CoreInit>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0c2      	b.n	8002a18 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fa23 	bl	8004ce4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e040      	b.n	8002926 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	3301      	adds	r3, #1
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3303      	adds	r3, #3
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	3338      	adds	r3, #56	; 0x38
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	333c      	adds	r3, #60	; 0x3c
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	3340      	adds	r3, #64	; 0x40
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	3301      	adds	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3b9      	bcc.n	80028a4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e044      	b.n	80029c0 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	3301      	adds	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3b5      	bcc.n	8002936 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	687e      	ldr	r6, [r7, #4]
 80029d2:	466d      	mov	r5, sp
 80029d4:	f106 0410 	add.w	r4, r6, #16
 80029d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	602b      	str	r3, [r5, #0]
 80029e0:	1d33      	adds	r3, r6, #4
 80029e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e4:	6838      	ldr	r0, [r7, #0]
 80029e6:	f002 f989 	bl	8004cfc <USB_DevInit>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00d      	b.n	8002a18 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 fc0a 	bl	800722a <USB_DevDisconnect>

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_Start+0x16>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e016      	b.n	8002a64 <HAL_PCD_Start+0x44>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 f91e 	bl	8004c84 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a48:	2101      	movs	r1, #1
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f006 fc83 	bl	8009356 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fbde 	bl	8007216 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 fbe0 	bl	800723e <USB_ReadInterrupts>
 8002a7e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fb1b 	bl	80030c6 <PCD_EP_ISR_Handler>

    return;
 8002a90:	e119      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f006 fa56 	bl	8008f66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002aba:	2100      	movs	r1, #0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f905 	bl	8002ccc <HAL_PCD_SetAddress>

    return;
 8002ac2:	e100      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ae6:	e0ee      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b04:	b292      	uxth	r2, r2
 8002b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b0a:	e0dc      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d027      	beq.n	8002b66 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0204 	bic.w	r2, r2, #4
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0208 	bic.w	r2, r2, #8
 8002b40:	b292      	uxth	r2, r2
 8002b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f006 fa46 	bl	8008fd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b64:	e0af      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8083 	beq.w	8002c78 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e010      	b.n	8002b9a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	441a      	add	r2, r3
 8002b84:	7ffb      	ldrb	r3, [r7, #31]
 8002b86:	8812      	ldrh	r2, [r2, #0]
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	3320      	adds	r3, #32
 8002b8e:	443b      	add	r3, r7
 8002b90:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
 8002b96:	3301      	adds	r3, #1
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d9eb      	bls.n	8002b78 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002bd0:	bf00      	nop
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f6      	beq.n	8002bd2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf6:	b292      	uxth	r2, r2
 8002bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	e00f      	b.n	8002c22 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002c02:	7ffb      	ldrb	r3, [r7, #31]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	7ffa      	ldrb	r2, [r7, #31]
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	440a      	add	r2, r1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	3320      	adds	r3, #32
 8002c14:	443b      	add	r3, r7
 8002c16:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c1a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	7ffb      	ldrb	r3, [r7, #31]
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	d9ec      	bls.n	8002c02 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0208 	orr.w	r2, r2, #8
 8002c3a:	b292      	uxth	r2, r2
 8002c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c52:	b292      	uxth	r2, r2
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0204 	orr.w	r2, r2, #4
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f006 f997 	bl	8008fa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c76:	e026      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00f      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c94:	b292      	uxth	r2, r2
 8002c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f006 f955 	bl	8008f4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ca0:	e011      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cc4:	bf00      	nop
  }
}
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_PCD_SetAddress+0x1a>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e013      	b.n	8002d0e <HAL_PCD_SetAddress+0x42>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fa76 	bl	80071f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	4608      	mov	r0, r1
 8002d20:	4611      	mov	r1, r2
 8002d22:	461a      	mov	r2, r3
 8002d24:	4603      	mov	r3, r0
 8002d26:	70fb      	strb	r3, [r7, #3]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	803b      	strh	r3, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	da0e      	bge.n	8002d5a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	705a      	strb	r2, [r3, #1]
 8002d58:	e00e      	b.n	8002d78 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 0207 	and.w	r2, r3, #7
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d84:	883a      	ldrh	r2, [r7, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	78ba      	ldrb	r2, [r7, #2]
 8002d8e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d90:	78bb      	ldrb	r3, [r7, #2]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d102      	bne.n	8002d9c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_PCD_EP_Open+0x94>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e00e      	b.n	8002dc8 <HAL_PCD_EP_Open+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68f9      	ldr	r1, [r7, #12]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 ffbf 	bl	8004d3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	da0e      	bge.n	8002e02 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	705a      	strb	r2, [r3, #1]
 8002e00:	e00e      	b.n	8002e20 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 0207 	and.w	r2, r3, #7
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_PCD_EP_Close+0x6a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e00e      	b.n	8002e58 <HAL_PCD_EP_Close+0x88>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68f9      	ldr	r1, [r7, #12]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fb37 	bl	80054bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	7afb      	ldrb	r3, [r7, #11]
 8002e72:	f003 0207 	and.w	r2, r3, #7
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fcee 	bl	8005894 <USB_EPStartXfer>

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 0207 	and.w	r2, r3, #7
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002ee4:	681b      	ldr	r3, [r3, #0]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	460b      	mov	r3, r1
 8002efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3c:	7afb      	ldrb	r3, [r7, #11]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6979      	ldr	r1, [r7, #20]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 fca0 	bl	8005894 <USB_EPStartXfer>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 0207 	and.w	r2, r3, #7
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d901      	bls.n	8002f7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e04c      	b.n	8003016 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da0e      	bge.n	8002fa2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	705a      	strb	r2, [r3, #1]
 8002fa0:	e00c      	b.n	8002fbc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_EP_SetStall+0x7e>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e01c      	b.n	8003016 <HAL_PCD_EP_SetStall+0xb8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 f803 	bl	8006ff6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d108      	bne.n	800300c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f004 f928 	bl	800725c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	f003 020f 	and.w	r2, r3, #15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d901      	bls.n	800303c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e040      	b.n	80030be <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800303c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003040:	2b00      	cmp	r3, #0
 8003042:	da0e      	bge.n	8003062 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	705a      	strb	r2, [r3, #1]
 8003060:	e00e      	b.n	8003080 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 0207 	and.w	r2, r3, #7
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_PCD_EP_ClrStall+0x82>
 800309c:	2302      	movs	r3, #2
 800309e:	e00e      	b.n	80030be <HAL_PCD_EP_ClrStall+0xa0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68f9      	ldr	r1, [r7, #12]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fff1 	bl	8007096 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b096      	sub	sp, #88	; 0x58
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030ce:	e3bf      	b.n	8003850 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80030ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 8179 	bne.w	80033e6 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d152      	bne.n	80031a6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003110:	81fb      	strh	r3, [r7, #14]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	89fb      	ldrh	r3, [r7, #14]
 8003118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003120:	b29b      	uxth	r3, r3
 8003122:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3328      	adds	r3, #40	; 0x28
 8003128:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	3302      	adds	r3, #2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003154:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	441a      	add	r2, r3
 8003160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003162:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003164:	2100      	movs	r1, #0
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f005 fed5 	bl	8008f16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 836b 	beq.w	8003850 <PCD_EP_ISR_Handler+0x78a>
 800317a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 8366 	bne.w	8003850 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003190:	b2da      	uxtb	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b292      	uxth	r2, r2
 8003198:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031a4:	e354      	b.n	8003850 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ac:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d034      	beq.n	800322e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	3306      	adds	r3, #6
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003200:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003202:	b29b      	uxth	r3, r3
 8003204:	f004 f87a 	bl	80072fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29a      	uxth	r2, r3
 8003210:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003214:	4013      	ands	r3, r2
 8003216:	823b      	strh	r3, [r7, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	8a3a      	ldrh	r2, [r7, #16]
 800321e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003222:	b292      	uxth	r2, r2
 8003224:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f005 fe48 	bl	8008ebc <HAL_PCD_SetupStageCallback>
 800322c:	e310      	b.n	8003850 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800322e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003232:	2b00      	cmp	r3, #0
 8003234:	f280 830c 	bge.w	8003850 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29a      	uxth	r2, r3
 8003240:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003244:	4013      	ands	r3, r2
 8003246:	83fb      	strh	r3, [r7, #30]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	8bfa      	ldrh	r2, [r7, #30]
 800324e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003252:	b292      	uxth	r2, r2
 8003254:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	3306      	adds	r3, #6
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <PCD_EP_ISR_Handler+0x1f8>
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d015      	beq.n	80032be <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800329e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f004 f82a 	bl	80072fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	441a      	add	r2, r3
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032b6:	2100      	movs	r1, #0
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f005 fe11 	bl	8008ee0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 82bd 	bne.w	8003850 <PCD_EP_ISR_Handler+0x78a>
 80032d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032e2:	f000 82b5 	beq.w	8003850 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003310:	b29a      	uxth	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b3e      	cmp	r3, #62	; 0x3e
 800331c:	d91d      	bls.n	800335a <PCD_EP_ISR_Handler+0x294>
 800331e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
 8003326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <PCD_EP_ISR_Handler+0x272>
 8003332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003334:	3b01      	subs	r3, #1
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29a      	uxth	r2, r3
 800333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003340:	b29b      	uxth	r3, r3
 8003342:	029b      	lsls	r3, r3, #10
 8003344:	b29b      	uxth	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003352:	b29a      	uxth	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	e026      	b.n	80033a8 <PCD_EP_ISR_Handler+0x2e2>
 800335a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <PCD_EP_ISR_Handler+0x2b2>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800336c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003370:	b29a      	uxth	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	e017      	b.n	80033a8 <PCD_EP_ISR_Handler+0x2e2>
 8003378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	647b      	str	r3, [r7, #68]	; 0x44
 8003380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <PCD_EP_ISR_Handler+0x2cc>
 800338c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338e:	3301      	adds	r3, #1
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29a      	uxth	r2, r3
 8003398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339a:	b29b      	uxth	r3, r3
 800339c:	029b      	lsls	r3, r3, #10
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b8:	827b      	strh	r3, [r7, #18]
 80033ba:	8a7b      	ldrh	r3, [r7, #18]
 80033bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033c0:	827b      	strh	r3, [r7, #18]
 80033c2:	8a7b      	ldrh	r3, [r7, #18]
 80033c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033c8:	827b      	strh	r3, [r7, #18]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	8a7b      	ldrh	r3, [r7, #18]
 80033d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	8013      	strh	r3, [r2, #0]
 80033e4:	e234      	b.n	8003850 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033fa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f280 80fc 	bge.w	80035fc <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29a      	uxth	r2, r3
 8003416:	f640 738f 	movw	r3, #3983	; 0xf8f
 800341a:	4013      	ands	r3, r2
 800341c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003436:	b292      	uxth	r2, r2
 8003438:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800343a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003452:	7b1b      	ldrb	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d125      	bne.n	80034a4 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	3306      	adds	r3, #6
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003480:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003484:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8092 	beq.w	80035b2 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	6959      	ldr	r1, [r3, #20]
 8003496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003498:	88da      	ldrh	r2, [r3, #6]
 800349a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800349e:	f003 ff2d 	bl	80072fc <USB_ReadPMA>
 80034a2:	e086      	b.n	80035b2 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a6:	78db      	ldrb	r3, [r3, #3]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d10a      	bne.n	80034c2 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034b0:	461a      	mov	r2, r3
 80034b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f9d9 	bl	800386c <HAL_PCD_EP_DB_Receive>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80034c0:	e077      	b.n	80035b2 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003502:	b29b      	uxth	r3, r3
 8003504:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d024      	beq.n	800356a <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	3302      	adds	r3, #2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003548:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800354c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02e      	beq.n	80035b2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355a:	6959      	ldr	r1, [r3, #20]
 800355c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355e:	891a      	ldrh	r2, [r3, #8]
 8003560:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003564:	f003 feca 	bl	80072fc <USB_ReadPMA>
 8003568:	e023      	b.n	80035b2 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	3306      	adds	r3, #6
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003592:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003596:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	6959      	ldr	r1, [r3, #20]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	895a      	ldrh	r2, [r3, #10]
 80035aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ae:	f003 fea5 	bl	80072fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ba:	441a      	add	r2, r3
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035c8:	441a      	add	r2, r3
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <PCD_EP_ISR_Handler+0x51c>
 80035d6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80035da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d206      	bcs.n	80035f0 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f005 fc79 	bl	8008ee0 <HAL_PCD_DataOutStageCallback>
 80035ee:	e005      	b.n	80035fc <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 f94c 	bl	8005894 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8123 	beq.w	8003850 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800360a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	441a      	add	r2, r3
 800364a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800364e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003656:	b29b      	uxth	r3, r3
 8003658:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800365a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365c:	78db      	ldrb	r3, [r3, #3]
 800365e:	2b01      	cmp	r3, #1
 8003660:	f040 80a2 	bne.w	80037a8 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003666:	2200      	movs	r2, #0
 8003668:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	7b1b      	ldrb	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8093 	beq.w	800379a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d046      	beq.n	800370e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d126      	bne.n	80036d6 <PCD_EP_ISR_Handler+0x610>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	4413      	add	r3, r2
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	011a      	lsls	r2, r3, #4
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	4413      	add	r3, r2
 80036aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	801a      	strh	r2, [r3, #0]
 80036d4:	e061      	b.n	800379a <PCD_EP_ISR_Handler+0x6d4>
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d15d      	bne.n	800379a <PCD_EP_ISR_Handler+0x6d4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	4413      	add	r3, r2
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	011a      	lsls	r2, r3, #4
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	4413      	add	r3, r2
 8003700:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	2200      	movs	r2, #0
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	e045      	b.n	800379a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d126      	bne.n	800376a <PCD_EP_ISR_Handler+0x6a4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372a:	b29b      	uxth	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003730:	4413      	add	r3, r2
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
 8003734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	011a      	lsls	r2, r3, #4
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	4413      	add	r3, r2
 800373e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374e:	b29a      	uxth	r2, r3
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	801a      	strh	r2, [r3, #0]
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003762:	b29a      	uxth	r2, r3
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e017      	b.n	800379a <PCD_EP_ISR_Handler+0x6d4>
 800376a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376c:	785b      	ldrb	r3, [r3, #1]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d113      	bne.n	800379a <PCD_EP_ISR_Handler+0x6d4>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	4413      	add	r3, r2
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	011a      	lsls	r2, r3, #4
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	4413      	add	r3, r2
 800378e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2200      	movs	r2, #0
 8003798:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f005 fbb8 	bl	8008f16 <HAL_PCD_DataInStageCallback>
 80037a6:	e053      	b.n	8003850 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d146      	bne.n	8003842 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	3302      	adds	r3, #2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80037e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d907      	bls.n	80037fc <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80037ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ee:	699a      	ldr	r2, [r3, #24]
 80037f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037f4:	1ad2      	subs	r2, r2, r3
 80037f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f8:	619a      	str	r2, [r3, #24]
 80037fa:	e002      	b.n	8003802 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80037fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fe:	2200      	movs	r2, #0
 8003800:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800380a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f005 fb80 	bl	8008f16 <HAL_PCD_DataInStageCallback>
 8003816:	e01b      	b.n	8003850 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003820:	441a      	add	r2, r3
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800382e:	441a      	add	r2, r3
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800383a:	4618      	mov	r0, r3
 800383c:	f002 f82a 	bl	8005894 <USB_EPStartXfer>
 8003840:	e006      	b.n	8003850 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003842:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003846:	461a      	mov	r2, r3
 8003848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f91b 	bl	8003a86 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003858:	b29b      	uxth	r3, r3
 800385a:	b21b      	sxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	f6ff ac37 	blt.w	80030d0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3758      	adds	r7, #88	; 0x58
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d07e      	beq.n	8003982 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	3302      	adds	r3, #2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	8b7b      	ldrh	r3, [r7, #26]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d306      	bcc.n	80038c6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	8b7b      	ldrh	r3, [r7, #26]
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	619a      	str	r2, [r3, #24]
 80038c4:	e002      	b.n	80038cc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d123      	bne.n	800391c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	833b      	strh	r3, [r7, #24]
 80038f0:	8b3b      	ldrh	r3, [r7, #24]
 80038f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038f6:	833b      	strh	r3, [r7, #24]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	8b3b      	ldrh	r3, [r7, #24]
 8003908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003918:	b29b      	uxth	r3, r3
 800391a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01f      	beq.n	8003966 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	82fb      	strh	r3, [r7, #22]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8afb      	ldrh	r3, [r7, #22]
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003966:	8b7b      	ldrh	r3, [r7, #26]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8087 	beq.w	8003a7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6959      	ldr	r1, [r3, #20]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	891a      	ldrh	r2, [r3, #8]
 800397a:	8b7b      	ldrh	r3, [r7, #26]
 800397c:	f003 fcbe 	bl	80072fc <USB_ReadPMA>
 8003980:	e07c      	b.n	8003a7c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	3306      	adds	r3, #6
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	8b7b      	ldrh	r3, [r7, #26]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d306      	bcc.n	80039c4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	8b7b      	ldrh	r3, [r7, #26]
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	619a      	str	r2, [r3, #24]
 80039c2:	e002      	b.n	80039ca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d123      	bne.n	8003a1a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ec:	83fb      	strh	r3, [r7, #30]
 80039ee:	8bfb      	ldrh	r3, [r7, #30]
 80039f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039f4:	83fb      	strh	r3, [r7, #30]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	8bfb      	ldrh	r3, [r7, #30]
 8003a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11f      	bne.n	8003a64 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	83bb      	strh	r3, [r7, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	8bbb      	ldrh	r3, [r7, #28]
 8003a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a64:	8b7b      	ldrh	r3, [r7, #26]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6959      	ldr	r1, [r3, #20]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	895a      	ldrh	r2, [r3, #10]
 8003a76:	8b7b      	ldrh	r3, [r7, #26]
 8003a78:	f003 fc40 	bl	80072fc <USB_ReadPMA>
    }
  }

  return count;
 8003a7c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b0a4      	sub	sp, #144	; 0x90
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 81dd 	beq.w	8003e5a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d907      	bls.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ae0:	1ad2      	subs	r2, r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	619a      	str	r2, [r3, #24]
 8003ae6:	e002      	b.n	8003aee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 80b9 	bne.w	8003c6a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d126      	bne.n	8003b4e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	4413      	add	r3, r2
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	011a      	lsls	r2, r3, #4
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	4413      	add	r3, r2
 8003b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	e01a      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d116      	bne.n	8003b84 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6a:	4413      	add	r3, r2
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	011a      	lsls	r2, r3, #4
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	4413      	add	r3, r2
 8003b78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2200      	movs	r2, #0
 8003b82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d126      	bne.n	8003be0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	011a      	lsls	r2, r3, #4
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	e017      	b.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d113      	bne.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	4413      	add	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	011a      	lsls	r2, r3, #4
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	4413      	add	r3, r2
 8003c04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f005 f97d 	bl	8008f16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 82fc 	beq.w	8004220 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	82fb      	strh	r3, [r7, #22]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	8013      	strh	r3, [r2, #0]
 8003c68:	e2da      	b.n	8004220 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d021      	beq.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	f040 82ae 	bne.w	8004220 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ccc:	441a      	add	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cda:	441a      	add	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d30b      	bcc.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e017      	b.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003d0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d1c:	e00a      	b.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2200      	movs	r2, #0
 8003d32:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d165      	bne.n	8003e08 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	4413      	add	r3, r2
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	011a      	lsls	r2, r3, #4
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d78:	2b3e      	cmp	r3, #62	; 0x3e
 8003d7a:	d91d      	bls.n	8003db8 <HAL_PCD_EP_DB_Transmit+0x332>
 8003d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <HAL_PCD_EP_DB_Transmit+0x310>
 8003d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d92:	3b01      	subs	r3, #1
 8003d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	e044      	b.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x350>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	e035      	b.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dec:	3301      	adds	r3, #1
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	029b      	lsls	r3, r3, #10
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	801a      	strh	r2, [r3, #0]
 8003e06:	e01c      	b.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d118      	bne.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e24:	4413      	add	r3, r2
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	011a      	lsls	r2, r3, #4
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	4413      	add	r3, r2
 8003e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e36:	643b      	str	r3, [r7, #64]	; 0x40
 8003e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6959      	ldr	r1, [r3, #20]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	891a      	ldrh	r2, [r3, #8]
 8003e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f003 fa0d 	bl	8007272 <USB_WritePMA>
 8003e58:	e1e2      	b.n	8004220 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3306      	adds	r3, #6
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e82:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d307      	bcc.n	8003ea2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	619a      	str	r2, [r3, #24]
 8003ea0:	e002      	b.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 80c0 	bne.w	8004032 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d126      	bne.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x482>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ece:	4413      	add	r3, r2
 8003ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	011a      	lsls	r2, r3, #4
 8003ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eda:	4413      	add	r3, r2
 8003edc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	e01a      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d116      	bne.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	667b      	str	r3, [r7, #100]	; 0x64
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f24:	4413      	add	r3, r2
 8003f26:	667b      	str	r3, [r7, #100]	; 0x64
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f30:	4413      	add	r3, r2
 8003f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f36:	663b      	str	r3, [r7, #96]	; 0x60
 8003f38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	677b      	str	r3, [r7, #116]	; 0x74
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12b      	bne.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f60:	4413      	add	r3, r2
 8003f62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	011a      	lsls	r2, r3, #4
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa0:	801a      	strh	r2, [r3, #0]
 8003fa2:	e017      	b.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	785b      	ldrb	r3, [r3, #1]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d113      	bne.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fba:	4413      	add	r3, r2
 8003fbc:	677b      	str	r3, [r7, #116]	; 0x74
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	011a      	lsls	r2, r3, #4
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8003fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f004 ff9b 	bl	8008f16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 811a 	bne.w	8004220 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	441a      	add	r2, r3
 8004018:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800401c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402c:	b29b      	uxth	r3, r3
 800402e:	8013      	strh	r3, [r2, #0]
 8004030:	e0f6      	b.n	8004220 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d121      	bne.n	8004080 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800406c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407c:	b29b      	uxth	r3, r3
 800407e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004086:	2b01      	cmp	r3, #1
 8004088:	f040 80ca 	bne.w	8004220 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004094:	441a      	add	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040a2:	441a      	add	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d30b      	bcc.n	80040cc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c4:	1ad2      	subs	r2, r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	621a      	str	r2, [r3, #32]
 80040ca:	e017      	b.n	80040fc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80040d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040e4:	e00a      	b.n	80040fc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	657b      	str	r3, [r7, #84]	; 0x54
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d165      	bne.n	80041d6 <HAL_PCD_EP_DB_Transmit+0x750>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411e:	4413      	add	r3, r2
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	011a      	lsls	r2, r3, #4
 8004128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412a:	4413      	add	r3, r2
 800412c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004130:	65bb      	str	r3, [r7, #88]	; 0x58
 8004132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413c:	b29a      	uxth	r2, r3
 800413e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004146:	2b3e      	cmp	r3, #62	; 0x3e
 8004148:	d91d      	bls.n	8004186 <HAL_PCD_EP_DB_Transmit+0x700>
 800414a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	66bb      	str	r3, [r7, #104]	; 0x68
 8004152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2b00      	cmp	r3, #0
 800415c:	d102      	bne.n	8004164 <HAL_PCD_EP_DB_Transmit+0x6de>
 800415e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004160:	3b01      	subs	r3, #1
 8004162:	66bb      	str	r3, [r7, #104]	; 0x68
 8004164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29a      	uxth	r2, r3
 800416a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800416c:	b29b      	uxth	r3, r3
 800416e:	029b      	lsls	r3, r3, #10
 8004170:	b29b      	uxth	r3, r3
 8004172:	4313      	orrs	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417e:	b29a      	uxth	r2, r3
 8004180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	e041      	b.n	800420a <HAL_PCD_EP_DB_Transmit+0x784>
 8004186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x71e>
 800418e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419c:	b29a      	uxth	r2, r3
 800419e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	e032      	b.n	800420a <HAL_PCD_EP_DB_Transmit+0x784>
 80041a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_PCD_EP_DB_Transmit+0x738>
 80041b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ba:	3301      	adds	r3, #1
 80041bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80041be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	029b      	lsls	r3, r3, #10
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	e019      	b.n	800420a <HAL_PCD_EP_DB_Transmit+0x784>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d115      	bne.n	800420a <HAL_PCD_EP_DB_Transmit+0x784>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	4413      	add	r3, r2
 80041ee:	657b      	str	r3, [r7, #84]	; 0x54
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	011a      	lsls	r2, r3, #4
 80041f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f8:	4413      	add	r3, r2
 80041fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004204:	b29a      	uxth	r2, r3
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6959      	ldr	r1, [r3, #20]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	895a      	ldrh	r2, [r3, #10]
 8004216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800421a:	b29b      	uxth	r3, r3
 800421c:	f003 f829 	bl	8007272 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423a:	82bb      	strh	r3, [r7, #20]
 800423c:	8abb      	ldrh	r3, [r7, #20]
 800423e:	f083 0310 	eor.w	r3, r3, #16
 8004242:	82bb      	strh	r3, [r7, #20]
 8004244:	8abb      	ldrh	r3, [r7, #20]
 8004246:	f083 0320 	eor.w	r3, r3, #32
 800424a:	82bb      	strh	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	8abb      	ldrh	r3, [r7, #20]
 800425c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426c:	b29b      	uxth	r3, r3
 800426e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3790      	adds	r7, #144	; 0x90
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800427a:	b480      	push	{r7}
 800427c:	b087      	sub	sp, #28
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
 8004288:	4613      	mov	r3, r2
 800428a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800428c:	897b      	ldrh	r3, [r7, #10]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004298:	897b      	ldrh	r3, [r7, #10]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e009      	b.n	80042c4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042b0:	897a      	ldrh	r2, [r7, #10]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042c4:	893b      	ldrh	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d107      	bne.n	80042da <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	80da      	strh	r2, [r3, #6]
 80042d8:	e00b      	b.n	80042f2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2201      	movs	r2, #1
 80042de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e272      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8087 	beq.w	800442e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004320:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b04      	cmp	r3, #4
 800432a:	d00c      	beq.n	8004346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800432c:	4b8f      	ldr	r3, [pc, #572]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b08      	cmp	r3, #8
 8004336:	d112      	bne.n	800435e <HAL_RCC_OscConfig+0x5e>
 8004338:	4b8c      	ldr	r3, [pc, #560]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d10b      	bne.n	800435e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004346:	4b89      	ldr	r3, [pc, #548]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d06c      	beq.n	800442c <HAL_RCC_OscConfig+0x12c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d168      	bne.n	800442c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e24c      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x76>
 8004368:	4b80      	ldr	r3, [pc, #512]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7f      	ldr	r2, [pc, #508]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e02e      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x98>
 800437e:	4b7b      	ldr	r3, [pc, #492]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7a      	ldr	r2, [pc, #488]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b78      	ldr	r3, [pc, #480]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a77      	ldr	r2, [pc, #476]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e01d      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0xbc>
 80043a2:	4b72      	ldr	r3, [pc, #456]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a71      	ldr	r2, [pc, #452]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b6f      	ldr	r3, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6e      	ldr	r2, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 80043bc:	4b6b      	ldr	r3, [pc, #428]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6a      	ldr	r2, [pc, #424]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a67      	ldr	r2, [pc, #412]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fc fee2 	bl	80011a4 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fc fede 	bl	80011a4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e200      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b5d      	ldr	r3, [pc, #372]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0xe4>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fc fece 	bl	80011a4 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fc feca 	bl	80011a4 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1ec      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x10c>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800443a:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004446:	4b49      	ldr	r3, [pc, #292]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11c      	bne.n	800448c <HAL_RCC_OscConfig+0x18c>
 8004452:	4b46      	ldr	r3, [pc, #280]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b43      	ldr	r3, [pc, #268]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x176>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1c0      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4939      	ldr	r1, [pc, #228]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e03a      	b.n	8004502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCC_OscConfig+0x270>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fc fe83 	bl	80011a4 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fc fe7f 	bl	80011a4 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1a1      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4927      	ldr	r1, [pc, #156]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x270>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fc fe62 	bl	80011a4 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fc fe5e 	bl	80011a4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e180      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d03a      	beq.n	8004584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <HAL_RCC_OscConfig+0x274>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7fc fe42 	bl	80011a4 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004524:	f7fc fe3e 	bl	80011a4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e160      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004542:	2001      	movs	r0, #1
 8004544:	f000 faba 	bl	8004abc <RCC_Delay>
 8004548:	e01c      	b.n	8004584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RCC_OscConfig+0x274>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004550:	f7fc fe28 	bl	80011a4 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004556:	e00f      	b.n	8004578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004558:	f7fc fe24 	bl	80011a4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d908      	bls.n	8004578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e146      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	42420000 	.word	0x42420000
 8004574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	4b92      	ldr	r3, [pc, #584]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e9      	bne.n	8004558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80a6 	beq.w	80046de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b8b      	ldr	r3, [pc, #556]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4a87      	ldr	r2, [pc, #540]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	61d3      	str	r3, [r2, #28]
 80045ae:	4b85      	ldr	r3, [pc, #532]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ca:	4b7f      	ldr	r3, [pc, #508]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7e      	ldr	r2, [pc, #504]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fc fde5 	bl	80011a4 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fc fde1 	bl	80011a4 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e103      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	4b75      	ldr	r3, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x312>
 8004604:	4b6f      	ldr	r3, [pc, #444]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4a6e      	ldr	r2, [pc, #440]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6213      	str	r3, [r2, #32]
 8004610:	e02d      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x334>
 800461a:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4a69      	ldr	r2, [pc, #420]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6213      	str	r3, [r2, #32]
 8004626:	4b67      	ldr	r3, [pc, #412]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4a66      	ldr	r2, [pc, #408]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	6213      	str	r3, [r2, #32]
 8004632:	e01c      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x356>
 800463c:	4b61      	ldr	r3, [pc, #388]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a60      	ldr	r2, [pc, #384]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	6213      	str	r3, [r2, #32]
 8004648:	4b5e      	ldr	r3, [pc, #376]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	4a5d      	ldr	r2, [pc, #372]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6213      	str	r3, [r2, #32]
 8004654:	e00b      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	6213      	str	r3, [r2, #32]
 8004662:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4a57      	ldr	r2, [pc, #348]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d015      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004676:	f7fc fd95 	bl	80011a4 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fc fd91 	bl	80011a4 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0b1      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RCC_OscConfig+0x37e>
 80046a0:	e014      	b.n	80046cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a2:	f7fc fd7f 	bl	80011a4 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fc fd7b 	bl	80011a4 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e09b      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ee      	bne.n	80046aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d2:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4a3b      	ldr	r2, [pc, #236]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8087 	beq.w	80047f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d061      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d146      	bne.n	800478a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fc fd4f 	bl	80011a4 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fc fd4b 	bl	80011a4 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e06d      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d108      	bne.n	8004744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4921      	ldr	r1, [pc, #132]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004744:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a19      	ldr	r1, [r3, #32]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	430b      	orrs	r3, r1
 8004756:	491b      	ldr	r1, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc fd1f 	bl	80011a4 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476a:	f7fc fd1b 	bl	80011a4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e03d      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x46a>
 8004788:	e035      	b.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fc fd08 	bl	80011a4 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fc fd04 	bl	80011a4 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e026      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x498>
 80047b6:	e01e      	b.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e019      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x500>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d106      	bne.n	80047f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000

08004804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0d0      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d910      	bls.n	8004848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4965      	ldr	r1, [pc, #404]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b63      	ldr	r3, [pc, #396]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0b8      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004860:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a52      	ldr	r2, [pc, #328]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	494d      	ldr	r1, [pc, #308]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d040      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d115      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e073      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e06b      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4936      	ldr	r1, [pc, #216]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fc fc56 	bl	80011a4 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fc fc52 	bl	80011a4 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e053      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d210      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 0207 	bic.w	r2, r3, #7
 800493a:	4922      	ldr	r1, [pc, #136]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e032      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4916      	ldr	r1, [pc, #88]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490e      	ldr	r1, [pc, #56]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004992:	f000 f821 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490a      	ldr	r1, [pc, #40]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1cc>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1d0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc fbb4 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40022000 	.word	0x40022000
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800947c 	.word	0x0800947c
 80049d0:	20000000 	.word	0x20000000
 80049d4:	20000004 	.word	0x20000004

080049d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049f2:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x94>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d002      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x30>
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d003      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x36>
 8004a06:	e027      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a08:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a0a:	613b      	str	r3, [r7, #16]
      break;
 8004a0c:	e027      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	0c9b      	lsrs	r3, r3, #18
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a18:	5cd3      	ldrb	r3, [r2, r3]
 8004a1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	0c5b      	lsrs	r3, r3, #17
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	4a11      	ldr	r2, [pc, #68]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
 8004a34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a3a:	fb03 f202 	mul.w	r2, r3, r2
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e004      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	613b      	str	r3, [r7, #16]
      break;
 8004a56:	e002      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a5a:	613b      	str	r3, [r7, #16]
      break;
 8004a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5e:	693b      	ldr	r3, [r7, #16]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	007a1200 	.word	0x007a1200
 8004a74:	08009494 	.word	0x08009494
 8004a78:	080094a4 	.word	0x080094a4
 8004a7c:	003d0900 	.word	0x003d0900

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	20000000 	.word	0x20000000

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a98:	f7ff fff2 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	0800948c 	.word	0x0800948c

08004abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <RCC_Delay+0x34>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <RCC_Delay+0x38>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	0a5b      	lsrs	r3, r3, #9
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ad8:	bf00      	nop
  }
  while (Delay --);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1e5a      	subs	r2, r3, #1
 8004ade:	60fa      	str	r2, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f9      	bne.n	8004ad8 <RCC_Delay+0x1c>
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	20000000 	.word	0x20000000
 8004af4:	10624dd3 	.word	0x10624dd3

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d07d      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b14:	2300      	movs	r3, #0
 8004b16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b18:	4b4f      	ldr	r3, [pc, #316]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10d      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b24:	4b4c      	ldr	r3, [pc, #304]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4a4b      	ldr	r2, [pc, #300]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	61d3      	str	r3, [r2, #28]
 8004b30:	4b49      	ldr	r3, [pc, #292]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	4b46      	ldr	r3, [pc, #280]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d118      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4c:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a42      	ldr	r2, [pc, #264]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b58:	f7fc fb24 	bl	80011a4 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5e:	e008      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b60:	f7fc fb20 	bl	80011a4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e06d      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b7e:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02e      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d027      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bac:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bb2:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d014      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fc faef 	bl	80011a4 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fc faeb 	bl	80011a4 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e036      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4917      	ldr	r1, [pc, #92]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	490b      	ldr	r1, [pc, #44]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0310 	and.w	r3, r3, #16
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4904      	ldr	r1, [pc, #16]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	42420440 	.word	0x42420440

08004c64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c64:	b084      	sub	sp, #16
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	f107 0014 	add.w	r0, r7, #20
 8004c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	b004      	add	sp, #16
 8004c82:	4770      	bx	lr

08004c84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	f107 0014 	add.w	r0, r7, #20
 8004d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	b004      	add	sp, #16
 8004d3a:	4770      	bx	lr

08004d3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b09d      	sub	sp, #116	; 0x74
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	78db      	ldrb	r3, [r3, #3]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d81f      	bhi.n	8004dae <USB_ActivateEndpoint+0x72>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <USB_ActivateEndpoint+0x38>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004db7 	.word	0x08004db7
 8004d80:	08004d93 	.word	0x08004d93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d90:	e012      	b.n	8004db8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d92:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d9a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d9e:	e00b      	b.n	8004db8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004da0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004dac:	e004      	b.n	8004db8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004db4:	e000      	b.n	8004db8 <USB_ActivateEndpoint+0x7c>
      break;
 8004db6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	441a      	add	r2, r3
 8004e08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	7b1b      	ldrb	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 8178 	bne.w	800511a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8084 	beq.w	8004f3c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4413      	add	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	011a      	lsls	r2, r3, #4
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	88db      	ldrh	r3, [r3, #6]
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	827b      	strh	r3, [r7, #18]
 8004e76:	8a7b      	ldrh	r3, [r7, #18]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01b      	beq.n	8004eb8 <USB_ActivateEndpoint+0x17c>
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	823b      	strh	r3, [r7, #16]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	8a3b      	ldrh	r3, [r7, #16]
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	78db      	ldrb	r3, [r3, #3]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d020      	beq.n	8004f02 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	81bb      	strh	r3, [r7, #12]
 8004ed8:	89bb      	ldrh	r3, [r7, #12]
 8004eda:	f083 0320 	eor.w	r3, r3, #32
 8004ede:	81bb      	strh	r3, [r7, #12]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	89bb      	ldrh	r3, [r7, #12]
 8004eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	8013      	strh	r3, [r2, #0]
 8004f00:	e2d5      	b.n	80054ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f18:	81fb      	strh	r3, [r7, #14]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	89fb      	ldrh	r3, [r7, #14]
 8004f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	8013      	strh	r3, [r2, #0]
 8004f3a:	e2b8      	b.n	80054ae <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	4413      	add	r3, r2
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	011a      	lsls	r2, r3, #4
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	88db      	ldrh	r3, [r3, #6]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	4413      	add	r3, r2
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	011a      	lsls	r2, r3, #4
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8004faa:	d91d      	bls.n	8004fe8 <USB_ActivateEndpoint+0x2ac>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <USB_ActivateEndpoint+0x28a>
 8004fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	029b      	lsls	r3, r3, #10
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	e026      	b.n	8005036 <USB_ActivateEndpoint+0x2fa>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <USB_ActivateEndpoint+0x2ca>
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e017      	b.n	8005036 <USB_ActivateEndpoint+0x2fa>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	66bb      	str	r3, [r7, #104]	; 0x68
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <USB_ActivateEndpoint+0x2e4>
 800501a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800501c:	3301      	adds	r3, #1
 800501e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29a      	uxth	r2, r3
 8005026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005028:	b29b      	uxth	r3, r3
 800502a:	029b      	lsls	r3, r3, #10
 800502c:	b29b      	uxth	r3, r3
 800502e:	4313      	orrs	r3, r2
 8005030:	b29a      	uxth	r2, r3
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	847b      	strh	r3, [r7, #34]	; 0x22
 8005044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01b      	beq.n	8005086 <USB_ActivateEndpoint+0x34a>
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	843b      	strh	r3, [r7, #32]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	8c3b      	ldrh	r3, [r7, #32]
 8005072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d124      	bne.n	80050d8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a4:	83bb      	strh	r3, [r7, #28]
 80050a6:	8bbb      	ldrh	r3, [r7, #28]
 80050a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050ac:	83bb      	strh	r3, [r7, #28]
 80050ae:	8bbb      	ldrh	r3, [r7, #28]
 80050b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050b4:	83bb      	strh	r3, [r7, #28]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	8bbb      	ldrh	r3, [r7, #28]
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]
 80050d6:	e1ea      	b.n	80054ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	83fb      	strh	r3, [r7, #30]
 80050f0:	8bfb      	ldrh	r3, [r7, #30]
 80050f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050f6:	83fb      	strh	r3, [r7, #30]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	8bfb      	ldrh	r3, [r7, #30]
 8005104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005114:	b29b      	uxth	r3, r3
 8005116:	8013      	strh	r3, [r2, #0]
 8005118:	e1c9      	b.n	80054ae <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	78db      	ldrb	r3, [r3, #3]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d11e      	bne.n	8005160 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800514a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005152:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515a:	b29b      	uxth	r3, r3
 800515c:	8013      	strh	r3, [r2, #0]
 800515e:	e01d      	b.n	800519c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005198:	b29b      	uxth	r3, r3
 800519a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ac:	4413      	add	r3, r2
 80051ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	011a      	lsls	r2, r3, #4
 80051b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051be:	65bb      	str	r3, [r7, #88]	; 0x58
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	891b      	ldrh	r3, [r3, #8]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	657b      	str	r3, [r7, #84]	; 0x54
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051da:	b29b      	uxth	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e0:	4413      	add	r3, r2
 80051e2:	657b      	str	r3, [r7, #84]	; 0x54
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	011a      	lsls	r2, r3, #4
 80051ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051f2:	653b      	str	r3, [r7, #80]	; 0x50
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	895b      	ldrh	r3, [r3, #10]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005202:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 8093 	bne.w	8005334 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800521e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01b      	beq.n	8005262 <USB_ActivateEndpoint+0x526>
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005240:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800524e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800525a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525e:	b29b      	uxth	r3, r3
 8005260:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005270:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01b      	beq.n	80052b2 <USB_ActivateEndpoint+0x576>
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800529e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80052ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80052d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	441a      	add	r2, r3
 80052e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]
 8005332:	e0bc      	b.n	80054ae <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005344:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01d      	beq.n	800538c <USB_ActivateEndpoint+0x650>
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800539c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01d      	beq.n	80053e4 <USB_ActivateEndpoint+0x6a8>
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	78db      	ldrb	r3, [r3, #3]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d024      	beq.n	8005436 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005402:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005406:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800540a:	f083 0320 	eor.w	r3, r3, #32
 800540e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
 8005434:	e01d      	b.n	8005472 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	441a      	add	r2, r3
 800545a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80054ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3774      	adds	r7, #116	; 0x74
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054bc:	b480      	push	{r7}
 80054be:	b08d      	sub	sp, #52	; 0x34
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	7b1b      	ldrb	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 808e 	bne.w	80055ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d044      	beq.n	8005562 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	81bb      	strh	r3, [r7, #12]
 80054e6:	89bb      	ldrh	r3, [r7, #12]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <USB_DeactivateEndpoint+0x6c>
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	817b      	strh	r3, [r7, #10]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	441a      	add	r2, r3
 8005512:	897b      	ldrh	r3, [r7, #10]
 8005514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005524:	b29b      	uxth	r3, r3
 8005526:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553e:	813b      	strh	r3, [r7, #8]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	893b      	ldrh	r3, [r7, #8]
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]
 8005560:	e192      	b.n	8005888 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	827b      	strh	r3, [r7, #18]
 8005570:	8a7b      	ldrh	r3, [r7, #18]
 8005572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01b      	beq.n	80055b2 <USB_DeactivateEndpoint+0xf6>
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	823b      	strh	r3, [r7, #16]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	8a3b      	ldrh	r3, [r7, #16]
 800559e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	81fb      	strh	r3, [r7, #14]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	89fb      	ldrh	r3, [r7, #14]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]
 80055ea:	e14d      	b.n	8005888 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f040 80a5 	bne.w	8005740 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	843b      	strh	r3, [r7, #32]
 8005604:	8c3b      	ldrh	r3, [r7, #32]
 8005606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01b      	beq.n	8005646 <USB_DeactivateEndpoint+0x18a>
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005624:	83fb      	strh	r3, [r7, #30]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	8bfb      	ldrh	r3, [r7, #30]
 8005632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800563e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005642:	b29b      	uxth	r3, r3
 8005644:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	83bb      	strh	r3, [r7, #28]
 8005654:	8bbb      	ldrh	r3, [r7, #28]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01b      	beq.n	8005696 <USB_DeactivateEndpoint+0x1da>
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	837b      	strh	r3, [r7, #26]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	441a      	add	r2, r3
 8005680:	8b7b      	ldrh	r3, [r7, #26]
 8005682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005692:	b29b      	uxth	r3, r3
 8005694:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	833b      	strh	r3, [r7, #24]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8b3b      	ldrh	r3, [r7, #24]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	82fb      	strh	r3, [r7, #22]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8afb      	ldrh	r3, [r7, #22]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571c:	82bb      	strh	r3, [r7, #20]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8abb      	ldrh	r3, [r7, #20]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e0a3      	b.n	8005888 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800574e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <USB_DeactivateEndpoint+0x2d4>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800579e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01b      	beq.n	80057e0 <USB_DeactivateEndpoint+0x324>
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	853b      	strh	r3, [r7, #40]	; 0x28
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800583c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	b29b      	uxth	r3, r3
 800584e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	847b      	strh	r3, [r7, #34]	; 0x22
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3734      	adds	r7, #52	; 0x34
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b0c2      	sub	sp, #264	; 0x108
 8005898:	af00      	add	r7, sp, #0
 800589a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058a2:	6018      	str	r0, [r3, #0]
 80058a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ac:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	f040 86b7 	bne.w	800662e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d908      	bls.n	80058ee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058ec:	e007      	b.n	80058fe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80058fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	7b1b      	ldrb	r3, [r3, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d13a      	bne.n	8005984 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800590e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6959      	ldr	r1, [r3, #20]
 800591a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	88da      	ldrh	r2, [r3, #6]
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592a:	b29b      	uxth	r3, r3
 800592c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005930:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005934:	6800      	ldr	r0, [r0, #0]
 8005936:	f001 fc9c 	bl	8007272 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005954:	b29b      	uxth	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4413      	add	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	011a      	lsls	r2, r3, #4
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	f000 be1f 	b.w	80065c2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	78db      	ldrb	r3, [r3, #3]
 8005990:	2b02      	cmp	r3, #2
 8005992:	f040 8462 	bne.w	800625a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6a1a      	ldr	r2, [r3, #32]
 80059a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	f240 83df 	bls.w	8006172 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	441a      	add	r2, r3
 80059f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 81c7 	beq.w	8005de4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
 8005a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d177      	bne.n	8005b62 <USB_EPStartXfer+0x2ce>
 8005a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	4413      	add	r3, r2
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	011a      	lsls	r2, r3, #4
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ac4:	d921      	bls.n	8005b0a <USB_EPStartXfer+0x276>
 8005ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <USB_EPStartXfer+0x252>
 8005adc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	4313      	orrs	r3, r2
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	e050      	b.n	8005bac <USB_EPStartXfer+0x318>
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <USB_EPStartXfer+0x294>
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e041      	b.n	8005bac <USB_EPStartXfer+0x318>
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b2c:	085b      	lsrs	r3, r3, #1
 8005b2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <USB_EPStartXfer+0x2b4>
 8005b3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b42:	3301      	adds	r3, #1
 8005b44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	029b      	lsls	r3, r3, #10
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	e024      	b.n	8005bac <USB_EPStartXfer+0x318>
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d11c      	bne.n	8005bac <USB_EPStartXfer+0x318>
 8005b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	4413      	add	r3, r2
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	011a      	lsls	r2, r3, #4
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	895b      	ldrh	r3, [r3, #10]
 8005bb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6959      	ldr	r1, [r3, #20]
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bda:	6800      	ldr	r0, [r0, #0]
 8005bdc:	f001 fb49 	bl	8007272 <USB_WritePMA>
            ep->xfer_buff += len;
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695a      	ldr	r2, [r3, #20]
 8005bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf0:	441a      	add	r2, r3
 8005bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a1a      	ldr	r2, [r3, #32]
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d90f      	bls.n	8005c3a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6a1a      	ldr	r2, [r3, #32]
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	621a      	str	r2, [r3, #32]
 8005c38:	e00e      	b.n	8005c58 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2200      	movs	r2, #0
 8005c56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d177      	bne.n	8005d58 <USB_EPStartXfer+0x4c4>
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	4413      	add	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cba:	d921      	bls.n	8005d00 <USB_EPStartXfer+0x46c>
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d104      	bne.n	8005cdc <USB_EPStartXfer+0x448>
 8005cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e056      	b.n	8005dae <USB_EPStartXfer+0x51a>
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <USB_EPStartXfer+0x48a>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e047      	b.n	8005dae <USB_EPStartXfer+0x51a>
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <USB_EPStartXfer+0x4aa>
 8005d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d38:	3301      	adds	r3, #1
 8005d3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e02a      	b.n	8005dae <USB_EPStartXfer+0x51a>
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d122      	bne.n	8005dae <USB_EPStartXfer+0x51a>
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	623b      	str	r3, [r7, #32]
 8005d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	4413      	add	r3, r2
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	011a      	lsls	r2, r3, #4
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	891b      	ldrh	r3, [r3, #8]
 8005dba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6959      	ldr	r1, [r3, #20]
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dd4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005dd8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f001 fa48 	bl	8007272 <USB_WritePMA>
 8005de2:	e3ee      	b.n	80065c2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d177      	bne.n	8005ee4 <USB_EPStartXfer+0x650>
 8005df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e14:	4413      	add	r3, r2
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	011a      	lsls	r2, r3, #4
 8005e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	2b3e      	cmp	r3, #62	; 0x3e
 8005e46:	d921      	bls.n	8005e8c <USB_EPStartXfer+0x5f8>
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <USB_EPStartXfer+0x5d4>
 8005e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e62:	3b01      	subs	r3, #1
 8005e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	029b      	lsls	r3, r3, #10
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	e056      	b.n	8005f3a <USB_EPStartXfer+0x6a6>
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <USB_EPStartXfer+0x616>
 8005e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	e047      	b.n	8005f3a <USB_EPStartXfer+0x6a6>
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <USB_EPStartXfer+0x636>
 8005ec0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	029b      	lsls	r3, r3, #10
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	4313      	orrs	r3, r2
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	e02a      	b.n	8005f3a <USB_EPStartXfer+0x6a6>
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d122      	bne.n	8005f3a <USB_EPStartXfer+0x6a6>
 8005ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	653b      	str	r3, [r7, #80]	; 0x50
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f14:	4413      	add	r3, r2
 8005f16:	653b      	str	r3, [r7, #80]	; 0x50
 8005f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	011a      	lsls	r2, r3, #4
 8005f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f28:	4413      	add	r3, r2
 8005f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	891b      	ldrh	r3, [r3, #8]
 8005f46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6959      	ldr	r1, [r3, #20]
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f68:	6800      	ldr	r0, [r0, #0]
 8005f6a:	f001 f982 	bl	8007272 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	441a      	add	r2, r3
 8005f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d90f      	bls.n	8005fc8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb8:	1ad2      	subs	r2, r2, r3
 8005fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	621a      	str	r2, [r3, #32]
 8005fc6:	e00e      	b.n	8005fe6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d177      	bne.n	80060f2 <USB_EPStartXfer+0x85e>
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	63bb      	str	r3, [r7, #56]	; 0x38
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601c:	b29b      	uxth	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	4413      	add	r3, r2
 8006024:	63bb      	str	r3, [r7, #56]	; 0x38
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	011a      	lsls	r2, r3, #4
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	4413      	add	r3, r2
 8006038:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006048:	b29a      	uxth	r2, r3
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006052:	2b3e      	cmp	r3, #62	; 0x3e
 8006054:	d921      	bls.n	800609a <USB_EPStartXfer+0x806>
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <USB_EPStartXfer+0x7e2>
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	3b01      	subs	r3, #1
 8006072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29a      	uxth	r2, r3
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	b29b      	uxth	r3, r3
 8006082:	029b      	lsls	r3, r3, #10
 8006084:	b29b      	uxth	r3, r3
 8006086:	4313      	orrs	r3, r2
 8006088:	b29b      	uxth	r3, r3
 800608a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006092:	b29a      	uxth	r2, r3
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e050      	b.n	800613c <USB_EPStartXfer+0x8a8>
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <USB_EPStartXfer+0x824>
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	e041      	b.n	800613c <USB_EPStartXfer+0x8a8>
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <USB_EPStartXfer+0x844>
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d2:	3301      	adds	r3, #1
 80060d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	029b      	lsls	r3, r3, #10
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e024      	b.n	800613c <USB_EPStartXfer+0x8a8>
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d11c      	bne.n	800613c <USB_EPStartXfer+0x8a8>
 8006102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006110:	b29b      	uxth	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006116:	4413      	add	r3, r2
 8006118:	643b      	str	r3, [r7, #64]	; 0x40
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	011a      	lsls	r2, r3, #4
 8006128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612a:	4413      	add	r3, r2
 800612c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006136:	b29a      	uxth	r2, r3
 8006138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	895b      	ldrh	r3, [r3, #10]
 8006148:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6959      	ldr	r1, [r3, #20]
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615c:	b29b      	uxth	r3, r3
 800615e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006162:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006166:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	f001 f881 	bl	8007272 <USB_WritePMA>
 8006170:	e227      	b.n	80065c2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80061ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fe:	4413      	add	r3, r2
 8006200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	011a      	lsls	r2, r3, #4
 8006210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006212:	4413      	add	r3, r2
 8006214:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006218:	65bb      	str	r3, [r7, #88]	; 0x58
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621e:	b29a      	uxth	r2, r3
 8006220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006222:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	891b      	ldrh	r3, [r3, #8]
 8006230:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6959      	ldr	r1, [r3, #20]
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	b29b      	uxth	r3, r3
 8006246:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800624a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800624e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	f001 f80d 	bl	8007272 <USB_WritePMA>
 8006258:	e1b3      	b.n	80065c2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a1a      	ldr	r2, [r3, #32]
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626a:	1ad2      	subs	r2, r2, r3
 800626c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80c6 	beq.w	800642c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	673b      	str	r3, [r7, #112]	; 0x70
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d177      	bne.n	80063ac <USB_EPStartXfer+0xb18>
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062dc:	4413      	add	r3, r2
 80062de:	66bb      	str	r3, [r7, #104]	; 0x68
 80062e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062f0:	4413      	add	r3, r2
 80062f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f6:	667b      	str	r3, [r7, #100]	; 0x64
 80062f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006302:	b29a      	uxth	r2, r3
 8006304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630c:	2b3e      	cmp	r3, #62	; 0x3e
 800630e:	d921      	bls.n	8006354 <USB_EPStartXfer+0xac0>
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800631a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <USB_EPStartXfer+0xa9c>
 8006326:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800632a:	3b01      	subs	r3, #1
 800632c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800633a:	b29b      	uxth	r3, r3
 800633c:	029b      	lsls	r3, r3, #10
 800633e:	b29b      	uxth	r3, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e050      	b.n	80063f6 <USB_EPStartXfer+0xb62>
 8006354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <USB_EPStartXfer+0xade>
 800635c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636a:	b29a      	uxth	r2, r3
 800636c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e041      	b.n	80063f6 <USB_EPStartXfer+0xb62>
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <USB_EPStartXfer+0xafe>
 8006388:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800638c:	3301      	adds	r3, #1
 800638e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800639c:	b29b      	uxth	r3, r3
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e024      	b.n	80063f6 <USB_EPStartXfer+0xb62>
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d11c      	bne.n	80063f6 <USB_EPStartXfer+0xb62>
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063d0:	4413      	add	r3, r2
 80063d2:	673b      	str	r3, [r7, #112]	; 0x70
 80063d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	011a      	lsls	r2, r3, #4
 80063e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	895b      	ldrh	r3, [r3, #10]
 8006402:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6959      	ldr	r1, [r3, #20]
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006416:	b29b      	uxth	r3, r3
 8006418:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800641c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006420:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006424:	6800      	ldr	r0, [r0, #0]
 8006426:	f000 ff24 	bl	8007272 <USB_WritePMA>
 800642a:	e0ca      	b.n	80065c2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	785b      	ldrb	r3, [r3, #1]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d177      	bne.n	800652c <USB_EPStartXfer+0xc98>
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006456:	b29b      	uxth	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800645c:	4413      	add	r3, r2
 800645e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	011a      	lsls	r2, r3, #4
 800646e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006470:	4413      	add	r3, r2
 8006472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006476:	67bb      	str	r3, [r7, #120]	; 0x78
 8006478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006482:	b29a      	uxth	r2, r3
 8006484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	2b3e      	cmp	r3, #62	; 0x3e
 800648e:	d921      	bls.n	80064d4 <USB_EPStartXfer+0xc40>
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <USB_EPStartXfer+0xc1c>
 80064a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064aa:	3b01      	subs	r3, #1
 80064ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	029b      	lsls	r3, r3, #10
 80064be:	b29b      	uxth	r3, r3
 80064c0:	4313      	orrs	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e05c      	b.n	800658e <USB_EPStartXfer+0xcfa>
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <USB_EPStartXfer+0xc5e>
 80064dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e04d      	b.n	800658e <USB_EPStartXfer+0xcfa>
 80064f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <USB_EPStartXfer+0xc7e>
 8006508:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800650c:	3301      	adds	r3, #1
 800650e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800651c:	b29b      	uxth	r3, r3
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	b29b      	uxth	r3, r3
 8006522:	4313      	orrs	r3, r2
 8006524:	b29a      	uxth	r2, r3
 8006526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e030      	b.n	800658e <USB_EPStartXfer+0xcfa>
 800652c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d128      	bne.n	800658e <USB_EPStartXfer+0xcfa>
 800653c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800654a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006558:	b29b      	uxth	r3, r3
 800655a:	461a      	mov	r2, r3
 800655c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006560:	4413      	add	r3, r2
 8006562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	011a      	lsls	r2, r3, #4
 8006574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006578:	4413      	add	r3, r2
 800657a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800657e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800658c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800658e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	891b      	ldrh	r3, [r3, #8]
 800659a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6959      	ldr	r1, [r3, #20]
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065bc:	6800      	ldr	r0, [r0, #0]
 80065be:	f000 fe58 	bl	8007272 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e8:	817b      	strh	r3, [r7, #10]
 80065ea:	897b      	ldrh	r3, [r7, #10]
 80065ec:	f083 0310 	eor.w	r3, r3, #16
 80065f0:	817b      	strh	r3, [r7, #10]
 80065f2:	897b      	ldrh	r3, [r7, #10]
 80065f4:	f083 0320 	eor.w	r3, r3, #32
 80065f8:	817b      	strh	r3, [r7, #10]
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	441a      	add	r2, r3
 8006614:	897b      	ldrh	r3, [r7, #10]
 8006616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006626:	b29b      	uxth	r3, r3
 8006628:	8013      	strh	r3, [r2, #0]
 800662a:	f000 bcde 	b.w	8006fea <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	7b1b      	ldrb	r3, [r3, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 80bb 	bne.w	80067b6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699a      	ldr	r2, [r3, #24]
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	429a      	cmp	r2, r3
 800665a:	d917      	bls.n	800668c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800665c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800666c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667c:	1ad2      	subs	r2, r2, r3
 800667e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	619a      	str	r2, [r3, #24]
 800668a:	e00e      	b.n	80066aa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800669c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2200      	movs	r2, #0
 80066a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80066aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066ce:	4413      	add	r3, r2
 80066d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	011a      	lsls	r2, r3, #4
 80066e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066e6:	4413      	add	r3, r2
 80066e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	2b3e      	cmp	r3, #62	; 0x3e
 800670a:	d924      	bls.n	8006756 <USB_EPStartXfer+0xec2>
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <USB_EPStartXfer+0xe98>
 8006722:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006726:	3b01      	subs	r3, #1
 8006728:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800672c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29a      	uxth	r2, r3
 8006734:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006738:	b29b      	uxth	r3, r3
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	b29b      	uxth	r3, r3
 800673e:	4313      	orrs	r3, r2
 8006740:	b29b      	uxth	r3, r3
 8006742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674a:	b29a      	uxth	r2, r3
 800674c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	f000 bc10 	b.w	8006f76 <USB_EPStartXfer+0x16e2>
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10c      	bne.n	8006778 <USB_EPStartXfer+0xee4>
 800675e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676e:	b29a      	uxth	r2, r3
 8006770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	e3fe      	b.n	8006f76 <USB_EPStartXfer+0x16e2>
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <USB_EPStartXfer+0xf04>
 800678e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006792:	3301      	adds	r3, #1
 8006794:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	029b      	lsls	r3, r3, #10
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	4313      	orrs	r3, r2
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e3df      	b.n	8006f76 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	78db      	ldrb	r3, [r3, #3]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	f040 8218 	bne.w	8006bf8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 809d 	bne.w	8006914 <USB_EPStartXfer+0x1080>
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067fe:	4413      	add	r3, r2
 8006800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	011a      	lsls	r2, r3, #4
 8006812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006816:	4413      	add	r3, r2
 8006818:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800681c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800682c:	b29a      	uxth	r2, r3
 800682e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b3e      	cmp	r3, #62	; 0x3e
 8006842:	d92b      	bls.n	800689c <USB_EPStartXfer+0x1008>
 8006844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <USB_EPStartXfer+0xfe0>
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686e:	3b01      	subs	r3, #1
 8006870:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006880:	b29b      	uxth	r3, r3
 8006882:	029b      	lsls	r3, r3, #10
 8006884:	b29b      	uxth	r3, r3
 8006886:	4313      	orrs	r3, r2
 8006888:	b29b      	uxth	r3, r3
 800688a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006892:	b29a      	uxth	r2, r3
 8006894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	e070      	b.n	800697e <USB_EPStartXfer+0x10ea>
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10c      	bne.n	80068c6 <USB_EPStartXfer+0x1032>
 80068ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	e05b      	b.n	800697e <USB_EPStartXfer+0x10ea>
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	085b      	lsrs	r3, r3, #1
 80068d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <USB_EPStartXfer+0x1062>
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f0:	3301      	adds	r3, #1
 80068f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006902:	b29b      	uxth	r3, r3
 8006904:	029b      	lsls	r3, r3, #10
 8006906:	b29b      	uxth	r3, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	b29a      	uxth	r2, r3
 800690c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	e034      	b.n	800697e <USB_EPStartXfer+0x10ea>
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d12c      	bne.n	800697e <USB_EPStartXfer+0x10ea>
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006948:	4413      	add	r3, r2
 800694a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	011a      	lsls	r2, r3, #4
 800695c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006960:	4413      	add	r3, r2
 8006962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	b29a      	uxth	r2, r3
 8006978:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800698c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	785b      	ldrb	r3, [r3, #1]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f040 809d 	bne.w	8006ad8 <USB_EPStartXfer+0x1244>
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c2:	4413      	add	r3, r2
 80069c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	011a      	lsls	r2, r3, #4
 80069d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069da:	4413      	add	r3, r2
 80069dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b3e      	cmp	r3, #62	; 0x3e
 8006a06:	d92b      	bls.n	8006a60 <USB_EPStartXfer+0x11cc>
 8006a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 031f 	and.w	r3, r3, #31
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <USB_EPStartXfer+0x11a4>
 8006a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a32:	3b01      	subs	r3, #1
 8006a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	e069      	b.n	8006b34 <USB_EPStartXfer+0x12a0>
 8006a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10c      	bne.n	8006a8a <USB_EPStartXfer+0x11f6>
 8006a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	e054      	b.n	8006b34 <USB_EPStartXfer+0x12a0>
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <USB_EPStartXfer+0x1226>
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	029b      	lsls	r3, r3, #10
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	4313      	orrs	r3, r2
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ad4:	801a      	strh	r2, [r3, #0]
 8006ad6:	e02d      	b.n	8006b34 <USB_EPStartXfer+0x12a0>
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d125      	bne.n	8006b34 <USB_EPStartXfer+0x12a0>
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006afe:	4413      	add	r3, r2
 8006b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	011a      	lsls	r2, r3, #4
 8006b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b32:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8218 	beq.w	8006f76 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <USB_EPStartXfer+0x12ea>
 8006b72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f040 81f5 	bne.w	8006f76 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f040 81ee 	bne.w	8006f76 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	8013      	strh	r3, [r2, #0]
 8006bf6:	e1be      	b.n	8006f76 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	78db      	ldrb	r3, [r3, #3]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	f040 81b4 	bne.w	8006f72 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d917      	bls.n	8006c56 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	619a      	str	r2, [r3, #24]
 8006c54:	e00e      	b.n	8006c74 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2200      	movs	r2, #0
 8006c72:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8085 	bne.w	8006d90 <USB_EPStartXfer+0x14fc>
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006caa:	4413      	add	r3, r2
 8006cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	011a      	lsls	r2, r3, #4
 8006cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ce6:	d923      	bls.n	8006d30 <USB_EPStartXfer+0x149c>
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <USB_EPStartXfer+0x1474>
 8006cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d02:	3b01      	subs	r3, #1
 8006d04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	029b      	lsls	r3, r3, #10
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	e060      	b.n	8006df2 <USB_EPStartXfer+0x155e>
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <USB_EPStartXfer+0x14be>
 8006d38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	e04f      	b.n	8006df2 <USB_EPStartXfer+0x155e>
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <USB_EPStartXfer+0x14de>
 8006d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	029b      	lsls	r3, r3, #10
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	e030      	b.n	8006df2 <USB_EPStartXfer+0x155e>
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d128      	bne.n	8006df2 <USB_EPStartXfer+0x155e>
 8006da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	011a      	lsls	r2, r3, #4
 8006dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ddc:	4413      	add	r3, r2
 8006dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006de2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f040 8085 	bne.w	8006f1c <USB_EPStartXfer+0x1688>
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e36:	4413      	add	r3, r2
 8006e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	011a      	lsls	r2, r3, #4
 8006e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e4e:	4413      	add	r3, r2
 8006e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	2b3e      	cmp	r3, #62	; 0x3e
 8006e72:	d923      	bls.n	8006ebc <USB_EPStartXfer+0x1628>
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <USB_EPStartXfer+0x1600>
 8006e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	e05c      	b.n	8006f76 <USB_EPStartXfer+0x16e2>
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10c      	bne.n	8006ede <USB_EPStartXfer+0x164a>
 8006ec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e04b      	b.n	8006f76 <USB_EPStartXfer+0x16e2>
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <USB_EPStartXfer+0x166a>
 8006ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ef8:	3301      	adds	r3, #1
 8006efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	029b      	lsls	r3, r3, #10
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	4313      	orrs	r3, r2
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	e02c      	b.n	8006f76 <USB_EPStartXfer+0x16e2>
 8006f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d124      	bne.n	8006f76 <USB_EPStartXfer+0x16e2>
 8006f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f42:	4413      	add	r3, r2
 8006f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	011a      	lsls	r2, r3, #4
 8006f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f6e:	801a      	strh	r2, [r3, #0]
 8006f70:	e001      	b.n	8006f76 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e03a      	b.n	8006fec <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fa8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fb4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d020      	beq.n	800704a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701e:	81bb      	strh	r3, [r7, #12]
 8007020:	89bb      	ldrh	r3, [r7, #12]
 8007022:	f083 0310 	eor.w	r3, r3, #16
 8007026:	81bb      	strh	r3, [r7, #12]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	89bb      	ldrh	r3, [r7, #12]
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]
 8007048:	e01f      	b.n	800708a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800705c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007060:	81fb      	strh	r3, [r7, #14]
 8007062:	89fb      	ldrh	r3, [r7, #14]
 8007064:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007068:	81fb      	strh	r3, [r7, #14]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007096:	b480      	push	{r7}
 8007098:	b087      	sub	sp, #28
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	7b1b      	ldrb	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 809d 	bne.w	80071e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d04c      	beq.n	800714c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	823b      	strh	r3, [r7, #16]
 80070c0:	8a3b      	ldrh	r3, [r7, #16]
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01b      	beq.n	8007102 <USB_EPClearStall+0x6c>
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e0:	81fb      	strh	r3, [r7, #14]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	441a      	add	r2, r3
 80070ec:	89fb      	ldrh	r3, [r7, #14]
 80070ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070fe:	b29b      	uxth	r3, r3
 8007100:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d06c      	beq.n	80071e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007120:	81bb      	strh	r3, [r7, #12]
 8007122:	89bb      	ldrh	r3, [r7, #12]
 8007124:	f083 0320 	eor.w	r3, r3, #32
 8007128:	81bb      	strh	r3, [r7, #12]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	441a      	add	r2, r3
 8007134:	89bb      	ldrh	r3, [r7, #12]
 8007136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007146:	b29b      	uxth	r3, r3
 8007148:	8013      	strh	r3, [r2, #0]
 800714a:	e04b      	b.n	80071e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	82fb      	strh	r3, [r7, #22]
 800715a:	8afb      	ldrh	r3, [r7, #22]
 800715c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01b      	beq.n	800719c <USB_EPClearStall+0x106>
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	82bb      	strh	r3, [r7, #20]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	8abb      	ldrh	r3, [r7, #20]
 8007188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007198:	b29b      	uxth	r3, r3
 800719a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b2:	827b      	strh	r3, [r7, #18]
 80071b4:	8a7b      	ldrh	r3, [r7, #18]
 80071b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071ba:	827b      	strh	r3, [r7, #18]
 80071bc:	8a7b      	ldrh	r3, [r7, #18]
 80071be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071c2:	827b      	strh	r3, [r7, #18]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	8a7b      	ldrh	r3, [r7, #18]
 80071d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2280      	movs	r2, #128	; 0x80
 8007206:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr

0800722a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800724c:	b29b      	uxth	r3, r3
 800724e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007250:	68fb      	ldr	r3, [r7, #12]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr

08007272 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007272:	b480      	push	{r7}
 8007274:	b08b      	sub	sp, #44	; 0x2c
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	4611      	mov	r1, r2
 800727e:	461a      	mov	r2, r3
 8007280:	460b      	mov	r3, r1
 8007282:	80fb      	strh	r3, [r7, #6]
 8007284:	4613      	mov	r3, r2
 8007286:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007288:	88bb      	ldrh	r3, [r7, #4]
 800728a:	3301      	adds	r3, #1
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	005a      	lsls	r2, r3, #1
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
 80072aa:	e01e      	b.n	80072ea <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	3301      	adds	r3, #1
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	021b      	lsls	r3, r3, #8
 80072ba:	b21a      	sxth	r2, r3
 80072bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	b21b      	sxth	r3, r3
 80072c4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	8a7a      	ldrh	r2, [r7, #18]
 80072ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	3302      	adds	r3, #2
 80072d0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	3302      	adds	r3, #2
 80072d6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3301      	adds	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	3301      	adds	r3, #1
 80072e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	3b01      	subs	r3, #1
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1dd      	bne.n	80072ac <USB_WritePMA+0x3a>
  }
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	372c      	adds	r7, #44	; 0x2c
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b08b      	sub	sp, #44	; 0x2c
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4611      	mov	r1, r2
 8007308:	461a      	mov	r2, r3
 800730a:	460b      	mov	r3, r1
 800730c:	80fb      	strh	r3, [r7, #6]
 800730e:	4613      	mov	r3, r2
 8007310:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007312:	88bb      	ldrh	r3, [r7, #4]
 8007314:	085b      	lsrs	r3, r3, #1
 8007316:	b29b      	uxth	r3, r3
 8007318:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	005a      	lsls	r2, r3, #1
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800732e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
 8007334:	e01b      	b.n	800736e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	3302      	adds	r3, #2
 8007342:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	b2da      	uxtb	r2, r3
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	3301      	adds	r3, #1
 8007350:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	0a1b      	lsrs	r3, r3, #8
 8007356:	b2da      	uxtb	r2, r3
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	3301      	adds	r3, #1
 8007360:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	3302      	adds	r3, #2
 8007366:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	3b01      	subs	r3, #1
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e0      	bne.n	8007336 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007374:	88bb      	ldrh	r3, [r7, #4]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29b      	uxth	r3, r3
 8007386:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	701a      	strb	r2, [r3, #0]
  }
}
 8007390:	bf00      	nop
 8007392:	372c      	adds	r7, #44	; 0x2c
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7c1b      	ldrb	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d115      	bne.n	80073de <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b6:	2202      	movs	r2, #2
 80073b8:	2181      	movs	r1, #129	; 0x81
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fe8f 	bl	80090de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ca:	2202      	movs	r2, #2
 80073cc:	2101      	movs	r1, #1
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 fe85 	bl	80090de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80073dc:	e012      	b.n	8007404 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073de:	2340      	movs	r3, #64	; 0x40
 80073e0:	2202      	movs	r2, #2
 80073e2:	2181      	movs	r1, #129	; 0x81
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fe7a 	bl	80090de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073f0:	2340      	movs	r3, #64	; 0x40
 80073f2:	2202      	movs	r2, #2
 80073f4:	2101      	movs	r1, #1
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fe71 	bl	80090de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007404:	2308      	movs	r3, #8
 8007406:	2203      	movs	r2, #3
 8007408:	2182      	movs	r1, #130	; 0x82
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fe67 	bl	80090de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007416:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800741a:	f001 ff87 	bl	800932c <USBD_static_malloc>
 800741e:	4602      	mov	r2, r0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007430:	2301      	movs	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	e026      	b.n	8007484 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2200      	movs	r2, #0
 800744c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	7c1b      	ldrb	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d109      	bne.n	8007474 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800746a:	2101      	movs	r1, #1
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 ff27 	bl	80092c0 <USBD_LL_PrepareReceive>
 8007472:	e007      	b.n	8007484 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	2101      	movs	r1, #1
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 ff1e 	bl	80092c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800749e:	2181      	movs	r1, #129	; 0x81
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 fe42 	bl	800912a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074ac:	2101      	movs	r1, #1
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 fe3b 	bl	800912a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074bc:	2182      	movs	r1, #130	; 0x82
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 fe33 	bl	800912a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00e      	beq.n	80074f2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 ff2d 	bl	8009344 <USBD_static_free>
    pdev->pClassData = NULL;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007522:	2b00      	cmp	r3, #0
 8007524:	d039      	beq.n	800759a <USBD_CDC_Setup+0x9e>
 8007526:	2b20      	cmp	r3, #32
 8007528:	d17f      	bne.n	800762a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	88db      	ldrh	r3, [r3, #6]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d029      	beq.n	8007586 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b25b      	sxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	da11      	bge.n	8007560 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007548:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	88d2      	ldrh	r2, [r2, #6]
 800754e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007550:	6939      	ldr	r1, [r7, #16]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	88db      	ldrh	r3, [r3, #6]
 8007556:	461a      	mov	r2, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fa0a 	bl	8008972 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800755e:	e06b      	b.n	8007638 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	785a      	ldrb	r2, [r3, #1]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	88db      	ldrh	r3, [r3, #6]
 800756e:	b2da      	uxtb	r2, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007576:	6939      	ldr	r1, [r7, #16]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	88db      	ldrh	r3, [r3, #6]
 800757c:	461a      	mov	r2, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fa25 	bl	80089ce <USBD_CtlPrepareRx>
      break;
 8007584:	e058      	b.n	8007638 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	7850      	ldrb	r0, [r2, #1]
 8007592:	2200      	movs	r2, #0
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	4798      	blx	r3
      break;
 8007598:	e04e      	b.n	8007638 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b0b      	cmp	r3, #11
 80075a0:	d02e      	beq.n	8007600 <USBD_CDC_Setup+0x104>
 80075a2:	2b0b      	cmp	r3, #11
 80075a4:	dc38      	bgt.n	8007618 <USBD_CDC_Setup+0x11c>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <USBD_CDC_Setup+0xb4>
 80075aa:	2b0a      	cmp	r3, #10
 80075ac:	d014      	beq.n	80075d8 <USBD_CDC_Setup+0xdc>
 80075ae:	e033      	b.n	8007618 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d107      	bne.n	80075ca <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80075ba:	f107 030c 	add.w	r3, r7, #12
 80075be:	2202      	movs	r2, #2
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 f9d5 	bl	8008972 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075c8:	e02e      	b.n	8007628 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f966 	bl	800889e <USBD_CtlError>
            ret = USBD_FAIL;
 80075d2:	2302      	movs	r3, #2
 80075d4:	75fb      	strb	r3, [r7, #23]
          break;
 80075d6:	e027      	b.n	8007628 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d107      	bne.n	80075f2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80075e2:	f107 030f 	add.w	r3, r7, #15
 80075e6:	2201      	movs	r2, #1
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f9c1 	bl	8008972 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075f0:	e01a      	b.n	8007628 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 f952 	bl	800889e <USBD_CtlError>
            ret = USBD_FAIL;
 80075fa:	2302      	movs	r3, #2
 80075fc:	75fb      	strb	r3, [r7, #23]
          break;
 80075fe:	e013      	b.n	8007628 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007606:	2b03      	cmp	r3, #3
 8007608:	d00d      	beq.n	8007626 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f946 	bl	800889e <USBD_CtlError>
            ret = USBD_FAIL;
 8007612:	2302      	movs	r3, #2
 8007614:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007616:	e006      	b.n	8007626 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f93f 	bl	800889e <USBD_CtlError>
          ret = USBD_FAIL;
 8007620:	2302      	movs	r3, #2
 8007622:	75fb      	strb	r3, [r7, #23]
          break;
 8007624:	e000      	b.n	8007628 <USBD_CDC_Setup+0x12c>
          break;
 8007626:	bf00      	nop
      }
      break;
 8007628:	e006      	b.n	8007638 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f936 	bl	800889e <USBD_CtlError>
      ret = USBD_FAIL;
 8007632:	2302      	movs	r3, #2
 8007634:	75fb      	strb	r3, [r7, #23]
      break;
 8007636:	bf00      	nop
  }

  return ret;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007654:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800765c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d03a      	beq.n	80076de <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	331c      	adds	r3, #28
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d029      	beq.n	80076d2 <USBD_CDC_DataIn+0x90>
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	331c      	adds	r3, #28
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	78f9      	ldrb	r1, [r7, #3]
 8007692:	68b8      	ldr	r0, [r7, #8]
 8007694:	460b      	mov	r3, r1
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	4403      	add	r3, r0
 800769e:	3338      	adds	r3, #56	; 0x38
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	fbb2 f1f3 	udiv	r1, r2, r3
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d110      	bne.n	80076d2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	331c      	adds	r3, #28
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076c4:	78f9      	ldrb	r1, [r7, #3]
 80076c6:	2300      	movs	r3, #0
 80076c8:	2200      	movs	r2, #0
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fdd5 	bl	800927a <USBD_LL_Transmit>
 80076d0:	e003      	b.n	80076da <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	e000      	b.n	80076e0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80076de:	2302      	movs	r3, #2
  }
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fe00 	bl	8009306 <USBD_LL_GetRxDataSize>
 8007706:	4602      	mov	r2, r0
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00d      	beq.n	8007734 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800772c:	4611      	mov	r1, r2
 800772e:	4798      	blx	r3

    return USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e000      	b.n	8007736 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007754:	2b00      	cmp	r3, #0
 8007756:	d015      	beq.n	8007784 <USBD_CDC_EP0_RxReady+0x46>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800775e:	2bff      	cmp	r3, #255	; 0xff
 8007760:	d010      	beq.n	8007784 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007770:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007778:	b292      	uxth	r2, r2
 800777a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	22ff      	movs	r2, #255	; 0xff
 8007780:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2243      	movs	r2, #67	; 0x43
 800779c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800779e:	4b03      	ldr	r3, [pc, #12]	; (80077ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20000094 	.word	0x20000094

080077b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2243      	movs	r2, #67	; 0x43
 80077bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077be:	4b03      	ldr	r3, [pc, #12]	; (80077cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000050 	.word	0x20000050

080077d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2243      	movs	r2, #67	; 0x43
 80077dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077de:	4b03      	ldr	r3, [pc, #12]	; (80077ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	200000d8 	.word	0x200000d8

080077f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	220a      	movs	r2, #10
 80077fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80077fe:	4b03      	ldr	r3, [pc, #12]	; (800780c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	2000000c 	.word	0x2000000c

08007810 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800781a:	2302      	movs	r3, #2
 800781c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007850:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr

0800786e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01c      	beq.n	80078e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d115      	bne.n	80078e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2181      	movs	r1, #129	; 0x81
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 fccd 	bl	800927a <USBD_LL_Transmit>

      return USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e002      	b.n	80078ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80078e8:	2302      	movs	r3, #2
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d017      	beq.n	800793c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7c1b      	ldrb	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800791a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791e:	2101      	movs	r1, #1
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 fccd 	bl	80092c0 <USBD_LL_PrepareReceive>
 8007926:	e007      	b.n	8007938 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800792e:	2340      	movs	r3, #64	; 0x40
 8007930:	2101      	movs	r1, #1
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fcc4 	bl	80092c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	e000      	b.n	800793e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800793c:	2302      	movs	r3, #2
  }
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	4613      	mov	r3, r2
 8007952:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800795a:	2302      	movs	r3, #2
 800795c:	e01a      	b.n	8007994 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	79fa      	ldrb	r2, [r7, #7]
 800798a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f001 fb31 	bl	8008ff4 <USBD_LL_Init>

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d006      	beq.n	80079be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
 80079bc:	e001      	b.n	80079c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079be:	2302      	movs	r3, #2
 80079c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr

080079ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fb66 	bl	80090a8 <USBD_LL_Start>

  return USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr

080079fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a06:	2302      	movs	r3, #2
 8007a08:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00c      	beq.n	8007a2e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	4798      	blx	r3

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fed8 	bl	8008826 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d016      	beq.n	8007ac8 <USBD_LL_SetupStage+0x6a>
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d81c      	bhi.n	8007ad8 <USBD_LL_SetupStage+0x7a>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <USBD_LL_SetupStage+0x4a>
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d008      	beq.n	8007ab8 <USBD_LL_SetupStage+0x5a>
 8007aa6:	e017      	b.n	8007ad8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f9cb 	bl	8007e4c <USBD_StdDevReq>
      break;
 8007ab6:	e01a      	b.n	8007aee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fa2d 	bl	8007f20 <USBD_StdItfReq>
      break;
 8007ac6:	e012      	b.n	8007aee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa6d 	bl	8007fb0 <USBD_StdEPReq>
      break;
 8007ad6:	e00a      	b.n	8007aee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fb3e 	bl	8009168 <USBD_LL_StallEP>
      break;
 8007aec:	bf00      	nop
  }

  return USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	460b      	mov	r3, r1
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b06:	7afb      	ldrb	r3, [r7, #11]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d14b      	bne.n	8007ba4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d134      	bne.n	8007b88 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d919      	bls.n	8007b5e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d203      	bcs.n	8007b4c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	e002      	b.n	8007b52 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 ff57 	bl	8008a0a <USBD_CtlContinueRx>
 8007b5c:	e038      	b.n	8007bd0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d105      	bne.n	8007b80 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 ff54 	bl	8008a2e <USBD_CtlSendStatus>
 8007b86:	e023      	b.n	8007bd0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d11e      	bne.n	8007bd0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f001 fae3 	bl	8009168 <USBD_LL_StallEP>
 8007ba2:	e015      	b.n	8007bd0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00d      	beq.n	8007bcc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d108      	bne.n	8007bcc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	7afa      	ldrb	r2, [r7, #11]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	4798      	blx	r3
 8007bca:	e001      	b.n	8007bd0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e000      	b.n	8007bd2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	460b      	mov	r3, r1
 8007be4:	607a      	str	r2, [r7, #4]
 8007be6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d17f      	bne.n	8007cee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3314      	adds	r3, #20
 8007bf2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d15c      	bne.n	8007cb8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d915      	bls.n	8007c36 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fec1 	bl	80089aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 fb46 	bl	80092c0 <USBD_LL_PrepareReceive>
 8007c34:	e04e      	b.n	8007cd4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	6912      	ldr	r2, [r2, #16]
 8007c3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c42:	fb01 f202 	mul.w	r2, r1, r2
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11c      	bne.n	8007c86 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d316      	bcc.n	8007c86 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d20f      	bcs.n	8007c86 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c66:	2200      	movs	r2, #0
 8007c68:	2100      	movs	r1, #0
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 fe9d 	bl	80089aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f001 fb1e 	bl	80092c0 <USBD_LL_PrepareReceive>
 8007c84:	e026      	b.n	8007cd4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d105      	bne.n	8007ca8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ca8:	2180      	movs	r1, #128	; 0x80
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f001 fa5c 	bl	8009168 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fecf 	bl	8008a54 <USBD_CtlReceiveStatus>
 8007cb6:	e00d      	b.n	8007cd4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d004      	beq.n	8007ccc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ccc:	2180      	movs	r1, #128	; 0x80
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f001 fa4a 	bl	8009168 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d11d      	bne.n	8007d1a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fe81 	bl	80079e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cec:	e015      	b.n	8007d1a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00d      	beq.n	8007d16 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d108      	bne.n	8007d16 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	7afa      	ldrb	r2, [r7, #11]
 8007d0e:	4611      	mov	r1, r2
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	4798      	blx	r3
 8007d14:	e001      	b.n	8007d1a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d16:	2302      	movs	r3, #2
 8007d18:	e000      	b.n	8007d1c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d2c:	2340      	movs	r3, #64	; 0x40
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f9d3 	bl	80090de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2240      	movs	r2, #64	; 0x40
 8007d44:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2180      	movs	r1, #128	; 0x80
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 f9c5 	bl	80090de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6852      	ldr	r2, [r2, #4]
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	4611      	mov	r1, r2
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
  }

  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	78fa      	ldrb	r2, [r7, #3]
 8007db6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2204      	movs	r2, #4
 8007ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bc80      	pop	{r7}
 8007dea:	4770      	bx	lr

08007dec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d105      	bne.n	8007e0a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr

08007e16 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d10b      	bne.n	8007e40 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d005      	beq.n	8007e72 <USBD_StdDevReq+0x26>
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d84f      	bhi.n	8007f0a <USBD_StdDevReq+0xbe>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <USBD_StdDevReq+0x36>
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d14b      	bne.n	8007f0a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
      break;
 8007e80:	e048      	b.n	8007f14 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d839      	bhi.n	8007efe <USBD_StdDevReq+0xb2>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_StdDevReq+0x44>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007ee1 	.word	0x08007ee1
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	08007eff 	.word	0x08007eff
 8007e9c:	08007eeb 	.word	0x08007eeb
 8007ea0:	08007eff 	.word	0x08007eff
 8007ea4:	08007ec3 	.word	0x08007ec3
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007eff 	.word	0x08007eff
 8007eb0:	08007ed7 	.word	0x08007ed7
 8007eb4:	08007ecd 	.word	0x08007ecd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9dc 	bl	8008278 <USBD_GetDescriptor>
          break;
 8007ec0:	e022      	b.n	8007f08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fb3f 	bl	8008548 <USBD_SetAddress>
          break;
 8007eca:	e01d      	b.n	8007f08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fb7e 	bl	80085d0 <USBD_SetConfig>
          break;
 8007ed4:	e018      	b.n	8007f08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc07 	bl	80086ec <USBD_GetConfig>
          break;
 8007ede:	e013      	b.n	8007f08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fc37 	bl	8008756 <USBD_GetStatus>
          break;
 8007ee8:	e00e      	b.n	8007f08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fc65 	bl	80087bc <USBD_SetFeature>
          break;
 8007ef2:	e009      	b.n	8007f08 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fc74 	bl	80087e4 <USBD_ClrFeature>
          break;
 8007efc:	e004      	b.n	8007f08 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fccc 	bl	800889e <USBD_CtlError>
          break;
 8007f06:	bf00      	nop
      }
      break;
 8007f08:	e004      	b.n	8007f14 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fcc6 	bl	800889e <USBD_CtlError>
      break;
 8007f12:	bf00      	nop
  }

  return ret;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d005      	beq.n	8007f46 <USBD_StdItfReq+0x26>
 8007f3a:	2b40      	cmp	r3, #64	; 0x40
 8007f3c:	d82e      	bhi.n	8007f9c <USBD_StdItfReq+0x7c>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <USBD_StdItfReq+0x26>
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d12a      	bne.n	8007f9c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d81d      	bhi.n	8007f8e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	889b      	ldrh	r3, [r3, #4]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d813      	bhi.n	8007f84 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d110      	bne.n	8007f98 <USBD_StdItfReq+0x78>
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10d      	bne.n	8007f98 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fd56 	bl	8008a2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f82:	e009      	b.n	8007f98 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fc89 	bl	800889e <USBD_CtlError>
          break;
 8007f8c:	e004      	b.n	8007f98 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fc84 	bl	800889e <USBD_CtlError>
          break;
 8007f96:	e000      	b.n	8007f9a <USBD_StdItfReq+0x7a>
          break;
 8007f98:	bf00      	nop
      }
      break;
 8007f9a:	e004      	b.n	8007fa6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fc7d 	bl	800889e <USBD_CtlError>
      break;
 8007fa4:	bf00      	nop
  }

  return USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	889b      	ldrh	r3, [r3, #4]
 8007fc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d007      	beq.n	8007fe0 <USBD_StdEPReq+0x30>
 8007fd0:	2b40      	cmp	r3, #64	; 0x40
 8007fd2:	f200 8146 	bhi.w	8008262 <USBD_StdEPReq+0x2b2>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <USBD_StdEPReq+0x40>
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	f040 8141 	bne.w	8008262 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
      break;
 8007fee:	e13d      	b.n	800826c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d10a      	bne.n	8008012 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	e12d      	b.n	800826e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	2b03      	cmp	r3, #3
 8008018:	d007      	beq.n	800802a <USBD_StdEPReq+0x7a>
 800801a:	2b03      	cmp	r3, #3
 800801c:	f300 811b 	bgt.w	8008256 <USBD_StdEPReq+0x2a6>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d072      	beq.n	800810a <USBD_StdEPReq+0x15a>
 8008024:	2b01      	cmp	r3, #1
 8008026:	d03a      	beq.n	800809e <USBD_StdEPReq+0xee>
 8008028:	e115      	b.n	8008256 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008030:	2b02      	cmp	r3, #2
 8008032:	d002      	beq.n	800803a <USBD_StdEPReq+0x8a>
 8008034:	2b03      	cmp	r3, #3
 8008036:	d015      	beq.n	8008064 <USBD_StdEPReq+0xb4>
 8008038:	e02b      	b.n	8008092 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00c      	beq.n	800805a <USBD_StdEPReq+0xaa>
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b80      	cmp	r3, #128	; 0x80
 8008044:	d009      	beq.n	800805a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f88c 	bl	8009168 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008050:	2180      	movs	r1, #128	; 0x80
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 f888 	bl	8009168 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008058:	e020      	b.n	800809c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc1e 	bl	800889e <USBD_CtlError>
              break;
 8008062:	e01b      	b.n	800809c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	885b      	ldrh	r3, [r3, #2]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10e      	bne.n	800808a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <USBD_StdEPReq+0xda>
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b80      	cmp	r3, #128	; 0x80
 8008076:	d008      	beq.n	800808a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	88db      	ldrh	r3, [r3, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f86f 	bl	8009168 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fccf 	bl	8008a2e <USBD_CtlSendStatus>

              break;
 8008090:	e004      	b.n	800809c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fc02 	bl	800889e <USBD_CtlError>
              break;
 800809a:	bf00      	nop
          }
          break;
 800809c:	e0e0      	b.n	8008260 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d002      	beq.n	80080ae <USBD_StdEPReq+0xfe>
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d015      	beq.n	80080d8 <USBD_StdEPReq+0x128>
 80080ac:	e026      	b.n	80080fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00c      	beq.n	80080ce <USBD_StdEPReq+0x11e>
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	2b80      	cmp	r3, #128	; 0x80
 80080b8:	d009      	beq.n	80080ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 f852 	bl	8009168 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080c4:	2180      	movs	r1, #128	; 0x80
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 f84e 	bl	8009168 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080cc:	e01c      	b.n	8008108 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fbe4 	bl	800889e <USBD_CtlError>
              break;
 80080d6:	e017      	b.n	8008108 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	885b      	ldrh	r3, [r3, #2]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d112      	bne.n	8008106 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 f859 	bl	80091a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fc9a 	bl	8008a2e <USBD_CtlSendStatus>
              }
              break;
 80080fa:	e004      	b.n	8008106 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fbcd 	bl	800889e <USBD_CtlError>
              break;
 8008104:	e000      	b.n	8008108 <USBD_StdEPReq+0x158>
              break;
 8008106:	bf00      	nop
          }
          break;
 8008108:	e0aa      	b.n	8008260 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008110:	2b02      	cmp	r3, #2
 8008112:	d002      	beq.n	800811a <USBD_StdEPReq+0x16a>
 8008114:	2b03      	cmp	r3, #3
 8008116:	d032      	beq.n	800817e <USBD_StdEPReq+0x1ce>
 8008118:	e097      	b.n	800824a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <USBD_StdEPReq+0x180>
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d004      	beq.n	8008130 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fbb8 	bl	800889e <USBD_CtlError>
                break;
 800812e:	e091      	b.n	8008254 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	da0b      	bge.n	8008150 <USBD_StdEPReq+0x1a0>
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	3310      	adds	r3, #16
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	4413      	add	r3, r2
 800814c:	3304      	adds	r3, #4
 800814e:	e00b      	b.n	8008168 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	3304      	adds	r3, #4
 8008168:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2202      	movs	r2, #2
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fbfb 	bl	8008972 <USBD_CtlSendData>
              break;
 800817c:	e06a      	b.n	8008254 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800817e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da11      	bge.n	80081aa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3318      	adds	r3, #24
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d117      	bne.n	80081d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fb7b 	bl	800889e <USBD_CtlError>
                  break;
 80081a8:	e054      	b.n	8008254 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	f003 020f 	and.w	r2, r3, #15
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d104      	bne.n	80081d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fb68 	bl	800889e <USBD_CtlError>
                  break;
 80081ce:	e041      	b.n	8008254 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	da0b      	bge.n	80081f0 <USBD_StdEPReq+0x240>
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	3310      	adds	r3, #16
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	4413      	add	r3, r2
 80081ec:	3304      	adds	r3, #4
 80081ee:	e00b      	b.n	8008208 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4413      	add	r3, r2
 8008206:	3304      	adds	r3, #4
 8008208:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <USBD_StdEPReq+0x266>
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d103      	bne.n	800821e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	e00e      	b.n	800823c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 ffde 	bl	80091e4 <USBD_LL_IsStallEP>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2201      	movs	r2, #1
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	e002      	b.n	800823c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2202      	movs	r2, #2
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fb95 	bl	8008972 <USBD_CtlSendData>
              break;
 8008248:	e004      	b.n	8008254 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fb26 	bl	800889e <USBD_CtlError>
              break;
 8008252:	bf00      	nop
          }
          break;
 8008254:	e004      	b.n	8008260 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fb20 	bl	800889e <USBD_CtlError>
          break;
 800825e:	bf00      	nop
      }
      break;
 8008260:	e004      	b.n	800826c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fb1a 	bl	800889e <USBD_CtlError>
      break;
 800826a:	bf00      	nop
  }

  return ret;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	2b06      	cmp	r3, #6
 800829a:	f200 8128 	bhi.w	80084ee <USBD_GetDescriptor+0x276>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBD_GetDescriptor+0x2c>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	080082d9 	.word	0x080082d9
 80082ac:	08008319 	.word	0x08008319
 80082b0:	080084ef 	.word	0x080084ef
 80082b4:	080084ef 	.word	0x080084ef
 80082b8:	0800848f 	.word	0x0800848f
 80082bc:	080084bb 	.word	0x080084bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
      break;
 80082d6:	e112      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7c1b      	ldrb	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10d      	bne.n	80082fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e8:	f107 0208 	add.w	r2, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082fa:	e100      	b.n	80084fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	f107 0208 	add.w	r2, r7, #8
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
 800830c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	2202      	movs	r2, #2
 8008314:	701a      	strb	r2, [r3, #0]
      break;
 8008316:	e0f2      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b05      	cmp	r3, #5
 8008320:	f200 80ac 	bhi.w	800847c <USBD_GetDescriptor+0x204>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_GetDescriptor+0xb4>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008345 	.word	0x08008345
 8008330:	08008379 	.word	0x08008379
 8008334:	080083ad 	.word	0x080083ad
 8008338:	080083e1 	.word	0x080083e1
 800833c:	08008415 	.word	0x08008415
 8008340:	08008449 	.word	0x08008449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 0108 	add.w	r1, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008366:	e091      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa97 	bl	800889e <USBD_CtlError>
            err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
          break;
 8008376:	e089      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839a:	e077      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa7d 	bl	800889e <USBD_CtlError>
            err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
          break;
 80083aa:	e06f      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	7c12      	ldrb	r2, [r2, #16]
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ce:	e05d      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa63 	bl	800889e <USBD_CtlError>
            err++;
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	3301      	adds	r3, #1
 80083dc:	72fb      	strb	r3, [r7, #11]
          break;
 80083de:	e055      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 0108 	add.w	r1, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008402:	e043      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa49 	bl	800889e <USBD_CtlError>
            err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
          break;
 8008412:	e03b      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7c12      	ldrb	r2, [r2, #16]
 800842c:	f107 0108 	add.w	r1, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008436:	e029      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa2f 	bl	800889e <USBD_CtlError>
            err++;
 8008440:	7afb      	ldrb	r3, [r7, #11]
 8008442:	3301      	adds	r3, #1
 8008444:	72fb      	strb	r3, [r7, #11]
          break;
 8008446:	e021      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7c12      	ldrb	r2, [r2, #16]
 8008460:	f107 0108 	add.w	r1, r7, #8
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
 8008468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846a:	e00f      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa15 	bl	800889e <USBD_CtlError>
            err++;
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	3301      	adds	r3, #1
 8008478:	72fb      	strb	r3, [r7, #11]
          break;
 800847a:	e007      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa0d 	bl	800889e <USBD_CtlError>
          err++;
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	3301      	adds	r3, #1
 8008488:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800848a:	e038      	b.n	80084fe <USBD_GetDescriptor+0x286>
 800848c:	e037      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7c1b      	ldrb	r3, [r3, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d109      	bne.n	80084aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	f107 0208 	add.w	r2, r7, #8
 80084a2:	4610      	mov	r0, r2
 80084a4:	4798      	blx	r3
 80084a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a8:	e029      	b.n	80084fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f9f6 	bl	800889e <USBD_CtlError>
        err++;
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	3301      	adds	r3, #1
 80084b6:	72fb      	strb	r3, [r7, #11]
      break;
 80084b8:	e021      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7c1b      	ldrb	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10d      	bne.n	80084de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	f107 0208 	add.w	r2, r7, #8
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	2207      	movs	r2, #7
 80084da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084dc:	e00f      	b.n	80084fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9dc 	bl	800889e <USBD_CtlError>
        err++;
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	3301      	adds	r3, #1
 80084ea:	72fb      	strb	r3, [r7, #11]
      break;
 80084ec:	e007      	b.n	80084fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9d4 	bl	800889e <USBD_CtlError>
      err++;
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	3301      	adds	r3, #1
 80084fa:	72fb      	strb	r3, [r7, #11]
      break;
 80084fc:	bf00      	nop
  }

  if (err != 0U)
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11c      	bne.n	800853e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008504:	893b      	ldrh	r3, [r7, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d011      	beq.n	800852e <USBD_GetDescriptor+0x2b6>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	88db      	ldrh	r3, [r3, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00d      	beq.n	800852e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	88da      	ldrh	r2, [r3, #6]
 8008516:	893b      	ldrh	r3, [r7, #8]
 8008518:	4293      	cmp	r3, r2
 800851a:	bf28      	it	cs
 800851c:	4613      	movcs	r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008522:	893b      	ldrh	r3, [r7, #8]
 8008524:	461a      	mov	r2, r3
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fa22 	bl	8008972 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	88db      	ldrh	r3, [r3, #6]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa79 	bl	8008a2e <USBD_CtlSendStatus>
 800853c:	e000      	b.n	8008540 <USBD_GetDescriptor+0x2c8>
    return;
 800853e:	bf00      	nop
    }
  }
}
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop

08008548 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d130      	bne.n	80085bc <USBD_SetAddress+0x74>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	88db      	ldrh	r3, [r3, #6]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d12c      	bne.n	80085bc <USBD_SetAddress+0x74>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	885b      	ldrh	r3, [r3, #2]
 8008566:	2b7f      	cmp	r3, #127	; 0x7f
 8008568:	d828      	bhi.n	80085bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	2b03      	cmp	r3, #3
 800857e:	d104      	bne.n	800858a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f98b 	bl	800889e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008588:	e01d      	b.n	80085c6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7bfa      	ldrb	r2, [r7, #15]
 800858e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fe50 	bl	800923c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa46 	bl	8008a2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b0:	e009      	b.n	80085c6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ba:	e004      	b.n	80085c6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f96d 	bl	800889e <USBD_CtlError>
  }
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	885b      	ldrh	r3, [r3, #2]
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	4b41      	ldr	r3, [pc, #260]	; (80086e8 <USBD_SetConfig+0x118>)
 80085e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085e4:	4b40      	ldr	r3, [pc, #256]	; (80086e8 <USBD_SetConfig+0x118>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d904      	bls.n	80085f6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f955 	bl	800889e <USBD_CtlError>
 80085f4:	e075      	b.n	80086e2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d002      	beq.n	8008606 <USBD_SetConfig+0x36>
 8008600:	2b03      	cmp	r3, #3
 8008602:	d023      	beq.n	800864c <USBD_SetConfig+0x7c>
 8008604:	e062      	b.n	80086cc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008606:	4b38      	ldr	r3, [pc, #224]	; (80086e8 <USBD_SetConfig+0x118>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01a      	beq.n	8008644 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800860e:	4b36      	ldr	r3, [pc, #216]	; (80086e8 <USBD_SetConfig+0x118>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2203      	movs	r2, #3
 800861c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008620:	4b31      	ldr	r3, [pc, #196]	; (80086e8 <USBD_SetConfig+0x118>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff f9e7 	bl	80079fa <USBD_SetClassConfig>
 800862c:	4603      	mov	r3, r0
 800862e:	2b02      	cmp	r3, #2
 8008630:	d104      	bne.n	800863c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f932 	bl	800889e <USBD_CtlError>
            return;
 800863a:	e052      	b.n	80086e2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f9f6 	bl	8008a2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008642:	e04e      	b.n	80086e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9f2 	bl	8008a2e <USBD_CtlSendStatus>
        break;
 800864a:	e04a      	b.n	80086e2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800864c:	4b26      	ldr	r3, [pc, #152]	; (80086e8 <USBD_SetConfig+0x118>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d112      	bne.n	800867a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800865c:	4b22      	ldr	r3, [pc, #136]	; (80086e8 <USBD_SetConfig+0x118>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008666:	4b20      	ldr	r3, [pc, #128]	; (80086e8 <USBD_SetConfig+0x118>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff f9e3 	bl	8007a38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f9db 	bl	8008a2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008678:	e033      	b.n	80086e2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800867a:	4b1b      	ldr	r3, [pc, #108]	; (80086e8 <USBD_SetConfig+0x118>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d01d      	beq.n	80086c4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff f9d1 	bl	8007a38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <USBD_SetConfig+0x118>)
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <USBD_SetConfig+0x118>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff f9a7 	bl	80079fa <USBD_SetClassConfig>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d104      	bne.n	80086bc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f8f2 	bl	800889e <USBD_CtlError>
            return;
 80086ba:	e012      	b.n	80086e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f9b6 	bl	8008a2e <USBD_CtlSendStatus>
        break;
 80086c2:	e00e      	b.n	80086e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f9b2 	bl	8008a2e <USBD_CtlSendStatus>
        break;
 80086ca:	e00a      	b.n	80086e2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f8e5 	bl	800889e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80086d4:	4b04      	ldr	r3, [pc, #16]	; (80086e8 <USBD_SetConfig+0x118>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff f9ac 	bl	8007a38 <USBD_ClrClassConfig>
        break;
 80086e0:	bf00      	nop
    }
  }
}
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20000224 	.word	0x20000224

080086ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	88db      	ldrh	r3, [r3, #6]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d004      	beq.n	8008708 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f8cc 	bl	800889e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008706:	e022      	b.n	800874e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870e:	2b02      	cmp	r3, #2
 8008710:	dc02      	bgt.n	8008718 <USBD_GetConfig+0x2c>
 8008712:	2b00      	cmp	r3, #0
 8008714:	dc03      	bgt.n	800871e <USBD_GetConfig+0x32>
 8008716:	e015      	b.n	8008744 <USBD_GetConfig+0x58>
 8008718:	2b03      	cmp	r3, #3
 800871a:	d00b      	beq.n	8008734 <USBD_GetConfig+0x48>
 800871c:	e012      	b.n	8008744 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3308      	adds	r3, #8
 8008728:	2201      	movs	r2, #1
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f920 	bl	8008972 <USBD_CtlSendData>
        break;
 8008732:	e00c      	b.n	800874e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	2201      	movs	r2, #1
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f918 	bl	8008972 <USBD_CtlSendData>
        break;
 8008742:	e004      	b.n	800874e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8a9 	bl	800889e <USBD_CtlError>
        break;
 800874c:	bf00      	nop
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008766:	3b01      	subs	r3, #1
 8008768:	2b02      	cmp	r3, #2
 800876a:	d81e      	bhi.n	80087aa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	88db      	ldrh	r3, [r3, #6]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d004      	beq.n	800877e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f891 	bl	800889e <USBD_CtlError>
        break;
 800877c:	e01a      	b.n	80087b4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f043 0202 	orr.w	r2, r3, #2
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	330c      	adds	r3, #12
 800879e:	2202      	movs	r2, #2
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f8e5 	bl	8008972 <USBD_CtlSendData>
      break;
 80087a8:	e004      	b.n	80087b4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f876 	bl	800889e <USBD_CtlError>
      break;
 80087b2:	bf00      	nop
  }
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	885b      	ldrh	r3, [r3, #2]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d106      	bne.n	80087dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f929 	bl	8008a2e <USBD_CtlSendStatus>
  }
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	3b01      	subs	r3, #1
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d80b      	bhi.n	8008812 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d10c      	bne.n	800881c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f90f 	bl	8008a2e <USBD_CtlSendStatus>
      }
      break;
 8008810:	e004      	b.n	800881c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f842 	bl	800889e <USBD_CtlError>
      break;
 800881a:	e000      	b.n	800881e <USBD_ClrFeature+0x3a>
      break;
 800881c:	bf00      	nop
  }
}
 800881e:	bf00      	nop
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	785a      	ldrb	r2, [r3, #1]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	3302      	adds	r3, #2
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b29a      	uxth	r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	3303      	adds	r3, #3
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	b29b      	uxth	r3, r3
 8008854:	4413      	add	r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	3304      	adds	r3, #4
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	b29a      	uxth	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	3305      	adds	r3, #5
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	b29b      	uxth	r3, r3
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	b29b      	uxth	r3, r3
 8008870:	4413      	add	r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	3306      	adds	r3, #6
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b29a      	uxth	r2, r3
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	3307      	adds	r3, #7
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b29b      	uxth	r3, r3
 800888c:	4413      	add	r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	80da      	strh	r2, [r3, #6]

}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr

0800889e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088a8:	2180      	movs	r1, #128	; 0x80
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fc5c 	bl	8009168 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fc58 	bl	8009168 <USBD_LL_StallEP>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d032      	beq.n	800893c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f834 	bl	8008944 <USBD_GetLen>
 80088dc:	4603      	mov	r3, r0
 80088de:	3301      	adds	r3, #1
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	75fa      	strb	r2, [r7, #23]
 80088f0:	461a      	mov	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	4413      	add	r3, r2
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	7812      	ldrb	r2, [r2, #0]
 80088fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	75fa      	strb	r2, [r7, #23]
 8008902:	461a      	mov	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4413      	add	r3, r2
 8008908:	2203      	movs	r2, #3
 800890a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800890c:	e012      	b.n	8008934 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	60fa      	str	r2, [r7, #12]
 8008914:	7dfa      	ldrb	r2, [r7, #23]
 8008916:	1c51      	adds	r1, r2, #1
 8008918:	75f9      	strb	r1, [r7, #23]
 800891a:	4611      	mov	r1, r2
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	440a      	add	r2, r1
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	75fa      	strb	r2, [r7, #23]
 800892a:	461a      	mov	r2, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4413      	add	r3, r2
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e8      	bne.n	800890e <USBD_GetString+0x4e>
    }
  }
}
 800893c:	bf00      	nop
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008950:	e005      	b.n	800895e <USBD_GetLen+0x1a>
  {
    len++;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	3301      	adds	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3301      	adds	r3, #1
 800895c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f5      	bne.n	8008952 <USBD_GetLen+0xe>
  }

  return len;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr

08008972 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	4613      	mov	r3, r2
 800897e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2202      	movs	r2, #2
 8008984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008988:	88fa      	ldrh	r2, [r7, #6]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	2100      	movs	r1, #0
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 fc6d 	bl	800927a <USBD_LL_Transmit>

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	4613      	mov	r3, r2
 80089b6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	2100      	movs	r1, #0
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fc5b 	bl	800927a <USBD_LL_Transmit>

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	4613      	mov	r3, r2
 80089da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2203      	movs	r2, #3
 80089e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089e4:	88fa      	ldrh	r2, [r7, #6]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80089ec:	88fa      	ldrh	r2, [r7, #6]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	2100      	movs	r1, #0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fc60 	bl	80092c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	4613      	mov	r3, r2
 8008a16:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a18:	88fb      	ldrh	r3, [r7, #6]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fc4e 	bl	80092c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2204      	movs	r2, #4
 8008a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2200      	movs	r2, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fc18 	bl	800927a <USBD_LL_Transmit>

  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2205      	movs	r2, #5
 8008a60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a64:	2300      	movs	r3, #0
 8008a66:	2200      	movs	r2, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fc28 	bl	80092c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a80:	2200      	movs	r2, #0
 8008a82:	4912      	ldr	r1, [pc, #72]	; (8008acc <MX_USB_DEVICE_Init+0x50>)
 8008a84:	4812      	ldr	r0, [pc, #72]	; (8008ad0 <MX_USB_DEVICE_Init+0x54>)
 8008a86:	f7fe ff5e 	bl	8007946 <USBD_Init>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a90:	f7f8 fa7c 	bl	8000f8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a94:	490f      	ldr	r1, [pc, #60]	; (8008ad4 <MX_USB_DEVICE_Init+0x58>)
 8008a96:	480e      	ldr	r0, [pc, #56]	; (8008ad0 <MX_USB_DEVICE_Init+0x54>)
 8008a98:	f7fe ff80 	bl	800799c <USBD_RegisterClass>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008aa2:	f7f8 fa73 	bl	8000f8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008aa6:	490c      	ldr	r1, [pc, #48]	; (8008ad8 <MX_USB_DEVICE_Init+0x5c>)
 8008aa8:	4809      	ldr	r0, [pc, #36]	; (8008ad0 <MX_USB_DEVICE_Init+0x54>)
 8008aaa:	f7fe feb1 	bl	8007810 <USBD_CDC_RegisterInterface>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ab4:	f7f8 fa6a 	bl	8000f8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ab8:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <MX_USB_DEVICE_Init+0x54>)
 8008aba:	f7fe ff88 	bl	80079ce <USBD_Start>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ac4:	f7f8 fa62 	bl	8000f8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	2000012c 	.word	0x2000012c
 8008ad0:	20000228 	.word	0x20000228
 8008ad4:	20000018 	.word	0x20000018
 8008ad8:	2000011c 	.word	0x2000011c

08008adc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4905      	ldr	r1, [pc, #20]	; (8008af8 <CDC_Init_FS+0x1c>)
 8008ae4:	4805      	ldr	r0, [pc, #20]	; (8008afc <CDC_Init_FS+0x20>)
 8008ae6:	f7fe fea9 	bl	800783c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008aea:	4905      	ldr	r1, [pc, #20]	; (8008b00 <CDC_Init_FS+0x24>)
 8008aec:	4803      	ldr	r0, [pc, #12]	; (8008afc <CDC_Init_FS+0x20>)
 8008aee:	f7fe febe 	bl	800786e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	200008ec 	.word	0x200008ec
 8008afc:	20000228 	.word	0x20000228
 8008b00:	200004ec 	.word	0x200004ec

08008b04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
	...

08008b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b23      	cmp	r3, #35	; 0x23
 8008b28:	d84a      	bhi.n	8008bc0 <CDC_Control_FS+0xac>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <CDC_Control_FS+0x1c>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008bc1 	.word	0x08008bc1
 8008b34:	08008bc1 	.word	0x08008bc1
 8008b38:	08008bc1 	.word	0x08008bc1
 8008b3c:	08008bc1 	.word	0x08008bc1
 8008b40:	08008bc1 	.word	0x08008bc1
 8008b44:	08008bc1 	.word	0x08008bc1
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008bc1 	.word	0x08008bc1
 8008b50:	08008bc1 	.word	0x08008bc1
 8008b54:	08008bc1 	.word	0x08008bc1
 8008b58:	08008bc1 	.word	0x08008bc1
 8008b5c:	08008bc1 	.word	0x08008bc1
 8008b60:	08008bc1 	.word	0x08008bc1
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008bc1 	.word	0x08008bc1
 8008b6c:	08008bc1 	.word	0x08008bc1
 8008b70:	08008bc1 	.word	0x08008bc1
 8008b74:	08008bc1 	.word	0x08008bc1
 8008b78:	08008bc1 	.word	0x08008bc1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bc1 	.word	0x08008bc1
 8008b84:	08008bc1 	.word	0x08008bc1
 8008b88:	08008bc1 	.word	0x08008bc1
 8008b8c:	08008bc1 	.word	0x08008bc1
 8008b90:	08008bc1 	.word	0x08008bc1
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	08008bc1 	.word	0x08008bc1
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc1 	.word	0x08008bc1
 8008ba4:	08008bc1 	.word	0x08008bc1
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bc1 	.word	0x08008bc1
 8008bb4:	08008bc1 	.word	0x08008bc1
 8008bb8:	08008bc1 	.word	0x08008bc1
 8008bbc:	08008bc1 	.word	0x08008bc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bc0:	bf00      	nop
  }

  return (USBD_OK);
 8008bc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bc80      	pop	{r7}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop

08008bd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <CDC_Receive_FS+0x24>)
 8008bde:	f7fe fe46 	bl	800786e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008be2:	4804      	ldr	r0, [pc, #16]	; (8008bf4 <CDC_Receive_FS+0x24>)
 8008be4:	f7fe fe85 	bl	80078f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008be8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000228 	.word	0x20000228

08008bf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e00b      	b.n	8008c36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	4806      	ldr	r0, [pc, #24]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c26:	f7fe fe09 	bl	800783c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c2a:	4805      	ldr	r0, [pc, #20]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c2c:	f7fe fe32 	bl	8007894 <USBD_CDC_TransmitPacket>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000228 	.word	0x20000228

08008c44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2212      	movs	r2, #18
 8008c54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c56:	4b03      	ldr	r3, [pc, #12]	; (8008c64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000148 	.word	0x20000148

08008c68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2204      	movs	r2, #4
 8008c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c7a:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	2000015c 	.word	0x2000015c

08008c8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4907      	ldr	r1, [pc, #28]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ca4:	f7ff fe0c 	bl	80088c0 <USBD_GetString>
 8008ca8:	e004      	b.n	8008cb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb0:	f7ff fe06 	bl	80088c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000cec 	.word	0x20000cec
 8008cc4:	08009434 	.word	0x08009434

08008cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	4904      	ldr	r1, [pc, #16]	; (8008ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cd8:	4804      	ldr	r0, [pc, #16]	; (8008cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cda:	f7ff fdf1 	bl	80088c0 <USBD_GetString>
  return USBD_StrDesc;
 8008cde:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20000cec 	.word	0x20000cec
 8008cec:	0800944c 	.word	0x0800944c

08008cf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	6039      	str	r1, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	221a      	movs	r2, #26
 8008d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d02:	f000 f843 	bl	8008d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d06:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000160 	.word	0x20000160

08008d14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	4907      	ldr	r1, [pc, #28]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d2a:	4808      	ldr	r0, [pc, #32]	; (8008d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d2c:	f7ff fdc8 	bl	80088c0 <USBD_GetString>
 8008d30:	e004      	b.n	8008d3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4904      	ldr	r1, [pc, #16]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d36:	4805      	ldr	r0, [pc, #20]	; (8008d4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d38:	f7ff fdc2 	bl	80088c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000cec 	.word	0x20000cec
 8008d4c:	08009460 	.word	0x08009460

08008d50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d105      	bne.n	8008d6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	4907      	ldr	r1, [pc, #28]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d66:	4808      	ldr	r0, [pc, #32]	; (8008d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d68:	f7ff fdaa 	bl	80088c0 <USBD_GetString>
 8008d6c:	e004      	b.n	8008d78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	4904      	ldr	r1, [pc, #16]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d72:	4805      	ldr	r0, [pc, #20]	; (8008d88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d74:	f7ff fda4 	bl	80088c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d78:	4b02      	ldr	r3, [pc, #8]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000cec 	.word	0x20000cec
 8008d88:	0800946c 	.word	0x0800946c

08008d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d92:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <Get_SerialNum+0x44>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d98:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <Get_SerialNum+0x48>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <Get_SerialNum+0x4c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d009      	beq.n	8008dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008db2:	2208      	movs	r2, #8
 8008db4:	4909      	ldr	r1, [pc, #36]	; (8008ddc <Get_SerialNum+0x50>)
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f814 	bl	8008de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	4908      	ldr	r1, [pc, #32]	; (8008de0 <Get_SerialNum+0x54>)
 8008dc0:	68b8      	ldr	r0, [r7, #8]
 8008dc2:	f000 f80f 	bl	8008de4 <IntToUnicode>
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	1ffff7e8 	.word	0x1ffff7e8
 8008dd4:	1ffff7ec 	.word	0x1ffff7ec
 8008dd8:	1ffff7f0 	.word	0x1ffff7f0
 8008ddc:	20000162 	.word	0x20000162
 8008de0:	20000172 	.word	0x20000172

08008de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]
 8008dfa:	e027      	b.n	8008e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	0f1b      	lsrs	r3, r3, #28
 8008e00:	2b09      	cmp	r3, #9
 8008e02:	d80b      	bhi.n	8008e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	440b      	add	r3, r1
 8008e14:	3230      	adds	r2, #48	; 0x30
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	e00a      	b.n	8008e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	0f1b      	lsrs	r3, r3, #28
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	4619      	mov	r1, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3237      	adds	r2, #55	; 0x37
 8008e2e:	b2d2      	uxtb	r2, r2
 8008e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	4413      	add	r3, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	75fb      	strb	r3, [r7, #23]
 8008e4c:	7dfa      	ldrb	r2, [r7, #23]
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d3d3      	bcc.n	8008dfc <IntToUnicode+0x18>
  }
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr

08008e60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a11      	ldr	r2, [pc, #68]	; (8008eb4 <HAL_PCD_MspInit+0x54>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d11b      	bne.n	8008eaa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e72:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <HAL_PCD_MspInit+0x58>)
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	4a10      	ldr	r2, [pc, #64]	; (8008eb8 <HAL_PCD_MspInit+0x58>)
 8008e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e7c:	61d3      	str	r3, [r2, #28]
 8008e7e:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <HAL_PCD_MspInit+0x58>)
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	2013      	movs	r0, #19
 8008e90:	f7f8 fa69 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008e94:	2013      	movs	r0, #19
 8008e96:	f7f8 fa82 	bl	800139e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	2014      	movs	r0, #20
 8008ea0:	f7f8 fa61 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ea4:	2014      	movs	r0, #20
 8008ea6:	f7f8 fa7a 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	40005c00 	.word	0x40005c00
 8008eb8:	40021000 	.word	0x40021000

08008ebc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	f7fe fdc3 	bl	8007a5e <USBD_LL_SetupStage>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008ef2:	78fa      	ldrb	r2, [r7, #3]
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	440b      	add	r3, r1
 8008f00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f7fe fdf5 	bl	8007af8 <USBD_LL_DataOutStage>
}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008f28:	78fa      	ldrb	r2, [r7, #3]
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	440b      	add	r3, r1
 8008f36:	333c      	adds	r3, #60	; 0x3c
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f7fe fe4c 	bl	8007bda <USBD_LL_DataInStage>
}
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe ff5c 	bl	8007e16 <USBD_LL_SOF>
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d001      	beq.n	8008f7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f7a:	f7f8 f807 	bl	8000f8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008f84:	7bfa      	ldrb	r2, [r7, #15]
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe ff0c 	bl	8007da6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe fec5 	bl	8007d24 <USBD_LL_Reset>
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe ff06 	bl	8007dc4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d005      	beq.n	8008fcc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fc0:	4b04      	ldr	r3, [pc, #16]	; (8008fd4 <HAL_PCD_SuspendCallback+0x30>)
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	4a03      	ldr	r2, [pc, #12]	; (8008fd4 <HAL_PCD_SuspendCallback+0x30>)
 8008fc6:	f043 0306 	orr.w	r3, r3, #6
 8008fca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	e000ed00 	.word	0xe000ed00

08008fd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe ff00 	bl	8007dec <USBD_LL_Resume>
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ffc:	4a28      	ldr	r2, [pc, #160]	; (80090a0 <USBD_LL_Init+0xac>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a26      	ldr	r2, [pc, #152]	; (80090a0 <USBD_LL_Init+0xac>)
 8009008:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800900c:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <USBD_LL_Init+0xac>)
 800900e:	4a25      	ldr	r2, [pc, #148]	; (80090a4 <USBD_LL_Init+0xb0>)
 8009010:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009012:	4b23      	ldr	r3, [pc, #140]	; (80090a0 <USBD_LL_Init+0xac>)
 8009014:	2208      	movs	r2, #8
 8009016:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009018:	4b21      	ldr	r3, [pc, #132]	; (80090a0 <USBD_LL_Init+0xac>)
 800901a:	2202      	movs	r2, #2
 800901c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800901e:	4b20      	ldr	r3, [pc, #128]	; (80090a0 <USBD_LL_Init+0xac>)
 8009020:	2200      	movs	r2, #0
 8009022:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009024:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <USBD_LL_Init+0xac>)
 8009026:	2200      	movs	r2, #0
 8009028:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <USBD_LL_Init+0xac>)
 800902c:	2200      	movs	r2, #0
 800902e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009030:	481b      	ldr	r0, [pc, #108]	; (80090a0 <USBD_LL_Init+0xac>)
 8009032:	f7f9 fbf6 	bl	8002822 <HAL_PCD_Init>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800903c:	f7f7 ffa6 	bl	8000f8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009046:	2318      	movs	r3, #24
 8009048:	2200      	movs	r2, #0
 800904a:	2100      	movs	r1, #0
 800904c:	f7fb f915 	bl	800427a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009056:	2358      	movs	r3, #88	; 0x58
 8009058:	2200      	movs	r2, #0
 800905a:	2180      	movs	r1, #128	; 0x80
 800905c:	f7fb f90d 	bl	800427a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009066:	23c0      	movs	r3, #192	; 0xc0
 8009068:	2200      	movs	r2, #0
 800906a:	2181      	movs	r1, #129	; 0x81
 800906c:	f7fb f905 	bl	800427a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009076:	f44f 7388 	mov.w	r3, #272	; 0x110
 800907a:	2200      	movs	r2, #0
 800907c:	2101      	movs	r1, #1
 800907e:	f7fb f8fc 	bl	800427a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800908c:	2200      	movs	r2, #0
 800908e:	2182      	movs	r1, #130	; 0x82
 8009090:	f7fb f8f3 	bl	800427a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20000eec 	.word	0x20000eec
 80090a4:	40005c00 	.word	0x40005c00

080090a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f9 fcae 	bl	8002a20 <HAL_PCD_Start>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f94e 	bl	800936c <USBD_Get_USB_Status>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	4608      	mov	r0, r1
 80090e8:	4611      	mov	r1, r2
 80090ea:	461a      	mov	r2, r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	70fb      	strb	r3, [r7, #3]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70bb      	strb	r3, [r7, #2]
 80090f4:	4613      	mov	r3, r2
 80090f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009106:	78bb      	ldrb	r3, [r7, #2]
 8009108:	883a      	ldrh	r2, [r7, #0]
 800910a:	78f9      	ldrb	r1, [r7, #3]
 800910c:	f7f9 fe03 	bl	8002d16 <HAL_PCD_EP_Open>
 8009110:	4603      	mov	r3, r0
 8009112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f928 	bl	800936c <USBD_Get_USB_Status>
 800911c:	4603      	mov	r3, r0
 800911e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009120:	7bbb      	ldrb	r3, [r7, #14]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	460b      	mov	r3, r1
 8009134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009144:	78fa      	ldrb	r2, [r7, #3]
 8009146:	4611      	mov	r1, r2
 8009148:	4618      	mov	r0, r3
 800914a:	f7f9 fe41 	bl	8002dd0 <HAL_PCD_EP_Close>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f909 	bl	800936c <USBD_Get_USB_Status>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009182:	78fa      	ldrb	r2, [r7, #3]
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f7f9 fee9 	bl	8002f5e <HAL_PCD_EP_SetStall>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f8ea 	bl	800936c <USBD_Get_USB_Status>
 8009198:	4603      	mov	r3, r0
 800919a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919c:	7bbb      	ldrb	r3, [r7, #14]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	4611      	mov	r1, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f9 ff2a 	bl	800301e <HAL_PCD_EP_ClrStall>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f8cb 	bl	800936c <USBD_Get_USB_Status>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091da:	7bbb      	ldrb	r3, [r7, #14]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80091f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	da0c      	bge.n	800921a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	440b      	add	r3, r1
 8009214:	3302      	adds	r3, #2
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	e00b      	b.n	8009232 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009220:	68f9      	ldr	r1, [r7, #12]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	440b      	add	r3, r1
 800922c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009230:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr

0800923c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7f9 fd36 	bl	8002ccc <HAL_PCD_SetAddress>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f880 	bl	800936c <USBD_Get_USB_Status>
 800926c:	4603      	mov	r3, r0
 800926e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009270:	7bbb      	ldrb	r3, [r7, #14]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	461a      	mov	r2, r3
 8009286:	460b      	mov	r3, r1
 8009288:	72fb      	strb	r3, [r7, #11]
 800928a:	4613      	mov	r3, r2
 800928c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800929c:	893b      	ldrh	r3, [r7, #8]
 800929e:	7af9      	ldrb	r1, [r7, #11]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	f7f9 fe25 	bl	8002ef0 <HAL_PCD_EP_Transmit>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f85d 	bl	800936c <USBD_Get_USB_Status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	461a      	mov	r2, r3
 80092cc:	460b      	mov	r3, r1
 80092ce:	72fb      	strb	r3, [r7, #11]
 80092d0:	4613      	mov	r3, r2
 80092d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092e2:	893b      	ldrh	r3, [r7, #8]
 80092e4:	7af9      	ldrb	r1, [r7, #11]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	f7f9 fdba 	bl	8002e60 <HAL_PCD_EP_Receive>
 80092ec:	4603      	mov	r3, r0
 80092ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 f83a 	bl	800936c <USBD_Get_USB_Status>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b082      	sub	sp, #8
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009318:	78fa      	ldrb	r2, [r7, #3]
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f7f9 fdd0 	bl	8002ec2 <HAL_PCD_EP_GetRxCount>
 8009322:	4603      	mov	r3, r0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <USBD_static_malloc+0x14>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	200011dc 	.word	0x200011dc

08009344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]

}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	bc80      	pop	{r7}
 8009354:	4770      	bx	lr

08009356 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr

0800936c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b03      	cmp	r3, #3
 800937e:	d817      	bhi.n	80093b0 <USBD_Get_USB_Status+0x44>
 8009380:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <USBD_Get_USB_Status+0x1c>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	08009399 	.word	0x08009399
 800938c:	0800939f 	.word	0x0800939f
 8009390:	080093a5 	.word	0x080093a5
 8009394:	080093ab 	.word	0x080093ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
    break;
 800939c:	e00b      	b.n	80093b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800939e:	2302      	movs	r3, #2
 80093a0:	73fb      	strb	r3, [r7, #15]
    break;
 80093a2:	e008      	b.n	80093b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]
    break;
 80093a8:	e005      	b.n	80093b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093aa:	2302      	movs	r3, #2
 80093ac:	73fb      	strb	r3, [r7, #15]
    break;
 80093ae:	e002      	b.n	80093b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093b0:	2302      	movs	r3, #2
 80093b2:	73fb      	strb	r3, [r7, #15]
    break;
 80093b4:	bf00      	nop
  }
  return usb_status;
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop

080093c4 <memset>:
 80093c4:	4603      	mov	r3, r0
 80093c6:	4402      	add	r2, r0
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d100      	bne.n	80093ce <memset+0xa>
 80093cc:	4770      	bx	lr
 80093ce:	f803 1b01 	strb.w	r1, [r3], #1
 80093d2:	e7f9      	b.n	80093c8 <memset+0x4>

080093d4 <__libc_init_array>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	2600      	movs	r6, #0
 80093d8:	4d0c      	ldr	r5, [pc, #48]	; (800940c <__libc_init_array+0x38>)
 80093da:	4c0d      	ldr	r4, [pc, #52]	; (8009410 <__libc_init_array+0x3c>)
 80093dc:	1b64      	subs	r4, r4, r5
 80093de:	10a4      	asrs	r4, r4, #2
 80093e0:	42a6      	cmp	r6, r4
 80093e2:	d109      	bne.n	80093f8 <__libc_init_array+0x24>
 80093e4:	f000 f81a 	bl	800941c <_init>
 80093e8:	2600      	movs	r6, #0
 80093ea:	4d0a      	ldr	r5, [pc, #40]	; (8009414 <__libc_init_array+0x40>)
 80093ec:	4c0a      	ldr	r4, [pc, #40]	; (8009418 <__libc_init_array+0x44>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	42a6      	cmp	r6, r4
 80093f4:	d105      	bne.n	8009402 <__libc_init_array+0x2e>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fc:	4798      	blx	r3
 80093fe:	3601      	adds	r6, #1
 8009400:	e7ee      	b.n	80093e0 <__libc_init_array+0xc>
 8009402:	f855 3b04 	ldr.w	r3, [r5], #4
 8009406:	4798      	blx	r3
 8009408:	3601      	adds	r6, #1
 800940a:	e7f2      	b.n	80093f2 <__libc_init_array+0x1e>
 800940c:	080094a8 	.word	0x080094a8
 8009410:	080094a8 	.word	0x080094a8
 8009414:	080094a8 	.word	0x080094a8
 8009418:	080094ac 	.word	0x080094ac

0800941c <_init>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	bf00      	nop
 8009420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009422:	bc08      	pop	{r3}
 8009424:	469e      	mov	lr, r3
 8009426:	4770      	bx	lr

08009428 <_fini>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr
