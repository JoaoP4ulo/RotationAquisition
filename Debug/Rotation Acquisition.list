
Rotation Acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009430  08009430  00019430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a4  080094a4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080094a4  080094a4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094a4  080094a4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080094ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  2000017c  08009628  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013fc  08009628  000213fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f52f  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300e  00000000  00000000  0002f717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3b  00000000  00000000  000334d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a2c  00000000  00000000  00033f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014da8  00000000  00000000  0004d937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008737c  00000000  00000000  000626df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003744  00000000  00000000  000e9a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ed1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009418 	.word	0x08009418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08009418 	.word	0x08009418

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <MX_GPIO_Init+0x130>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a45      	ldr	r2, [pc, #276]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b4:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a3f      	ldr	r2, [pc, #252]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a39      	ldr	r2, [pc, #228]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a33      	ldr	r2, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <MX_GPIO_Init+0x130>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	482e      	ldr	r0, [pc, #184]	; (8000abc <MX_GPIO_Init+0x134>)
 8000a04:	f000 fe68 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4826      	ldr	r0, [pc, #152]	; (8000abc <MX_GPIO_Init+0x134>)
 8000a22:	f000 fcd5 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4821      	ldr	r0, [pc, #132]	; (8000abc <MX_GPIO_Init+0x134>)
 8000a38:	f000 fcca 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROT01_Pin|ROT02_Pin|ROT03_Pin;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0x138>)
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <MX_GPIO_Init+0x13c>)
 8000a50:	f000 fcbe 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a54:	f248 73f8 	movw	r3, #34808	; 0x87f8
 8000a58:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <MX_GPIO_Init+0x13c>)
 8000a66:	f000 fcb3 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a6a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000a6e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a70:	2303      	movs	r3, #3
 8000a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <MX_GPIO_Init+0x140>)
 8000a7c:	f000 fca8 	bl	80013d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2006      	movs	r0, #6
 8000a86:	f000 fc6c 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f000 fc85 	bl	800139a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2007      	movs	r0, #7
 8000a96:	f000 fc64 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fc7d 	bl	800139a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2008      	movs	r0, #8
 8000aa6:	f000 fc5c 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f000 fc75 	bl	800139a <HAL_NVIC_EnableIRQ>

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	10310000 	.word	0x10310000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <MX_I2C1_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x58>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_I2C1_Init+0x50>)
 8000b0a:	f000 fe2f 	bl	800176c <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 fa38 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000198 	.word	0x20000198
 8000b20:	40005400 	.word	0x40005400
 8000b24:	000186a0 	.word	0x000186a0

08000b28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x70>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d123      	bne.n	8000b90 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_I2C_MspInit+0x78>)
 8000b74:	f000 fc2c 	bl	80013d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	61d3      	str	r3, [r2, #28]
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000baa:	f000 faa1 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bae:	f000 f88b 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb2:	f7ff fee9 	bl	8000988 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000bb6:	f007 ff5f 	bl	8008a78 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000bba:	f7ff ff87 	bl	8000acc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000bbe:	f000 f911 	bl	8000de4 <MPU6050_Init>

  while (1)
  {

	  /* Get tick in millis */
	  timer_curr = HAL_GetTick();
 8000bc2:	f000 faed 	bl	80011a0 <HAL_GetTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <main+0xf0>)
 8000bcc:	801a      	strh	r2, [r3, #0]

	  /* Get the difference between the current timer and last timer in millis
	   * Calculate the rotation each 1000ms */
	  uint16_t timer_diff = timer_curr - timer_bfr;
 8000bce:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <main+0xf0>)
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <main+0xf4>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	80fb      	strh	r3, [r7, #6]
	  if (timer_diff >= 1) {
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d014      	beq.n	8000c0a <main+0x66>

		  MPU6050_Read_Accel();
 8000be0:	f000 f956 	bl	8000e90 <MPU6050_Read_Accel>
		  dados[3] = Accel_X_RAW;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <main+0xf8>)
 8000be6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <main+0xfc>)
 8000bec:	80da      	strh	r2, [r3, #6]
		  dados[4] = Accel_Y_RAW;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <main+0x100>)
 8000bf0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <main+0xfc>)
 8000bf6:	811a      	strh	r2, [r3, #8]
		  dados[5] = Accel_Z_RAW;
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <main+0x104>)
 8000bfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <main+0xfc>)
 8000c00:	815a      	strh	r2, [r3, #10]

		  /* Transmit via USB */
		  CDC_Transmit_FS(dados, 12);
 8000c02:	210c      	movs	r1, #12
 8000c04:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <main+0xfc>)
 8000c06:	f007 fff5 	bl	8008bf4 <CDC_Transmit_FS>
	  }
	  if (timer_diff >= 1000) {
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c10:	d3d7      	bcc.n	8000bc2 <main+0x1e>
		  /* Calculate rotations in RPM*/
		  rot_01 = 3*rotPulsesCnt_01;
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <main+0x108>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <main+0x10c>)
 8000c20:	801a      	strh	r2, [r3, #0]
		  rot_02 = 3*rotPulsesCnt_02;
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <main+0x110>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	0052      	lsls	r2, r2, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <main+0x114>)
 8000c30:	801a      	strh	r2, [r3, #0]
		  rot_03 = 3*rotPulsesCnt_03;
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <main+0x118>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <main+0x11c>)
 8000c40:	801a      	strh	r2, [r3, #0]

		  /* Reset pulse variables */
		  rotPulsesCnt_01 = 0;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <main+0x108>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	801a      	strh	r2, [r3, #0]
		  rotPulsesCnt_02 = 0;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <main+0x110>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	801a      	strh	r2, [r3, #0]
		  rotPulsesCnt_03 = 0;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <main+0x118>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	801a      	strh	r2, [r3, #0]

		  /* Fill the buffer to transmit via USB*/
		  rot_buff[0] = rot_01;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <main+0x10c>)
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <main+0x120>)
 8000c5a:	801a      	strh	r2, [r3, #0]
		  rot_buff[1] = rot_02;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <main+0x114>)
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <main+0x120>)
 8000c62:	805a      	strh	r2, [r3, #2]
		  rot_buff[2] = rot_03;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <main+0x11c>)
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <main+0x120>)
 8000c6a:	809a      	strh	r2, [r3, #4]

		  /* Set the timer before as a current timer */
		  timer_bfr = timer_curr;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <main+0xf0>)
 8000c6e:	881a      	ldrh	r2, [r3, #0]
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <main+0xf4>)
 8000c72:	801a      	strh	r2, [r3, #0]
		  dados[0] = rot_buff[0];
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <main+0x120>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <main+0xfc>)
 8000c7c:	801a      	strh	r2, [r3, #0]
		  dados[1] = rot_buff[1];
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <main+0x120>)
 8000c80:	885b      	ldrh	r3, [r3, #2]
 8000c82:	b21a      	sxth	r2, r3
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <main+0xfc>)
 8000c86:	805a      	strh	r2, [r3, #2]
		  dados[2] = rot_buff[2];
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <main+0x120>)
 8000c8a:	889b      	ldrh	r3, [r3, #4]
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <main+0xfc>)
 8000c90:	809a      	strh	r2, [r3, #4]
  {
 8000c92:	e796      	b.n	8000bc2 <main+0x1e>
 8000c94:	200001fa 	.word	0x200001fa
 8000c98:	200001f8 	.word	0x200001f8
 8000c9c:	20000202 	.word	0x20000202
 8000ca0:	20000208 	.word	0x20000208
 8000ca4:	20000204 	.word	0x20000204
 8000ca8:	20000206 	.word	0x20000206
 8000cac:	200001ec 	.word	0x200001ec
 8000cb0:	200001f2 	.word	0x200001f2
 8000cb4:	200001ee 	.word	0x200001ee
 8000cb8:	200001f4 	.word	0x200001f4
 8000cbc:	200001f0 	.word	0x200001f0
 8000cc0:	200001f6 	.word	0x200001f6
 8000cc4:	200001fc 	.word	0x200001fc

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f008 fb72 	bl	80093c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d06:	2301      	movs	r3, #1
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 faec 	bl	80042fc <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d2a:	f000 f92d 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fd58 	bl	8004800 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d56:	f000 f917 	bl	8000f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fec5 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d70:	f000 f90a 	bl	8000f88 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3750      	adds	r7, #80	; 0x50
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/* External Interrupt Callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	//Blink LED for debug
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d8c:	f000 fcbc 	bl	8001708 <HAL_GPIO_TogglePin>
	if(GPIO_Pin == ROT01_Pin) {		//If pulse in ROT01 is detected, increase of pulse count variable.
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d106      	bne.n	8000da4 <HAL_GPIO_EXTI_Callback+0x28>
		rotPulsesCnt_01++;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000da0:	801a      	strh	r2, [r3, #0]
		return;
 8000da2:	e013      	b.n	8000dcc <HAL_GPIO_EXTI_Callback+0x50>
	}
	if(GPIO_Pin == ROT02_Pin) {		//If pulse in ROT02 is detected, increase of pulse count variable.
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d106      	bne.n	8000db8 <HAL_GPIO_EXTI_Callback+0x3c>
		rotPulsesCnt_02++;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x60>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x60>)
 8000db4:	801a      	strh	r2, [r3, #0]
		return;
 8000db6:	e009      	b.n	8000dcc <HAL_GPIO_EXTI_Callback+0x50>
	}
	if(GPIO_Pin == ROT03_Pin) {		//If pulse in ROT03 is detected, increase of pulse count variable.
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	d106      	bne.n	8000dcc <HAL_GPIO_EXTI_Callback+0x50>
		rotPulsesCnt_03++;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dc8:	801a      	strh	r2, [r3, #0]
		return;
 8000dca:	bf00      	nop
	}
}
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	200001ec 	.word	0x200001ec
 8000ddc:	200001ee 	.word	0x200001ee
 8000de0:	200001f0 	.word	0x200001f0

08000de4 <MPU6050_Init>:


void MPU6050_Init (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2275      	movs	r2, #117	; 0x75
 8000dfc:	21d0      	movs	r1, #208	; 0xd0
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <MPU6050_Init+0xa8>)
 8000e00:	f000 fef2 	bl	8001be8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b68      	cmp	r3, #104	; 0x68
 8000e08:	d13b      	bne.n	8000e82 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	1dbb      	adds	r3, r7, #6
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	226b      	movs	r2, #107	; 0x6b
 8000e20:	21d0      	movs	r1, #208	; 0xd0
 8000e22:	481a      	ldr	r0, [pc, #104]	; (8000e8c <MPU6050_Init+0xa8>)
 8000e24:	f000 fde6 	bl	80019f4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	9302      	str	r3, [sp, #8]
 8000e32:	2301      	movs	r3, #1
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	1dbb      	adds	r3, r7, #6
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	2219      	movs	r2, #25
 8000e3e:	21d0      	movs	r1, #208	; 0xd0
 8000e40:	4812      	ldr	r0, [pc, #72]	; (8000e8c <MPU6050_Init+0xa8>)
 8000e42:	f000 fdd7 	bl	80019f4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	2301      	movs	r3, #1
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	221c      	movs	r2, #28
 8000e5c:	21d0      	movs	r1, #208	; 0xd0
 8000e5e:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MPU6050_Init+0xa8>)
 8000e60:	f000 fdc8 	bl	80019f4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6c:	9302      	str	r3, [sp, #8]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	1dbb      	adds	r3, r7, #6
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	221b      	movs	r2, #27
 8000e7a:	21d0      	movs	r1, #208	; 0xd0
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MPU6050_Init+0xa8>)
 8000e7e:	f000 fdb9 	bl	80019f4 <HAL_I2C_Mem_Write>
	}

}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000198 	.word	0x20000198

08000e90 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	223b      	movs	r2, #59	; 0x3b
 8000ea8:	21d0      	movs	r1, #208	; 0xd0
 8000eaa:	482f      	ldr	r0, [pc, #188]	; (8000f68 <MPU6050_Read_Accel+0xd8>)
 8000eac:	f000 fe9c 	bl	8001be8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000eb0:	783b      	ldrb	r3, [r7, #0]
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	787b      	ldrb	r3, [r7, #1]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MPU6050_Read_Accel+0xdc>)
 8000ec0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MPU6050_Read_Accel+0xe0>)
 8000ed2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ed4:	793b      	ldrb	r3, [r7, #4]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MPU6050_Read_Accel+0xe4>)
 8000ee4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MPU6050_Read_Accel+0xdc>)
 8000ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fa7f 	bl	80003f0 <__aeabi_i2d>
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <MPU6050_Read_Accel+0xe8>)
 8000ef8:	f7ff fc0e 	bl	8000718 <__aeabi_ddiv>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fcf0 	bl	80008e8 <__aeabi_d2f>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <MPU6050_Read_Accel+0xec>)
 8000f0c:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MPU6050_Read_Accel+0xe0>)
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fa6b 	bl	80003f0 <__aeabi_i2d>
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MPU6050_Read_Accel+0xe8>)
 8000f20:	f7ff fbfa 	bl	8000718 <__aeabi_ddiv>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fcdc 	bl	80008e8 <__aeabi_d2f>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <MPU6050_Read_Accel+0xf0>)
 8000f34:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MPU6050_Read_Accel+0xe4>)
 8000f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa57 	bl	80003f0 <__aeabi_i2d>
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MPU6050_Read_Accel+0xe8>)
 8000f48:	f7ff fbe6 	bl	8000718 <__aeabi_ddiv>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fcc8 	bl	80008e8 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <MPU6050_Read_Accel+0xf4>)
 8000f5c:	6013      	str	r3, [r2, #0]

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000198 	.word	0x20000198
 8000f6c:	20000202 	.word	0x20000202
 8000f70:	20000204 	.word	0x20000204
 8000f74:	20000206 	.word	0x20000206
 8000f78:	40d00000 	.word	0x40d00000
 8000f7c:	20000214 	.word	0x20000214
 8000f80:	20000218 	.word	0x20000218
 8000f84:	2000021c 	.word	0x2000021c

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103e:	f000 f89d 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}

08001046 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT01_Pin);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fb76 	bl	800173c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT02_Pin);
 8001058:	2002      	movs	r0, #2
 800105a:	f000 fb6f 	bl	800173c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}

08001062 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT03_Pin);
 8001066:	2004      	movs	r0, #4
 8001068:	f000 fb68 	bl	800173c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001076:	f001 fcf7 	bl	8002a68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000eec 	.word	0x20000eec

08001084 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800108a:	f001 fced 	bl	8002a68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000eec 	.word	0x20000eec

08001098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a4:	f7ff fff8 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010aa:	490c      	ldr	r1, [pc, #48]	; (80010dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010c0:	4c09      	ldr	r4, [pc, #36]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f008 f97f 	bl	80093d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d2:	f7ff fd67 	bl	8000ba4 <main>
  bx lr
 80010d6:	4770      	bx	lr
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80010e0:	080094ac 	.word	0x080094ac
  ldr r2, =_sbss
 80010e4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80010e8:	200013fc 	.word	0x200013fc

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_Init+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_Init+0x28>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f923 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f808 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800110c:	f7ff ff42 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x54>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_InitTick+0x58>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	fbb3 f3f1 	udiv	r3, r3, r1
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f93b 	bl	80013b6 <HAL_SYSTICK_Config>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00e      	b.n	8001168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d80a      	bhi.n	8001166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f903 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_InitTick+0x5c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e000      	b.n	8001168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	20000008 	.word	0x20000008
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x1c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_IncTick+0x20>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000008 	.word	0x20000008
 800119c:	20000220 	.word	0x20000220

080011a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	20000220 	.word	0x20000220

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	; (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff2d 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff42 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff35 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	; 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e169      	b.n	80016b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e4:	2201      	movs	r2, #1
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8158 	bne.w	80016b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a9a      	ldr	r2, [pc, #616]	; (8001670 <HAL_GPIO_Init+0x2a0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d05e      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800140c:	4a98      	ldr	r2, [pc, #608]	; (8001670 <HAL_GPIO_Init+0x2a0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d875      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001412:	4a98      	ldr	r2, [pc, #608]	; (8001674 <HAL_GPIO_Init+0x2a4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d058      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001418:	4a96      	ldr	r2, [pc, #600]	; (8001674 <HAL_GPIO_Init+0x2a4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d86f      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800141e:	4a96      	ldr	r2, [pc, #600]	; (8001678 <HAL_GPIO_Init+0x2a8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d052      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001424:	4a94      	ldr	r2, [pc, #592]	; (8001678 <HAL_GPIO_Init+0x2a8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d869      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800142a:	4a94      	ldr	r2, [pc, #592]	; (800167c <HAL_GPIO_Init+0x2ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d04c      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001430:	4a92      	ldr	r2, [pc, #584]	; (800167c <HAL_GPIO_Init+0x2ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d863      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001436:	4a92      	ldr	r2, [pc, #584]	; (8001680 <HAL_GPIO_Init+0x2b0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d046      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800143c:	4a90      	ldr	r2, [pc, #576]	; (8001680 <HAL_GPIO_Init+0x2b0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d85d      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d82a      	bhi.n	800149c <HAL_GPIO_Init+0xcc>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d859      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <HAL_GPIO_Init+0x80>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014a5 	.word	0x080014a5
 8001458:	080014b7 	.word	0x080014b7
 800145c:	080014f9 	.word	0x080014f9
 8001460:	080014ff 	.word	0x080014ff
 8001464:	080014ff 	.word	0x080014ff
 8001468:	080014ff 	.word	0x080014ff
 800146c:	080014ff 	.word	0x080014ff
 8001470:	080014ff 	.word	0x080014ff
 8001474:	080014ff 	.word	0x080014ff
 8001478:	080014ff 	.word	0x080014ff
 800147c:	080014ff 	.word	0x080014ff
 8001480:	080014ff 	.word	0x080014ff
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014ff 	.word	0x080014ff
 800148c:	080014ff 	.word	0x080014ff
 8001490:	080014ff 	.word	0x080014ff
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014c1 	.word	0x080014c1
 800149c:	4a79      	ldr	r2, [pc, #484]	; (8001684 <HAL_GPIO_Init+0x2b4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e02c      	b.n	80014fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e029      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3304      	adds	r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e024      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	3308      	adds	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e01f      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	330c      	adds	r3, #12
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e01a      	b.n	8001500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d2:	2304      	movs	r3, #4
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e013      	b.n	8001500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	611a      	str	r2, [r3, #16]
          break;
 80014ea:	e009      	b.n	8001500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
          break;
 80014f6:	e003      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x130>
          break;
 80014fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	; 0xff
 8001504:	d801      	bhi.n	800150a <HAL_GPIO_Init+0x13a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e001      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	; 0xff
 8001514:	d802      	bhi.n	800151c <HAL_GPIO_Init+0x14c>
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x152>
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	3b08      	subs	r3, #8
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	210f      	movs	r1, #15
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	6a39      	ldr	r1, [r7, #32]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80b1 	beq.w	80016b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001550:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <HAL_GPIO_Init+0x2b8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a4c      	ldr	r2, [pc, #304]	; (8001688 <HAL_GPIO_Init+0x2b8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001568:	4a48      	ldr	r2, [pc, #288]	; (800168c <HAL_GPIO_Init+0x2bc>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a40      	ldr	r2, [pc, #256]	; (8001690 <HAL_GPIO_Init+0x2c0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1ec>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3f      	ldr	r2, [pc, #252]	; (8001694 <HAL_GPIO_Init+0x2c4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1e8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3e      	ldr	r2, [pc, #248]	; (8001698 <HAL_GPIO_Init+0x2c8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1e4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3d      	ldr	r2, [pc, #244]	; (800169c <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1e0>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e004      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015bc:	2300      	movs	r3, #0
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	492f      	ldr	r1, [pc, #188]	; (800168c <HAL_GPIO_Init+0x2bc>)
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	492c      	ldr	r1, [pc, #176]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4928      	ldr	r1, [pc, #160]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	491e      	ldr	r1, [pc, #120]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4918      	ldr	r1, [pc, #96]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	4914      	ldr	r1, [pc, #80]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d021      	beq.n	80016a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	490e      	ldr	r1, [pc, #56]	; (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e021      	b.n	80016b2 <HAL_GPIO_Init+0x2e2>
 800166e:	bf00      	nop
 8001670:	10320000 	.word	0x10320000
 8001674:	10310000 	.word	0x10310000
 8001678:	10220000 	.word	0x10220000
 800167c:	10210000 	.word	0x10210000
 8001680:	10120000 	.word	0x10120000
 8001684:	10110000 	.word	0x10110000
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40011000 	.word	0x40011000
 800169c:	40011400 	.word	0x40011400
 80016a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_GPIO_Init+0x304>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4909      	ldr	r1, [pc, #36]	; (80016d4 <HAL_GPIO_Init+0x304>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f ae8e 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	372c      	adds	r7, #44	; 0x2c
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43d9      	mvns	r1, r3
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	400b      	ands	r3, r1
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	611a      	str	r2, [r3, #16]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fb0e 	bl	8000d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e12b      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff f9c8 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	; 0x24
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d0:	f003 f95e 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 80017d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a81      	ldr	r2, [pc, #516]	; (80019e0 <HAL_I2C_Init+0x274>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d807      	bhi.n	80017f0 <HAL_I2C_Init+0x84>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a80      	ldr	r2, [pc, #512]	; (80019e4 <HAL_I2C_Init+0x278>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf94      	ite	ls
 80017e8:	2301      	movls	r3, #1
 80017ea:	2300      	movhi	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e006      	b.n	80017fe <HAL_I2C_Init+0x92>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a7d      	ldr	r2, [pc, #500]	; (80019e8 <HAL_I2C_Init+0x27c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf94      	ite	ls
 80017f8:	2301      	movls	r3, #1
 80017fa:	2300      	movhi	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0e7      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4a78      	ldr	r2, [pc, #480]	; (80019ec <HAL_I2C_Init+0x280>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a6a      	ldr	r2, [pc, #424]	; (80019e0 <HAL_I2C_Init+0x274>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d802      	bhi.n	8001840 <HAL_I2C_Init+0xd4>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	e009      	b.n	8001854 <HAL_I2C_Init+0xe8>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <HAL_I2C_Init+0x284>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	3301      	adds	r3, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	430b      	orrs	r3, r1
 800185a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	495c      	ldr	r1, [pc, #368]	; (80019e0 <HAL_I2C_Init+0x274>)
 8001870:	428b      	cmp	r3, r1
 8001872:	d819      	bhi.n	80018a8 <HAL_I2C_Init+0x13c>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e59      	subs	r1, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001888:	400b      	ands	r3, r1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <HAL_I2C_Init+0x138>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e59      	subs	r1, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fbb1 f3f3 	udiv	r3, r1, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a2:	e051      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a4:	2304      	movs	r3, #4
 80018a6:	e04f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d111      	bne.n	80018d4 <HAL_I2C_Init+0x168>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e012      	b.n	80018fa <HAL_I2C_Init+0x18e>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	0099      	lsls	r1, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Init+0x196>
 80018fe:	2301      	movs	r3, #1
 8001900:	e022      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10e      	bne.n	8001928 <HAL_I2C_Init+0x1bc>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e58      	subs	r0, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	440b      	add	r3, r1
 8001918:	fbb0 f3f3 	udiv	r3, r0, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001926:	e00f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	0099      	lsls	r1, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	fbb0 f3f3 	udiv	r3, r0, r3
 800193e:	3301      	adds	r3, #1
 8001940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	6809      	ldr	r1, [r1, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6911      	ldr	r1, [r2, #16]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68d2      	ldr	r2, [r2, #12]
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	430b      	orrs	r3, r1
 800198a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	000186a0 	.word	0x000186a0
 80019e4:	001e847f 	.word	0x001e847f
 80019e8:	003d08ff 	.word	0x003d08ff
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	817b      	strh	r3, [r7, #10]
 8001a06:	460b      	mov	r3, r1
 8001a08:	813b      	strh	r3, [r7, #8]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a0e:	f7ff fbc7 	bl	80011a0 <HAL_GetTick>
 8001a12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	f040 80d9 	bne.w	8001bd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2319      	movs	r3, #25
 8001a28:	2201      	movs	r2, #1
 8001a2a:	496d      	ldr	r1, [pc, #436]	; (8001be0 <HAL_I2C_Mem_Write+0x1ec>)
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 fcc1 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e0cc      	b.n	8001bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_I2C_Mem_Write+0x56>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e0c5      	b.n	8001bd6 <HAL_I2C_Mem_Write+0x1e2>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d007      	beq.n	8001a70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2221      	movs	r2, #33	; 0x21
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a3a      	ldr	r2, [r7, #32]
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_I2C_Mem_Write+0x1f0>)
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ab2:	88f8      	ldrh	r0, [r7, #6]
 8001ab4:	893a      	ldrh	r2, [r7, #8]
 8001ab6:	8979      	ldrh	r1, [r7, #10]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 faf8 	bl	80020b8 <I2C_RequestMemoryWrite>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d052      	beq.n	8001b74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e081      	b.n	8001bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 fd86 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00d      	beq.n	8001afe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d107      	bne.n	8001afa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e06b      	b.n	8001bd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	781a      	ldrb	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d11b      	bne.n	8001b74 <HAL_I2C_Mem_Write+0x180>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d017      	beq.n	8001b74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1aa      	bne.n	8001ad2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fd79 	bl	8002678 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d107      	bne.n	8001ba4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e016      	b.n	8001bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	00100002 	.word	0x00100002
 8001be4:	ffff0000 	.word	0xffff0000

08001be8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	817b      	strh	r3, [r7, #10]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	813b      	strh	r3, [r7, #8]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c06:	f7ff facb 	bl	80011a0 <HAL_GetTick>
 8001c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	f040 8244 	bne.w	80020a2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2319      	movs	r3, #25
 8001c20:	2201      	movs	r2, #1
 8001c22:	4982      	ldr	r1, [pc, #520]	; (8001e2c <HAL_I2C_Mem_Read+0x244>)
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fbc5 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
 8001c32:	e237      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Mem_Read+0x5a>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e230      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d007      	beq.n	8001c68 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2222      	movs	r2, #34	; 0x22
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <HAL_I2C_Mem_Read+0x248>)
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001caa:	88f8      	ldrh	r0, [r7, #6]
 8001cac:	893a      	ldrh	r2, [r7, #8]
 8001cae:	8979      	ldrh	r1, [r7, #10]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4603      	mov	r3, r0
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 fa92 	bl	80021e4 <I2C_RequestMemoryRead>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1ec      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d113      	bne.n	8001cfa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e1c0      	b.n	800207c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d11e      	bne.n	8001d40 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d12:	b672      	cpsid	i
}
 8001d14:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3c:	b662      	cpsie	i
}
 8001d3e:	e035      	b.n	8001dac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d11e      	bne.n	8001d86 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d82:	b662      	cpsie	i
}
 8001d84:	e012      	b.n	8001dac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d94:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001dac:	e166      	b.n	800207c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	f200 811f 	bhi.w	8001ff6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d123      	bne.n	8001e08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fc9f 	bl	8002708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e167      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e06:	e139      	b.n	800207c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d152      	bne.n	8001eb6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e16:	2200      	movs	r2, #0
 8001e18:	4906      	ldr	r1, [pc, #24]	; (8001e34 <HAL_I2C_Mem_Read+0x24c>)
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 faca 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e13c      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
 8001e2a:	bf00      	nop
 8001e2c:	00100002 	.word	0x00100002
 8001e30:	ffff0000 	.word	0xffff0000
 8001e34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e7e:	b662      	cpsie	i
}
 8001e80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb4:	e0e2      	b.n	800207c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	497b      	ldr	r1, [pc, #492]	; (80020ac <HAL_I2C_Mem_Read+0x4c4>)
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fa77 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0e9      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f16:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_I2C_Mem_Read+0x4c8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	08db      	lsrs	r3, r3, #3
 8001f1c:	4a65      	ldr	r2, [pc, #404]	; (80020b4 <HAL_I2C_Mem_Read+0x4cc>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0a1a      	lsrs	r2, r3, #8
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00da      	lsls	r2, r3, #3
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d118      	bne.n	8001f6e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f043 0220 	orr.w	r2, r3, #32
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f5e:	b662      	cpsie	i
}
 8001f60:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e09a      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d1d9      	bne.n	8001f30 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fbe:	b662      	cpsie	i
}
 8001fc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ff4:	e042      	b.n	800207c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fb84 	bl	8002708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e04c      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d118      	bne.n	800207c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	f47f ae94 	bne.w	8001dae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	00010004 	.word	0x00010004
 80020b0:	20000000 	.word	0x20000000
 80020b4:	14f8b589 	.word	0x14f8b589

080020b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f960 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002108:	d103      	bne.n	8002112 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e05f      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002116:	897b      	ldrh	r3, [r7, #10]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	492d      	ldr	r1, [pc, #180]	; (80021e0 <I2C_RequestMemoryWrite+0x128>)
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f9bb 	bl	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e04c      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fa46 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b04      	cmp	r3, #4
 8002168:	d107      	bne.n	800217a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e02b      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002184:	893b      	ldrh	r3, [r7, #8]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	e021      	b.n	80021d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002190:	893b      	ldrh	r3, [r7, #8]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2da      	uxtb	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	6a39      	ldr	r1, [r7, #32]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fa20 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d107      	bne.n	80021c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e005      	b.n	80021d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ca:	893b      	ldrh	r3, [r7, #8]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	00010002 	.word	0x00010002

080021e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	817b      	strh	r3, [r7, #10]
 80021f6:	460b      	mov	r3, r1
 80021f8:	813b      	strh	r3, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800220c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800221c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2200      	movs	r2, #0
 8002226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f8c2 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002244:	d103      	bne.n	800224e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0aa      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	4952      	ldr	r1, [pc, #328]	; (80023b0 <I2C_RequestMemoryRead+0x1cc>)
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f91d 	bl	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e097      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f9a8 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d107      	bne.n	80022b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e076      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022c0:	893b      	ldrh	r3, [r7, #8]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e021      	b.n	8002310 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	6a39      	ldr	r1, [r7, #32]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f982 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d107      	bne.n	8002302 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e050      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	6a39      	ldr	r1, [r7, #32]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f967 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e035      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2200      	movs	r2, #0
 8002354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f82b 	bl	80023b4 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002372:	d103      	bne.n	800237c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e013      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002380:	897b      	ldrh	r3, [r7, #10]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	4906      	ldr	r1, [pc, #24]	; (80023b0 <I2C_RequestMemoryRead+0x1cc>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f886 	bl	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	00010002 	.word	0x00010002

080023b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c4:	e048      	b.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d044      	beq.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7fe fee7 	bl	80011a0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d139      	bne.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10d      	bne.n	800240a <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	43da      	mvns	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4013      	ands	r3, r2
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	e00c      	b.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x70>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	43da      	mvns	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4013      	ands	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	429a      	cmp	r2, r3
 8002428:	d116      	bne.n	8002458 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e023      	b.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10d      	bne.n	800247e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	43da      	mvns	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4013      	ands	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	e00c      	b.n	8002498 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	43da      	mvns	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	429a      	cmp	r2, r3
 800249c:	d093      	beq.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b6:	e071      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d123      	bne.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e067      	b.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d041      	beq.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002518:	f7fe fe42 	bl	80011a0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d136      	bne.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10c      	bne.n	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	e00b      	b.n	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	43da      	mvns	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4013      	ands	r3, r2
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf14      	ite	ne
 8002564:	2301      	movne	r3, #1
 8002566:	2300      	moveq	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e021      	b.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10c      	bne.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e00b      	b.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f af6d 	bne.w	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f4:	e034      	b.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f8e3 	bl	80027c2 <I2C_IsAcknowledgeFailed>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e034      	b.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d028      	beq.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7fe fdc7 	bl	80011a0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d11d      	bne.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b80      	cmp	r3, #128	; 0x80
 8002630:	d016      	beq.n	8002660 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d1c3      	bne.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002684:	e034      	b.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f89b 	bl	80027c2 <I2C_IsAcknowledgeFailed>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e034      	b.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d028      	beq.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7fe fd7f 	bl	80011a0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11d      	bne.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d016      	beq.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e007      	b.n	8002700 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d1c3      	bne.n	8002686 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002714:	e049      	b.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b10      	cmp	r3, #16
 8002722:	d119      	bne.n	8002758 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0210 	mvn.w	r2, #16
 800272c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e030      	b.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002758:	f7fe fd22 	bl	80011a0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	429a      	cmp	r2, r3
 8002766:	d302      	bcc.n	800276e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d11d      	bne.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d016      	beq.n	80027aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e007      	b.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d1ae      	bne.n	8002716 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d8:	d11b      	bne.n	8002812 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800281e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002820:	b08b      	sub	sp, #44	; 0x2c
 8002822:	af06      	add	r7, sp, #24
 8002824:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0f1      	b.n	8002a14 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f006 fb09 	bl	8008e5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2203      	movs	r2, #3
 800284e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fa28 	bl	8004cac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	687e      	ldr	r6, [r7, #4]
 8002864:	466d      	mov	r5, sp
 8002866:	f106 0410 	add.w	r4, r6, #16
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	602b      	str	r3, [r5, #0]
 8002872:	1d33      	adds	r3, r6, #4
 8002874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f002 f9f2 	bl	8004c60 <USB_CoreInit>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0c2      	b.n	8002a14 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f002 fa23 	bl	8004ce0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e040      	b.n	8002922 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	3301      	adds	r3, #1
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3303      	adds	r3, #3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3338      	adds	r3, #56	; 0x38
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	333c      	adds	r3, #60	; 0x3c
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	3340      	adds	r3, #64	; 0x40
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	3301      	adds	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d3b9      	bcc.n	80028a0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e044      	b.n	80029bc <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	3301      	adds	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d3b5      	bcc.n	8002932 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	687e      	ldr	r6, [r7, #4]
 80029ce:	466d      	mov	r5, sp
 80029d0:	f106 0410 	add.w	r4, r6, #16
 80029d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	602b      	str	r3, [r5, #0]
 80029dc:	1d33      	adds	r3, r6, #4
 80029de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e0:	6838      	ldr	r0, [r7, #0]
 80029e2:	f002 f989 	bl	8004cf8 <USB_DevInit>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e00d      	b.n	8002a14 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fc0a 	bl	8007226 <USB_DevDisconnect>

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_PCD_Start+0x16>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e016      	b.n	8002a60 <HAL_PCD_Start+0x44>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 f91e 	bl	8004c80 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a44:	2101      	movs	r1, #1
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f006 fc83 	bl	8009352 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fbde 	bl	8007212 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fbe0 	bl	800723a <USB_ReadInterrupts>
 8002a7a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fb1b 	bl	80030c2 <PCD_EP_ISR_Handler>

    return;
 8002a8c:	e119      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f006 fa56 	bl	8008f62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f905 	bl	8002cc8 <HAL_PCD_SetAddress>

    return;
 8002abe:	e100      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ae2:	e0ee      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b00:	b292      	uxth	r2, r2
 8002b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b06:	e0dc      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d027      	beq.n	8002b62 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0204 	bic.w	r2, r2, #4
 8002b24:	b292      	uxth	r2, r2
 8002b26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0208 	bic.w	r2, r2, #8
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f006 fa46 	bl	8008fd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b60:	e0af      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8083 	beq.w	8002c74 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	77fb      	strb	r3, [r7, #31]
 8002b72:	e010      	b.n	8002b96 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	8812      	ldrh	r2, [r2, #0]
 8002b84:	b292      	uxth	r2, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	3320      	adds	r3, #32
 8002b8a:	443b      	add	r3, r7
 8002b8c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002b90:	7ffb      	ldrb	r3, [r7, #31]
 8002b92:	3301      	adds	r3, #1
 8002b94:	77fb      	strb	r3, [r7, #31]
 8002b96:	7ffb      	ldrb	r3, [r7, #31]
 8002b98:	2b07      	cmp	r3, #7
 8002b9a:	d9eb      	bls.n	8002b74 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002bcc:	bf00      	nop
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f6      	beq.n	8002bce <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e00f      	b.n	8002c1e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002bfe:	7ffb      	ldrb	r3, [r7, #31]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4611      	mov	r1, r2
 8002c06:	7ffa      	ldrb	r2, [r7, #31]
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	440a      	add	r2, r1
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	3320      	adds	r3, #32
 8002c10:	443b      	add	r3, r7
 8002c12:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c16:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c18:	7ffb      	ldrb	r3, [r7, #31]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	d9ec      	bls.n	8002bfe <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0208 	orr.w	r2, r2, #8
 8002c36:	b292      	uxth	r2, r2
 8002c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0204 	orr.w	r2, r2, #4
 8002c66:	b292      	uxth	r2, r2
 8002c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f006 f997 	bl	8008fa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c72:	e026      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00f      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c90:	b292      	uxth	r2, r2
 8002c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f006 f955 	bl	8008f46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c9c:	e011      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cba:	b292      	uxth	r2, r2
 8002cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002cc0:	bf00      	nop
  }
}
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_PCD_SetAddress+0x1a>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e013      	b.n	8002d0a <HAL_PCD_SetAddress+0x42>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fa76 	bl	80071ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	4608      	mov	r0, r1
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	70fb      	strb	r3, [r7, #3]
 8002d24:	460b      	mov	r3, r1
 8002d26:	803b      	strh	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0e      	bge.n	8002d56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	705a      	strb	r2, [r3, #1]
 8002d54:	e00e      	b.n	8002d74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 0207 	and.w	r2, r3, #7
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d80:	883a      	ldrh	r2, [r7, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	78ba      	ldrb	r2, [r7, #2]
 8002d8a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d8c:	78bb      	ldrb	r3, [r7, #2]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d102      	bne.n	8002d98 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_Open+0x94>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_Open+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 ffbf 	bl	8004d38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da0e      	bge.n	8002dfe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	705a      	strb	r2, [r3, #1]
 8002dfc:	e00e      	b.n	8002e1c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 0207 	and.w	r2, r3, #7
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_Close+0x6a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00e      	b.n	8002e54 <HAL_PCD_EP_Close+0x88>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fb37 	bl	80054b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 0207 	and.w	r2, r3, #7
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6979      	ldr	r1, [r7, #20]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fcee 	bl	8005890 <USB_EPStartXfer>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 0207 	and.w	r2, r3, #7
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002ee0:	681b      	ldr	r3, [r3, #0]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fca0 	bl	8005890 <USB_EPStartXfer>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 0207 	and.w	r2, r3, #7
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d901      	bls.n	8002f78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e04c      	b.n	8003012 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	da0e      	bge.n	8002f9e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	705a      	strb	r2, [r3, #1]
 8002f9c:	e00c      	b.n	8002fb8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_EP_SetStall+0x7e>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e01c      	b.n	8003012 <HAL_PCD_EP_SetStall+0xb8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68f9      	ldr	r1, [r7, #12]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 f803 	bl	8006ff2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f004 f928 	bl	8007258 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	d901      	bls.n	8003038 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e040      	b.n	80030ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303c:	2b00      	cmp	r3, #0
 800303e:	da0e      	bge.n	800305e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	705a      	strb	r2, [r3, #1]
 800305c:	e00e      	b.n	800307c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 0207 	and.w	r2, r3, #7
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_EP_ClrStall+0x82>
 8003098:	2302      	movs	r3, #2
 800309a:	e00e      	b.n	80030ba <HAL_PCD_EP_ClrStall+0xa0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fff1 	bl	8007092 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b096      	sub	sp, #88	; 0x58
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030ca:	e3bf      	b.n	800384c <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80030e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8179 	bne.w	80033e2 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d152      	bne.n	80031a2 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310c:	81fb      	strh	r3, [r7, #14]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311c:	b29b      	uxth	r3, r3
 800311e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3328      	adds	r3, #40	; 0x28
 8003124:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	3302      	adds	r3, #2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800314e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003150:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	441a      	add	r2, r3
 800315c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003160:	2100      	movs	r1, #0
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f005 fed5 	bl	8008f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 836b 	beq.w	800384c <PCD_EP_ISR_Handler+0x78a>
 8003176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 8366 	bne.w	800384c <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800318c:	b2da      	uxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	b292      	uxth	r2, r2
 8003194:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031a0:	e354      	b.n	800384c <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031a8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d034      	beq.n	800322a <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	3306      	adds	r3, #6
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f004 f87a 	bl	80072f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29a      	uxth	r2, r3
 800320c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003210:	4013      	ands	r3, r2
 8003212:	823b      	strh	r3, [r7, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	8a3a      	ldrh	r2, [r7, #16]
 800321a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800321e:	b292      	uxth	r2, r2
 8003220:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f005 fe48 	bl	8008eb8 <HAL_PCD_SetupStageCallback>
 8003228:	e310      	b.n	800384c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800322a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800322e:	2b00      	cmp	r3, #0
 8003230:	f280 830c 	bge.w	800384c <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29a      	uxth	r2, r3
 800323c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003240:	4013      	ands	r3, r2
 8003242:	83fb      	strh	r3, [r7, #30]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	8bfa      	ldrh	r2, [r7, #30]
 800324a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800324e:	b292      	uxth	r2, r2
 8003250:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325a:	b29b      	uxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	3306      	adds	r3, #6
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800327e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d019      	beq.n	80032ba <PCD_EP_ISR_Handler+0x1f8>
 8003286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d015      	beq.n	80032ba <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	6959      	ldr	r1, [r3, #20]
 8003296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003298:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800329a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800329c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f004 f82a 	bl	80072f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	441a      	add	r2, r3
 80032ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032b2:	2100      	movs	r1, #0
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f005 fe11 	bl	8008edc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 82bd 	bne.w	800384c <PCD_EP_ISR_Handler+0x78a>
 80032d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032de:	f000 82b5 	beq.w	800384c <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4413      	add	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330c:	b29a      	uxth	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b3e      	cmp	r3, #62	; 0x3e
 8003318:	d91d      	bls.n	8003356 <PCD_EP_ISR_Handler+0x294>
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
 8003322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <PCD_EP_ISR_Handler+0x272>
 800332e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003330:	3b01      	subs	r3, #1
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29a      	uxth	r2, r3
 800333a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333c:	b29b      	uxth	r3, r3
 800333e:	029b      	lsls	r3, r3, #10
 8003340:	b29b      	uxth	r3, r3
 8003342:	4313      	orrs	r3, r2
 8003344:	b29b      	uxth	r3, r3
 8003346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334e:	b29a      	uxth	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	e026      	b.n	80033a4 <PCD_EP_ISR_Handler+0x2e2>
 8003356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <PCD_EP_ISR_Handler+0x2b2>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336c:	b29a      	uxth	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	e017      	b.n	80033a4 <PCD_EP_ISR_Handler+0x2e2>
 8003374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
 800337c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <PCD_EP_ISR_Handler+0x2cc>
 8003388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338a:	3301      	adds	r3, #1
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29a      	uxth	r2, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	b29b      	uxth	r3, r3
 8003398:	029b      	lsls	r3, r3, #10
 800339a:	b29b      	uxth	r3, r3
 800339c:	4313      	orrs	r3, r2
 800339e:	b29a      	uxth	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	827b      	strh	r3, [r7, #18]
 80033b6:	8a7b      	ldrh	r3, [r7, #18]
 80033b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033bc:	827b      	strh	r3, [r7, #18]
 80033be:	8a7b      	ldrh	r3, [r7, #18]
 80033c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033c4:	827b      	strh	r3, [r7, #18]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	8a7b      	ldrh	r3, [r7, #18]
 80033cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033dc:	b29b      	uxth	r3, r3
 80033de:	8013      	strh	r3, [r2, #0]
 80033e0:	e234      	b.n	800384c <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f280 80fc 	bge.w	80035f8 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29a      	uxth	r2, r3
 8003412:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003416:	4013      	ands	r3, r2
 8003418:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800342e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003432:	b292      	uxth	r2, r2
 8003434:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003436:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800344c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344e:	7b1b      	ldrb	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d125      	bne.n	80034a0 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345c:	b29b      	uxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	3306      	adds	r3, #6
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003480:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8092 	beq.w	80035ae <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	6959      	ldr	r1, [r3, #20]
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	88da      	ldrh	r2, [r3, #6]
 8003496:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800349a:	f003 ff2d 	bl	80072f8 <USB_ReadPMA>
 800349e:	e086      	b.n	80035ae <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d10a      	bne.n	80034be <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034ac:	461a      	mov	r2, r3
 80034ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f9d9 	bl	8003868 <HAL_PCD_EP_DB_Receive>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80034bc:	e077      	b.n	80035ae <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034fe:	b29b      	uxth	r3, r3
 8003500:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d024      	beq.n	8003566 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003524:	b29b      	uxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	3302      	adds	r3, #2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003544:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003548:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d02e      	beq.n	80035ae <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003556:	6959      	ldr	r1, [r3, #20]
 8003558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355a:	891a      	ldrh	r2, [r3, #8]
 800355c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003560:	f003 feca 	bl	80072f8 <USB_ReadPMA>
 8003564:	e023      	b.n	80035ae <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	3306      	adds	r3, #6
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003592:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	6959      	ldr	r1, [r3, #20]
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	895a      	ldrh	r2, [r3, #10]
 80035a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035aa:	f003 fea5 	bl	80072f8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035b6:	441a      	add	r2, r3
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035c4:	441a      	add	r2, r3
 80035c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <PCD_EP_ISR_Handler+0x51c>
 80035d2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d206      	bcs.n	80035ec <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f005 fc79 	bl	8008edc <HAL_PCD_DataOutStageCallback>
 80035ea:	e005      	b.n	80035f8 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035f2:	4618      	mov	r0, r3
 80035f4:	f002 f94c 	bl	8005890 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8123 	beq.w	800384c <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003606:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800364a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003652:	b29b      	uxth	r3, r3
 8003654:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003658:	78db      	ldrb	r3, [r3, #3]
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 80a2 	bne.w	80037a4 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003662:	2200      	movs	r2, #0
 8003664:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	7b1b      	ldrb	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8093 	beq.w	8003796 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d046      	beq.n	800370a <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d126      	bne.n	80036d2 <PCD_EP_ISR_Handler+0x610>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003692:	b29b      	uxth	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	4413      	add	r3, r2
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	011a      	lsls	r2, r3, #4
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	4413      	add	r3, r2
 80036a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	e061      	b.n	8003796 <PCD_EP_ISR_Handler+0x6d4>
 80036d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d15d      	bne.n	8003796 <PCD_EP_ISR_Handler+0x6d4>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	4413      	add	r3, r2
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	011a      	lsls	r2, r3, #4
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	4413      	add	r3, r2
 80036fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	2200      	movs	r2, #0
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	e045      	b.n	8003796 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003712:	785b      	ldrb	r3, [r3, #1]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d126      	bne.n	8003766 <PCD_EP_ISR_Handler+0x6a4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	4413      	add	r3, r2
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
 8003730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	011a      	lsls	r2, r3, #4
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	4413      	add	r3, r2
 800373a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374a:	b29a      	uxth	r2, r3
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	801a      	strh	r2, [r3, #0]
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375e:	b29a      	uxth	r2, r3
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e017      	b.n	8003796 <PCD_EP_ISR_Handler+0x6d4>
 8003766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d113      	bne.n	8003796 <PCD_EP_ISR_Handler+0x6d4>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	4413      	add	r3, r2
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	011a      	lsls	r2, r3, #4
 8003786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003788:	4413      	add	r3, r2
 800378a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	2200      	movs	r2, #0
 8003794:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f005 fbb8 	bl	8008f12 <HAL_PCD_DataInStageCallback>
 80037a2:	e053      	b.n	800384c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d146      	bne.n	800383e <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	3302      	adds	r3, #2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80037dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d907      	bls.n	80037f8 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80037e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f4:	619a      	str	r2, [r3, #24]
 80037f6:	e002      	b.n	80037fe <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f005 fb80 	bl	8008f12 <HAL_PCD_DataInStageCallback>
 8003812:	e01b      	b.n	800384c <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800381c:	441a      	add	r2, r3
 800381e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003820:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800382a:	441a      	add	r2, r3
 800382c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003836:	4618      	mov	r0, r3
 8003838:	f002 f82a 	bl	8005890 <USB_EPStartXfer>
 800383c:	e006      	b.n	800384c <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800383e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003842:	461a      	mov	r2, r3
 8003844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f91b 	bl	8003a82 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003854:	b29b      	uxth	r3, r3
 8003856:	b21b      	sxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	f6ff ac37 	blt.w	80030cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3758      	adds	r7, #88	; 0x58
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d07e      	beq.n	800397e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003888:	b29b      	uxth	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	3302      	adds	r3, #2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	8b7b      	ldrh	r3, [r7, #26]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d306      	bcc.n	80038c2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	8b7b      	ldrh	r3, [r7, #26]
 80038ba:	1ad2      	subs	r2, r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	619a      	str	r2, [r3, #24]
 80038c0:	e002      	b.n	80038c8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d123      	bne.n	8003918 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	833b      	strh	r3, [r7, #24]
 80038ec:	8b3b      	ldrh	r3, [r7, #24]
 80038ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038f2:	833b      	strh	r3, [r7, #24]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	8b3b      	ldrh	r3, [r7, #24]
 8003904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800390c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003914:	b29b      	uxth	r3, r3
 8003916:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01f      	beq.n	8003962 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	82fb      	strh	r3, [r7, #22]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	8afb      	ldrh	r3, [r7, #22]
 800394e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800395e:	b29b      	uxth	r3, r3
 8003960:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003962:	8b7b      	ldrh	r3, [r7, #26]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8087 	beq.w	8003a78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6959      	ldr	r1, [r3, #20]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	891a      	ldrh	r2, [r3, #8]
 8003976:	8b7b      	ldrh	r3, [r7, #26]
 8003978:	f003 fcbe 	bl	80072f8 <USB_ReadPMA>
 800397c:	e07c      	b.n	8003a78 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	3306      	adds	r3, #6
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	8b7b      	ldrh	r3, [r7, #26]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d306      	bcc.n	80039c0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	8b7b      	ldrh	r3, [r7, #26]
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	619a      	str	r2, [r3, #24]
 80039be:	e002      	b.n	80039c6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d123      	bne.n	8003a16 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	83fb      	strh	r3, [r7, #30]
 80039ea:	8bfb      	ldrh	r3, [r7, #30]
 80039ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039f0:	83fb      	strh	r3, [r7, #30]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	8bfb      	ldrh	r3, [r7, #30]
 8003a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d11f      	bne.n	8003a60 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	83bb      	strh	r3, [r7, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	8bbb      	ldrh	r3, [r7, #28]
 8003a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a60:	8b7b      	ldrh	r3, [r7, #26]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6959      	ldr	r1, [r3, #20]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	895a      	ldrh	r2, [r3, #10]
 8003a72:	8b7b      	ldrh	r3, [r7, #26]
 8003a74:	f003 fc40 	bl	80072f8 <USB_ReadPMA>
    }
  }

  return count;
 8003a78:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b0a4      	sub	sp, #144	; 0x90
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 81dd 	beq.w	8003e56 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d907      	bls.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003adc:	1ad2      	subs	r2, r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	619a      	str	r2, [r3, #24]
 8003ae2:	e002      	b.n	8003aea <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 80b9 	bne.w	8003c66 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	785b      	ldrb	r3, [r3, #1]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d126      	bne.n	8003b4a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	4413      	add	r3, r2
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	011a      	lsls	r2, r3, #4
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	e01a      	b.n	8003b80 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	785b      	ldrb	r3, [r3, #1]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d116      	bne.n	8003b80 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	4413      	add	r3, r2
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	011a      	lsls	r2, r3, #4
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	4413      	add	r3, r2
 8003b74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d126      	bne.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	011a      	lsls	r2, r3, #4
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e017      	b.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d113      	bne.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	4413      	add	r3, r2
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	011a      	lsls	r2, r3, #4
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	4413      	add	r3, r2
 8003c00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4619      	mov	r1, r3
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f005 f97d 	bl	8008f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 82fc 	beq.w	800421c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	82fb      	strh	r3, [r7, #22]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	8afb      	ldrh	r3, [r7, #22]
 8003c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8013      	strh	r3, [r2, #0]
 8003c64:	e2da      	b.n	800421c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d021      	beq.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	f040 82ae 	bne.w	800421c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cc8:	441a      	add	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cd6:	441a      	add	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6a1a      	ldr	r2, [r3, #32]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d30b      	bcc.n	8003d00 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cf8:	1ad2      	subs	r2, r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	621a      	str	r2, [r3, #32]
 8003cfe:	e017      	b.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d108      	bne.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003d08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d18:	e00a      	b.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d165      	bne.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	4413      	add	r3, r2
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	011a      	lsls	r2, r3, #4
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	4413      	add	r3, r2
 8003d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d74:	2b3e      	cmp	r3, #62	; 0x3e
 8003d76:	d91d      	bls.n	8003db4 <HAL_PCD_EP_DB_Transmit+0x332>
 8003d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <HAL_PCD_EP_DB_Transmit+0x310>
 8003d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	4313      	orrs	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	e044      	b.n	8003e3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x350>
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	801a      	strh	r2, [r3, #0]
 8003dd0:	e035      	b.n	8003e3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_PCD_EP_DB_Transmit+0x36a>
 8003de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de8:	3301      	adds	r3, #1
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	029b      	lsls	r3, r3, #10
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e01c      	b.n	8003e3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d118      	bne.n	8003e3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e20:	4413      	add	r3, r2
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	011a      	lsls	r2, r3, #4
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e32:	643b      	str	r3, [r7, #64]	; 0x40
 8003e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6959      	ldr	r1, [r3, #20]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	891a      	ldrh	r2, [r3, #8]
 8003e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f003 fa0d 	bl	800726e <USB_WritePMA>
 8003e54:	e1e2      	b.n	800421c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3306      	adds	r3, #6
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e7e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d307      	bcc.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e96:	1ad2      	subs	r2, r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	619a      	str	r2, [r3, #24]
 8003e9c:	e002      	b.n	8003ea4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 80c0 	bne.w	800402e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d126      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x482>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eca:	4413      	add	r3, r2
 8003ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	011a      	lsls	r2, r3, #4
 8003ed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	e01a      	b.n	8003f3a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d116      	bne.n	8003f3a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	667b      	str	r3, [r7, #100]	; 0x64
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f20:	4413      	add	r3, r2
 8003f22:	667b      	str	r3, [r7, #100]	; 0x64
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	011a      	lsls	r2, r3, #4
 8003f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f32:	663b      	str	r3, [r7, #96]	; 0x60
 8003f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f36:	2200      	movs	r2, #0
 8003f38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d12b      	bne.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5c:	4413      	add	r3, r2
 8003f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	011a      	lsls	r2, r3, #4
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	4413      	add	r3, r2
 8003f6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f84:	801a      	strh	r2, [r3, #0]
 8003f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f9c:	801a      	strh	r2, [r3, #0]
 8003f9e:	e017      	b.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d113      	bne.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb6:	4413      	add	r3, r2
 8003fb8:	677b      	str	r3, [r7, #116]	; 0x74
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	011a      	lsls	r2, r3, #4
 8003fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8003fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fcc:	2200      	movs	r2, #0
 8003fce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f004 ff9b 	bl	8008f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 811a 	bne.w	800421c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	441a      	add	r2, r3
 8004014:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]
 800402c:	e0f6      	b.n	800421c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d121      	bne.n	800407c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004082:	2b01      	cmp	r3, #1
 8004084:	f040 80ca 	bne.w	800421c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004090:	441a      	add	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800409e:	441a      	add	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d30b      	bcc.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c0:	1ad2      	subs	r2, r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	621a      	str	r2, [r3, #32]
 80040c6:	e017      	b.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80040d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040e0:	e00a      	b.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	657b      	str	r3, [r7, #84]	; 0x54
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d165      	bne.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x750>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004114:	b29b      	uxth	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411a:	4413      	add	r3, r2
 800411c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	011a      	lsls	r2, r3, #4
 8004124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004126:	4413      	add	r3, r2
 8004128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800412c:	65bb      	str	r3, [r7, #88]	; 0x58
 800412e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004138:	b29a      	uxth	r2, r3
 800413a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004142:	2b3e      	cmp	r3, #62	; 0x3e
 8004144:	d91d      	bls.n	8004182 <HAL_PCD_EP_DB_Transmit+0x700>
 8004146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
 800414e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_PCD_EP_DB_Transmit+0x6de>
 800415a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415c:	3b01      	subs	r3, #1
 800415e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29a      	uxth	r2, r3
 8004166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004168:	b29b      	uxth	r3, r3
 800416a:	029b      	lsls	r3, r3, #10
 800416c:	b29b      	uxth	r3, r3
 800416e:	4313      	orrs	r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417a:	b29a      	uxth	r2, r3
 800417c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	e041      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0x784>
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x71e>
 800418a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004198:	b29a      	uxth	r2, r3
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	801a      	strh	r2, [r3, #0]
 800419e:	e032      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0x784>
 80041a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_PCD_EP_DB_Transmit+0x738>
 80041b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b6:	3301      	adds	r3, #1
 80041b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29a      	uxth	r2, r3
 80041c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	029b      	lsls	r3, r3, #10
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4313      	orrs	r3, r2
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ce:	801a      	strh	r2, [r3, #0]
 80041d0:	e019      	b.n	8004206 <HAL_PCD_EP_DB_Transmit+0x784>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	785b      	ldrb	r3, [r3, #1]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d115      	bne.n	8004206 <HAL_PCD_EP_DB_Transmit+0x784>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e8:	4413      	add	r3, r2
 80041ea:	657b      	str	r3, [r7, #84]	; 0x54
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	011a      	lsls	r2, r3, #4
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	4413      	add	r3, r2
 80041f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041fa:	653b      	str	r3, [r7, #80]	; 0x50
 80041fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004200:	b29a      	uxth	r2, r3
 8004202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004204:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6959      	ldr	r1, [r3, #20]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	895a      	ldrh	r2, [r3, #10]
 8004212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004216:	b29b      	uxth	r3, r3
 8004218:	f003 f829 	bl	800726e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004236:	82bb      	strh	r3, [r7, #20]
 8004238:	8abb      	ldrh	r3, [r7, #20]
 800423a:	f083 0310 	eor.w	r3, r3, #16
 800423e:	82bb      	strh	r3, [r7, #20]
 8004240:	8abb      	ldrh	r3, [r7, #20]
 8004242:	f083 0320 	eor.w	r3, r3, #32
 8004246:	82bb      	strh	r3, [r7, #20]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	8abb      	ldrh	r3, [r7, #20]
 8004258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	b29b      	uxth	r3, r3
 800426a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3790      	adds	r7, #144	; 0x90
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	817b      	strh	r3, [r7, #10]
 8004284:	4613      	mov	r3, r2
 8004286:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004288:	897b      	ldrh	r3, [r7, #10]
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004294:	897b      	ldrh	r3, [r7, #10]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e009      	b.n	80042c0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042ac:	897a      	ldrh	r2, [r7, #10]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042c0:	893b      	ldrh	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	80da      	strh	r2, [r3, #6]
 80042d4:	e00b      	b.n	80042ee <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2201      	movs	r2, #1
 80042da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	b29a      	uxth	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e272      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8087 	beq.w	800442a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800431c:	4b92      	ldr	r3, [pc, #584]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b04      	cmp	r3, #4
 8004326:	d00c      	beq.n	8004342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004328:	4b8f      	ldr	r3, [pc, #572]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d112      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
 8004334:	4b8c      	ldr	r3, [pc, #560]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d10b      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004342:	4b89      	ldr	r3, [pc, #548]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06c      	beq.n	8004428 <HAL_RCC_OscConfig+0x12c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d168      	bne.n	8004428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e24c      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x76>
 8004364:	4b80      	ldr	r3, [pc, #512]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7f      	ldr	r2, [pc, #508]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e02e      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x98>
 800437a:	4b7b      	ldr	r3, [pc, #492]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b78      	ldr	r3, [pc, #480]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0xbc>
 800439e:	4b72      	ldr	r3, [pc, #456]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a71      	ldr	r2, [pc, #452]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b6f      	ldr	r3, [pc, #444]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6e      	ldr	r2, [pc, #440]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 80043b8:	4b6b      	ldr	r3, [pc, #428]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6a      	ldr	r2, [pc, #424]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a67      	ldr	r2, [pc, #412]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fc fee2 	bl	80011a0 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fc fede 	bl	80011a0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e200      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe4>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fc fece 	bl	80011a0 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fc feca 	bl	80011a0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1ec      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x10c>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004436:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004442:	4b49      	ldr	r3, [pc, #292]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c0      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4939      	ldr	r1, [pc, #228]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_RCC_OscConfig+0x270>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fc fe83 	bl	80011a0 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fc fe7f 	bl	80011a0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4927      	ldr	r1, [pc, #156]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <HAL_RCC_OscConfig+0x270>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fc fe62 	bl	80011a0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fc fe5e 	bl	80011a0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e180      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03a      	beq.n	8004580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d019      	beq.n	8004546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fc fe42 	bl	80011a0 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7fc fe3e 	bl	80011a0 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e160      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800453e:	2001      	movs	r0, #1
 8004540:	f000 faba 	bl	8004ab8 <RCC_Delay>
 8004544:	e01c      	b.n	8004580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454c:	f7fc fe28 	bl	80011a0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004552:	e00f      	b.n	8004574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004554:	f7fc fe24 	bl	80011a0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d908      	bls.n	8004574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e146      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	42420000 	.word	0x42420000
 8004570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e9      	bne.n	8004554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a6 	beq.w	80046da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	61d3      	str	r3, [r2, #28]
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b82      	ldr	r3, [pc, #520]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b7f      	ldr	r3, [pc, #508]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7e      	ldr	r2, [pc, #504]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fc fde5 	bl	80011a0 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fc fde1 	bl	80011a0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b64      	cmp	r3, #100	; 0x64
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e103      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x312>
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4a6e      	ldr	r2, [pc, #440]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	e02d      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x334>
 8004616:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a69      	ldr	r2, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a66      	ldr	r2, [pc, #408]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	e01c      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b05      	cmp	r3, #5
 8004636:	d10c      	bne.n	8004652 <HAL_RCC_OscConfig+0x356>
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a60      	ldr	r2, [pc, #384]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	f043 0304 	orr.w	r3, r3, #4
 8004642:	6213      	str	r3, [r2, #32]
 8004644:	4b5e      	ldr	r3, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a5d      	ldr	r2, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	e00b      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004652:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a5a      	ldr	r2, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6213      	str	r3, [r2, #32]
 800465e:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a57      	ldr	r2, [pc, #348]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7fc fd95 	bl	80011a0 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fc fd91 	bl	80011a0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0b1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ee      	beq.n	800467a <HAL_RCC_OscConfig+0x37e>
 800469c:	e014      	b.n	80046c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469e:	f7fc fd7f 	bl	80011a0 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fc fd7b 	bl	80011a0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e09b      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ee      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4b3c      	ldr	r3, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8087 	beq.w	80047f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d061      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d146      	bne.n	8004786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fc fd4f 	bl	80011a0 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004706:	f7fc fd4b 	bl	80011a0 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e06d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004718:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d108      	bne.n	8004740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4921      	ldr	r1, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004740:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a19      	ldr	r1, [r3, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	430b      	orrs	r3, r1
 8004752:	491b      	ldr	r1, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fc fd1f 	bl	80011a0 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004766:	f7fc fd1b 	bl	80011a0 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e03d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x46a>
 8004784:	e035      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fc fd08 	bl	80011a0 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fc fd04 	bl	80011a0 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e026      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x498>
 80047b2:	e01e      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e019      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_OscConfig+0x500>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000

08004800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0d0      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d910      	bls.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b67      	ldr	r3, [pc, #412]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 0207 	bic.w	r2, r3, #7
 800482a:	4965      	ldr	r1, [pc, #404]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0b8      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800485c:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800487e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	494d      	ldr	r1, [pc, #308]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d040      	beq.n	8004920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d115      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e073      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06b      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b39      	ldr	r3, [pc, #228]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4936      	ldr	r1, [pc, #216]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f0:	f7fc fc56 	bl	80011a0 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fc fc52 	bl	80011a0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e053      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d210      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4922      	ldr	r1, [pc, #136]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e032      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4916      	ldr	r1, [pc, #88]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	490e      	ldr	r1, [pc, #56]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498e:	f000 f821 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 8004992:	4602      	mov	r2, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	490a      	ldr	r1, [pc, #40]	; (80049c8 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	5ccb      	ldrb	r3, [r1, r3]
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <HAL_RCC_ClockConfig+0x1cc>)
 80049a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1d0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fc fbb4 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40022000 	.word	0x40022000
 80049c4:	40021000 	.word	0x40021000
 80049c8:	08009478 	.word	0x08009478
 80049cc:	20000000 	.word	0x20000000
 80049d0:	20000004 	.word	0x20000004

080049d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049ee:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x30>
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x36>
 8004a02:	e027      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a06:	613b      	str	r3, [r7, #16]
      break;
 8004a08:	e027      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	0c9b      	lsrs	r3, r3, #18
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	0c5b      	lsrs	r3, r3, #17
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a36:	fb03 f202 	mul.w	r2, r3, r2
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e004      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	613b      	str	r3, [r7, #16]
      break;
 8004a52:	e002      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a56:	613b      	str	r3, [r7, #16]
      break;
 8004a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5a:	693b      	ldr	r3, [r7, #16]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	007a1200 	.word	0x007a1200
 8004a70:	08009490 	.word	0x08009490
 8004a74:	080094a0 	.word	0x080094a0
 8004a78:	003d0900 	.word	0x003d0900

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b02      	ldr	r3, [pc, #8]	; (8004a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	20000000 	.word	0x20000000

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff2 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	08009488 	.word	0x08009488

08004ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <RCC_Delay+0x34>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <RCC_Delay+0x38>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	0a5b      	lsrs	r3, r3, #9
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ad4:	bf00      	nop
  }
  while (Delay --);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1e5a      	subs	r2, r3, #1
 8004ada:	60fa      	str	r2, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f9      	bne.n	8004ad4 <RCC_Delay+0x1c>
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	20000000 	.word	0x20000000
 8004af0:	10624dd3 	.word	0x10624dd3

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d07d      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b10:	2300      	movs	r3, #0
 8004b12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b14:	4b4f      	ldr	r3, [pc, #316]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10d      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b20:	4b4c      	ldr	r3, [pc, #304]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4a4b      	ldr	r2, [pc, #300]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	61d3      	str	r3, [r2, #28]
 8004b2c:	4b49      	ldr	r3, [pc, #292]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3c:	4b46      	ldr	r3, [pc, #280]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d118      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b48:	4b43      	ldr	r3, [pc, #268]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a42      	ldr	r2, [pc, #264]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b54:	f7fc fb24 	bl	80011a0 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5a:	e008      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5c:	f7fc fb20 	bl	80011a0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e06d      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6e:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b7a:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02e      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d027      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba8:	4b2c      	ldr	r3, [pc, #176]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bae:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d014      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fc faef 	bl	80011a0 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc faeb 	bl	80011a0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e036      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ee      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4917      	ldr	r1, [pc, #92]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4a13      	ldr	r2, [pc, #76]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	490b      	ldr	r1, [pc, #44]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4904      	ldr	r1, [pc, #16]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	42420440 	.word	0x42420440

08004c60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c60:	b084      	sub	sp, #16
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	f107 0014 	add.w	r0, r7, #20
 8004c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	b004      	add	sp, #16
 8004c7e:	4770      	bx	lr

08004c80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cb4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	f107 0014 	add.w	r0, r7, #20
 8004d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	b004      	add	sp, #16
 8004d36:	4770      	bx	lr

08004d38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b09d      	sub	sp, #116	; 0x74
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	78db      	ldrb	r3, [r3, #3]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d81f      	bhi.n	8004daa <USB_ActivateEndpoint+0x72>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <USB_ActivateEndpoint+0x38>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004d81 	.word	0x08004d81
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004db3 	.word	0x08004db3
 8004d7c:	08004d8f 	.word	0x08004d8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d8c:	e012      	b.n	8004db4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d92:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d96:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d9a:	e00b      	b.n	8004db4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004da8:	e004      	b.n	8004db4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004db0:	e000      	b.n	8004db4 <USB_ActivateEndpoint+0x7c>
      break;
 8004db2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	7b1b      	ldrb	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f040 8178 	bne.w	8005116 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8084 	beq.w	8004f38 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4413      	add	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	88db      	ldrh	r3, [r3, #6]
 8004e58:	085b      	lsrs	r3, r3, #1
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	827b      	strh	r3, [r7, #18]
 8004e72:	8a7b      	ldrh	r3, [r7, #18]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <USB_ActivateEndpoint+0x17c>
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	823b      	strh	r3, [r7, #16]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	8a3b      	ldrh	r3, [r7, #16]
 8004ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	78db      	ldrb	r3, [r3, #3]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d020      	beq.n	8004efe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed2:	81bb      	strh	r3, [r7, #12]
 8004ed4:	89bb      	ldrh	r3, [r7, #12]
 8004ed6:	f083 0320 	eor.w	r3, r3, #32
 8004eda:	81bb      	strh	r3, [r7, #12]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	89bb      	ldrh	r3, [r7, #12]
 8004ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	8013      	strh	r3, [r2, #0]
 8004efc:	e2d5      	b.n	80054aa <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f14:	81fb      	strh	r3, [r7, #14]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
 8004f36:	e2b8      	b.n	80054aa <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	4413      	add	r3, r2
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	011a      	lsls	r2, r3, #4
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	88db      	ldrh	r3, [r3, #6]
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	4413      	add	r3, r2
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	011a      	lsls	r2, r3, #4
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	4413      	add	r3, r2
 8004f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8004fa6:	d91d      	bls.n	8004fe4 <USB_ActivateEndpoint+0x2ac>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <USB_ActivateEndpoint+0x28a>
 8004fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	e026      	b.n	8005032 <USB_ActivateEndpoint+0x2fa>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <USB_ActivateEndpoint+0x2ca>
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e017      	b.n	8005032 <USB_ActivateEndpoint+0x2fa>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	66bb      	str	r3, [r7, #104]	; 0x68
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <USB_ActivateEndpoint+0x2e4>
 8005016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005018:	3301      	adds	r3, #1
 800501a:	66bb      	str	r3, [r7, #104]	; 0x68
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29a      	uxth	r2, r3
 8005022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005024:	b29b      	uxth	r3, r3
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	b29b      	uxth	r3, r3
 800502a:	4313      	orrs	r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01b      	beq.n	8005082 <USB_ActivateEndpoint+0x34a>
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	843b      	strh	r3, [r7, #32]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8c3b      	ldrh	r3, [r7, #32]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d124      	bne.n	80050d4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800509c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a0:	83bb      	strh	r3, [r7, #28]
 80050a2:	8bbb      	ldrh	r3, [r7, #28]
 80050a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050a8:	83bb      	strh	r3, [r7, #28]
 80050aa:	8bbb      	ldrh	r3, [r7, #28]
 80050ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050b0:	83bb      	strh	r3, [r7, #28]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	8bbb      	ldrh	r3, [r7, #28]
 80050be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	8013      	strh	r3, [r2, #0]
 80050d2:	e1ea      	b.n	80054aa <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	83fb      	strh	r3, [r7, #30]
 80050ec:	8bfb      	ldrh	r3, [r7, #30]
 80050ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050f2:	83fb      	strh	r3, [r7, #30]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	8bfb      	ldrh	r3, [r7, #30]
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
 8005114:	e1c9      	b.n	80054aa <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	78db      	ldrb	r3, [r3, #3]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d11e      	bne.n	800515c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	441a      	add	r2, r3
 8005142:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005156:	b29b      	uxth	r3, r3
 8005158:	8013      	strh	r3, [r2, #0]
 800515a:	e01d      	b.n	8005198 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a8:	4413      	add	r3, r2
 80051aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	011a      	lsls	r2, r3, #4
 80051b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	891b      	ldrh	r3, [r3, #8]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	657b      	str	r3, [r7, #84]	; 0x54
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051dc:	4413      	add	r3, r2
 80051de:	657b      	str	r3, [r7, #84]	; 0x54
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	011a      	lsls	r2, r3, #4
 80051e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051ee:	653b      	str	r3, [r7, #80]	; 0x50
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	895b      	ldrh	r3, [r3, #10]
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8093 	bne.w	8005330 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800521a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800521e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <USB_ActivateEndpoint+0x526>
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800526c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01b      	beq.n	80052ae <USB_ActivateEndpoint+0x576>
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	441a      	add	r2, r3
 8005298:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800529a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80052c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80052ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800531a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532a:	b29b      	uxth	r3, r3
 800532c:	8013      	strh	r3, [r2, #0]
 800532e:	e0bc      	b.n	80054aa <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01d      	beq.n	8005388 <USB_ActivateEndpoint+0x650>
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	b29b      	uxth	r3, r3
 8005386:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005398:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01d      	beq.n	80053e0 <USB_ActivateEndpoint+0x6a8>
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	78db      	ldrb	r3, [r3, #3]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d024      	beq.n	8005432 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005402:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005406:	f083 0320 	eor.w	r3, r3, #32
 800540a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800541c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	b29b      	uxth	r3, r3
 800542e:	8013      	strh	r3, [r2, #0]
 8005430:	e01d      	b.n	800546e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005448:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800545a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546a:	b29b      	uxth	r3, r3
 800546c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005484:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80054aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3774      	adds	r7, #116	; 0x74
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b08d      	sub	sp, #52	; 0x34
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	7b1b      	ldrb	r3, [r3, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 808e 	bne.w	80055e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d044      	beq.n	800555e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	81bb      	strh	r3, [r7, #12]
 80054e2:	89bb      	ldrh	r3, [r7, #12]
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <USB_DeactivateEndpoint+0x6c>
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	817b      	strh	r3, [r7, #10]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	897b      	ldrh	r3, [r7, #10]
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	813b      	strh	r3, [r7, #8]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	893b      	ldrh	r3, [r7, #8]
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
 800555c:	e192      	b.n	8005884 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	827b      	strh	r3, [r7, #18]
 800556c:	8a7b      	ldrh	r3, [r7, #18]
 800556e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01b      	beq.n	80055ae <USB_DeactivateEndpoint+0xf6>
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558c:	823b      	strh	r3, [r7, #16]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	8a3b      	ldrh	r3, [r7, #16]
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	81fb      	strh	r3, [r7, #14]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	441a      	add	r2, r3
 80055d0:	89fb      	ldrh	r3, [r7, #14]
 80055d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	8013      	strh	r3, [r2, #0]
 80055e6:	e14d      	b.n	8005884 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 80a5 	bne.w	800573c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	843b      	strh	r3, [r7, #32]
 8005600:	8c3b      	ldrh	r3, [r7, #32]
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01b      	beq.n	8005642 <USB_DeactivateEndpoint+0x18a>
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	83fb      	strh	r3, [r7, #30]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	8bfb      	ldrh	r3, [r7, #30]
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	83bb      	strh	r3, [r7, #28]
 8005650:	8bbb      	ldrh	r3, [r7, #28]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01b      	beq.n	8005692 <USB_DeactivateEndpoint+0x1da>
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005670:	837b      	strh	r3, [r7, #26]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	441a      	add	r2, r3
 800567c:	8b7b      	ldrh	r3, [r7, #26]
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	833b      	strh	r3, [r7, #24]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	8b3b      	ldrh	r3, [r7, #24]
 80056b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	82fb      	strh	r3, [r7, #22]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	8afb      	ldrh	r3, [r7, #22]
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005718:	82bb      	strh	r3, [r7, #20]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	441a      	add	r2, r3
 8005724:	8abb      	ldrh	r3, [r7, #20]
 8005726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]
 800573a:	e0a3      	b.n	8005884 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800574a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800574c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01b      	beq.n	800578c <USB_DeactivateEndpoint+0x2d4>
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	857b      	strh	r3, [r7, #42]	; 0x2a
 800579a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01b      	beq.n	80057dc <USB_DeactivateEndpoint+0x324>
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005848:	b29b      	uxth	r3, r3
 800584a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	847b      	strh	r3, [r7, #34]	; 0x22
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	441a      	add	r2, r3
 800586e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005880:	b29b      	uxth	r3, r3
 8005882:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3734      	adds	r7, #52	; 0x34
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr

08005890 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b0c2      	sub	sp, #264	; 0x108
 8005894:	af00      	add	r7, sp, #0
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589e:	6018      	str	r0, [r3, #0]
 80058a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	f040 86b7 	bne.w	800662a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d908      	bls.n	80058ea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80058d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058e8:	e007      	b.n	80058fa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80058ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80058fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	7b1b      	ldrb	r3, [r3, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d13a      	bne.n	8005980 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800590a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6959      	ldr	r1, [r3, #20]
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	88da      	ldrh	r2, [r3, #6]
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005926:	b29b      	uxth	r3, r3
 8005928:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800592c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005930:	6800      	ldr	r0, [r0, #0]
 8005932:	f001 fc9c 	bl	800726e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005950:	b29b      	uxth	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	011a      	lsls	r2, r3, #4
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	f000 be1f 	b.w	80065be <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	2b02      	cmp	r3, #2
 800598e:	f040 8462 	bne.w	8006256 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	f240 83df 	bls.w	800616e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80059da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	441a      	add	r2, r3
 80059f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a00:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1c:	1ad2      	subs	r2, r2, r3
 8005a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 81c7 	beq.w	8005de0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d177      	bne.n	8005b5e <USB_EPStartXfer+0x2ce>
 8005a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	4413      	add	r3, r2
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abe:	2b3e      	cmp	r3, #62	; 0x3e
 8005ac0:	d921      	bls.n	8005b06 <USB_EPStartXfer+0x276>
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <USB_EPStartXfer+0x252>
 8005ad8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005adc:	3b01      	subs	r3, #1
 8005ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e050      	b.n	8005ba8 <USB_EPStartXfer+0x318>
 8005b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <USB_EPStartXfer+0x294>
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e041      	b.n	8005ba8 <USB_EPStartXfer+0x318>
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <USB_EPStartXfer+0x2b4>
 8005b3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	e024      	b.n	8005ba8 <USB_EPStartXfer+0x318>
 8005b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d11c      	bne.n	8005ba8 <USB_EPStartXfer+0x318>
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	4413      	add	r3, r2
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
 8005b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	895b      	ldrh	r3, [r3, #10]
 8005bb4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6959      	ldr	r1, [r3, #20]
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bd2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bd6:	6800      	ldr	r0, [r0, #0]
 8005bd8:	f001 fb49 	bl	800726e <USB_WritePMA>
            ep->xfer_buff += len;
 8005bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bec:	441a      	add	r2, r3
 8005bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6a1a      	ldr	r2, [r3, #32]
 8005c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d90f      	bls.n	8005c36 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	621a      	str	r2, [r3, #32]
 8005c34:	e00e      	b.n	8005c54 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2200      	movs	r2, #0
 8005c52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d177      	bne.n	8005d54 <USB_EPStartXfer+0x4c4>
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	4413      	add	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb6:	d921      	bls.n	8005cfc <USB_EPStartXfer+0x46c>
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <USB_EPStartXfer+0x448>
 8005cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	029b      	lsls	r3, r3, #10
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e056      	b.n	8005daa <USB_EPStartXfer+0x51a>
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <USB_EPStartXfer+0x48a>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	e047      	b.n	8005daa <USB_EPStartXfer+0x51a>
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <USB_EPStartXfer+0x4aa>
 8005d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d34:	3301      	adds	r3, #1
 8005d36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	029b      	lsls	r3, r3, #10
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e02a      	b.n	8005daa <USB_EPStartXfer+0x51a>
 8005d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d122      	bne.n	8005daa <USB_EPStartXfer+0x51a>
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	4413      	add	r3, r2
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	011a      	lsls	r2, r3, #4
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	891b      	ldrh	r3, [r3, #8]
 8005db6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6959      	ldr	r1, [r3, #20]
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005dd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005dd8:	6800      	ldr	r0, [r0, #0]
 8005dda:	f001 fa48 	bl	800726e <USB_WritePMA>
 8005dde:	e3ee      	b.n	80065be <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d177      	bne.n	8005ee0 <USB_EPStartXfer+0x650>
 8005df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e10:	4413      	add	r3, r2
 8005e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	011a      	lsls	r2, r3, #4
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	4413      	add	r3, r2
 8005e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e40:	2b3e      	cmp	r3, #62	; 0x3e
 8005e42:	d921      	bls.n	8005e88 <USB_EPStartXfer+0x5f8>
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <USB_EPStartXfer+0x5d4>
 8005e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	029b      	lsls	r3, r3, #10
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4313      	orrs	r3, r2
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e056      	b.n	8005f36 <USB_EPStartXfer+0x6a6>
 8005e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <USB_EPStartXfer+0x616>
 8005e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e047      	b.n	8005f36 <USB_EPStartXfer+0x6a6>
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <USB_EPStartXfer+0x636>
 8005ebc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e02a      	b.n	8005f36 <USB_EPStartXfer+0x6a6>
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d122      	bne.n	8005f36 <USB_EPStartXfer+0x6a6>
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	653b      	str	r3, [r7, #80]	; 0x50
 8005efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f10:	4413      	add	r3, r2
 8005f12:	653b      	str	r3, [r7, #80]	; 0x50
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	011a      	lsls	r2, r3, #4
 8005f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f24:	4413      	add	r3, r2
 8005f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	891b      	ldrh	r3, [r3, #8]
 8005f42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6959      	ldr	r1, [r3, #20]
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f64:	6800      	ldr	r0, [r0, #0]
 8005f66:	f001 f982 	bl	800726e <USB_WritePMA>
            ep->xfer_buff += len;
 8005f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695a      	ldr	r2, [r3, #20]
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7a:	441a      	add	r2, r3
 8005f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d90f      	bls.n	8005fc4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	621a      	str	r2, [r3, #32]
 8005fc2:	e00e      	b.n	8005fe2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	643b      	str	r3, [r7, #64]	; 0x40
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d177      	bne.n	80060ee <USB_EPStartXfer+0x85e>
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006018:	b29b      	uxth	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	4413      	add	r3, r2
 8006020:	63bb      	str	r3, [r7, #56]	; 0x38
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	011a      	lsls	r2, r3, #4
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	4413      	add	r3, r2
 8006034:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006044:	b29a      	uxth	r2, r3
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604e:	2b3e      	cmp	r3, #62	; 0x3e
 8006050:	d921      	bls.n	8006096 <USB_EPStartXfer+0x806>
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <USB_EPStartXfer+0x7e2>
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	3b01      	subs	r3, #1
 800606e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	b29b      	uxth	r3, r3
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	b29b      	uxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b29b      	uxth	r3, r3
 8006086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608e:	b29a      	uxth	r2, r3
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	e050      	b.n	8006138 <USB_EPStartXfer+0x8a8>
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <USB_EPStartXfer+0x824>
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e041      	b.n	8006138 <USB_EPStartXfer+0x8a8>
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <USB_EPStartXfer+0x844>
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	3301      	adds	r3, #1
 80060d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	b29b      	uxth	r3, r3
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4313      	orrs	r3, r2
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	e024      	b.n	8006138 <USB_EPStartXfer+0x8a8>
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d11c      	bne.n	8006138 <USB_EPStartXfer+0x8a8>
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006112:	4413      	add	r3, r2
 8006114:	643b      	str	r3, [r7, #64]	; 0x40
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	011a      	lsls	r2, r3, #4
 8006124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006126:	4413      	add	r3, r2
 8006128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006132:	b29a      	uxth	r2, r3
 8006134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006136:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	895b      	ldrh	r3, [r3, #10]
 8006144:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6959      	ldr	r1, [r3, #20]
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006158:	b29b      	uxth	r3, r3
 800615a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800615e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006162:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006166:	6800      	ldr	r0, [r0, #0]
 8006168:	f001 f881 	bl	800726e <USB_WritePMA>
 800616c:	e227      	b.n	80065be <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fa:	4413      	add	r3, r2
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	011a      	lsls	r2, r3, #4
 800620c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620e:	4413      	add	r3, r2
 8006210:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006214:	65bb      	str	r3, [r7, #88]	; 0x58
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621a:	b29a      	uxth	r2, r3
 800621c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800621e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	891b      	ldrh	r3, [r3, #8]
 800622c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6959      	ldr	r1, [r3, #20]
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006240:	b29b      	uxth	r3, r3
 8006242:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006246:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800624a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800624e:	6800      	ldr	r0, [r0, #0]
 8006250:	f001 f80d 	bl	800726e <USB_WritePMA>
 8006254:	e1b3      	b.n	80065be <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80c6 	beq.w	8006428 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	673b      	str	r3, [r7, #112]	; 0x70
 80062a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d177      	bne.n	80063a8 <USB_EPStartXfer+0xb18>
 80062b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062d8:	4413      	add	r3, r2
 80062da:	66bb      	str	r3, [r7, #104]	; 0x68
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	011a      	lsls	r2, r3, #4
 80062ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ec:	4413      	add	r3, r2
 80062ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f2:	667b      	str	r3, [r7, #100]	; 0x64
 80062f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062fe:	b29a      	uxth	r2, r3
 8006300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006308:	2b3e      	cmp	r3, #62	; 0x3e
 800630a:	d921      	bls.n	8006350 <USB_EPStartXfer+0xac0>
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	2b00      	cmp	r3, #0
 8006320:	d104      	bne.n	800632c <USB_EPStartXfer+0xa9c>
 8006322:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006326:	3b01      	subs	r3, #1
 8006328:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800632c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29a      	uxth	r2, r3
 8006332:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006336:	b29b      	uxth	r3, r3
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	b29b      	uxth	r3, r3
 800633c:	4313      	orrs	r3, r2
 800633e:	b29b      	uxth	r3, r3
 8006340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006348:	b29a      	uxth	r2, r3
 800634a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	e050      	b.n	80063f2 <USB_EPStartXfer+0xb62>
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <USB_EPStartXfer+0xade>
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006366:	b29a      	uxth	r2, r3
 8006368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e041      	b.n	80063f2 <USB_EPStartXfer+0xb62>
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <USB_EPStartXfer+0xafe>
 8006384:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006388:	3301      	adds	r3, #1
 800638a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800638e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29b      	uxth	r3, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e024      	b.n	80063f2 <USB_EPStartXfer+0xb62>
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d11c      	bne.n	80063f2 <USB_EPStartXfer+0xb62>
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063cc:	4413      	add	r3, r2
 80063ce:	673b      	str	r3, [r7, #112]	; 0x70
 80063d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	011a      	lsls	r2, r3, #4
 80063de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e0:	4413      	add	r3, r2
 80063e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	895b      	ldrh	r3, [r3, #10]
 80063fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6959      	ldr	r1, [r3, #20]
 800640e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006412:	b29b      	uxth	r3, r3
 8006414:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006418:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800641c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006420:	6800      	ldr	r0, [r0, #0]
 8006422:	f000 ff24 	bl	800726e <USB_WritePMA>
 8006426:	e0ca      	b.n	80065be <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d177      	bne.n	8006528 <USB_EPStartXfer+0xc98>
 8006438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006452:	b29b      	uxth	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006458:	4413      	add	r3, r2
 800645a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	011a      	lsls	r2, r3, #4
 800646a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800646c:	4413      	add	r3, r2
 800646e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006472:	67bb      	str	r3, [r7, #120]	; 0x78
 8006474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800647e:	b29a      	uxth	r2, r3
 8006480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006488:	2b3e      	cmp	r3, #62	; 0x3e
 800648a:	d921      	bls.n	80064d0 <USB_EPStartXfer+0xc40>
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <USB_EPStartXfer+0xc1c>
 80064a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064a6:	3b01      	subs	r3, #1
 80064a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	4313      	orrs	r3, r2
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	e05c      	b.n	800658a <USB_EPStartXfer+0xcfa>
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <USB_EPStartXfer+0xc5e>
 80064d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	e04d      	b.n	800658a <USB_EPStartXfer+0xcfa>
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <USB_EPStartXfer+0xc7e>
 8006504:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006508:	3301      	adds	r3, #1
 800650a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800650e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29a      	uxth	r2, r3
 8006514:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006518:	b29b      	uxth	r3, r3
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	b29b      	uxth	r3, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	b29a      	uxth	r2, r3
 8006522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006524:	801a      	strh	r2, [r3, #0]
 8006526:	e030      	b.n	800658a <USB_EPStartXfer+0xcfa>
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d128      	bne.n	800658a <USB_EPStartXfer+0xcfa>
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006554:	b29b      	uxth	r3, r3
 8006556:	461a      	mov	r2, r3
 8006558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800655c:	4413      	add	r3, r2
 800655e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	011a      	lsls	r2, r3, #4
 8006570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006574:	4413      	add	r3, r2
 8006576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800657a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006588:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800658a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	891b      	ldrh	r3, [r3, #8]
 8006596:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800659a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6959      	ldr	r1, [r3, #20]
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065b8:	6800      	ldr	r0, [r0, #0]
 80065ba:	f000 fe58 	bl	800726e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e4:	817b      	strh	r3, [r7, #10]
 80065e6:	897b      	ldrh	r3, [r7, #10]
 80065e8:	f083 0310 	eor.w	r3, r3, #16
 80065ec:	817b      	strh	r3, [r7, #10]
 80065ee:	897b      	ldrh	r3, [r7, #10]
 80065f0:	f083 0320 	eor.w	r3, r3, #32
 80065f4:	817b      	strh	r3, [r7, #10]
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	897b      	ldrh	r3, [r7, #10]
 8006612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006622:	b29b      	uxth	r3, r3
 8006624:	8013      	strh	r3, [r2, #0]
 8006626:	f000 bcde 	b.w	8006fe6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800662a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	7b1b      	ldrb	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 80bb 	bne.w	80067b2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d917      	bls.n	8006688 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006678:	1ad2      	subs	r2, r2, r3
 800667a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	619a      	str	r2, [r3, #24]
 8006686:	e00e      	b.n	80066a6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066ca:	4413      	add	r3, r2
 80066cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	011a      	lsls	r2, r3, #4
 80066de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066e2:	4413      	add	r3, r2
 80066e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	2b3e      	cmp	r3, #62	; 0x3e
 8006706:	d924      	bls.n	8006752 <USB_EPStartXfer+0xec2>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <USB_EPStartXfer+0xe98>
 800671e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006722:	3b01      	subs	r3, #1
 8006724:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006734:	b29b      	uxth	r3, r3
 8006736:	029b      	lsls	r3, r3, #10
 8006738:	b29b      	uxth	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b29b      	uxth	r3, r3
 800673e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	f000 bc10 	b.w	8006f72 <USB_EPStartXfer+0x16e2>
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10c      	bne.n	8006774 <USB_EPStartXfer+0xee4>
 800675a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676a:	b29a      	uxth	r2, r3
 800676c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e3fe      	b.n	8006f72 <USB_EPStartXfer+0x16e2>
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	085b      	lsrs	r3, r3, #1
 800677a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <USB_EPStartXfer+0xf04>
 800678a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800678e:	3301      	adds	r3, #1
 8006790:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	029b      	lsls	r3, r3, #10
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	4313      	orrs	r3, r2
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e3df      	b.n	8006f72 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	78db      	ldrb	r3, [r3, #3]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	f040 8218 	bne.w	8006bf4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80067c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f040 809d 	bne.w	8006910 <USB_EPStartXfer+0x1080>
 80067d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067fa:	4413      	add	r3, r2
 80067fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	011a      	lsls	r2, r3, #4
 800680e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006812:	4413      	add	r3, r2
 8006814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800681c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b3e      	cmp	r3, #62	; 0x3e
 800683e:	d92b      	bls.n	8006898 <USB_EPStartXfer+0x1008>
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <USB_EPStartXfer+0xfe0>
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686a:	3b01      	subs	r3, #1
 800686c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29a      	uxth	r2, r3
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687c:	b29b      	uxth	r3, r3
 800687e:	029b      	lsls	r3, r3, #10
 8006880:	b29b      	uxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b29b      	uxth	r3, r3
 8006886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688e:	b29a      	uxth	r2, r3
 8006890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e070      	b.n	800697a <USB_EPStartXfer+0x10ea>
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10c      	bne.n	80068c2 <USB_EPStartXfer+0x1032>
 80068a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e05b      	b.n	800697a <USB_EPStartXfer+0x10ea>
 80068c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <USB_EPStartXfer+0x1062>
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ec:	3301      	adds	r3, #1
 80068ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29b      	uxth	r3, r3
 8006904:	4313      	orrs	r3, r2
 8006906:	b29a      	uxth	r2, r3
 8006908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	e034      	b.n	800697a <USB_EPStartXfer+0x10ea>
 8006910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d12c      	bne.n	800697a <USB_EPStartXfer+0x10ea>
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693c:	b29b      	uxth	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006944:	4413      	add	r3, r2
 8006946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800694a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	011a      	lsls	r2, r3, #4
 8006958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800695c:	4413      	add	r3, r2
 800695e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	b29a      	uxth	r2, r3
 8006974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006978:	801a      	strh	r2, [r3, #0]
 800697a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 809d 	bne.w	8006ad4 <USB_EPStartXfer+0x1244>
 800699a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069be:	4413      	add	r3, r2
 80069c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	011a      	lsls	r2, r3, #4
 80069d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b3e      	cmp	r3, #62	; 0x3e
 8006a02:	d92b      	bls.n	8006a5c <USB_EPStartXfer+0x11cc>
 8006a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 031f 	and.w	r3, r3, #31
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <USB_EPStartXfer+0x11a4>
 8006a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	4313      	orrs	r3, r2
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	e069      	b.n	8006b30 <USB_EPStartXfer+0x12a0>
 8006a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10c      	bne.n	8006a86 <USB_EPStartXfer+0x11f6>
 8006a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	e054      	b.n	8006b30 <USB_EPStartXfer+0x12a0>
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d004      	beq.n	8006ab6 <USB_EPStartXfer+0x1226>
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	029b      	lsls	r3, r3, #10
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	e02d      	b.n	8006b30 <USB_EPStartXfer+0x12a0>
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d125      	bne.n	8006b30 <USB_EPStartXfer+0x12a0>
 8006ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006afa:	4413      	add	r3, r2
 8006afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	011a      	lsls	r2, r3, #4
 8006b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b12:	4413      	add	r3, r2
 8006b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b2e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8218 	beq.w	8006f72 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <USB_EPStartXfer+0x12ea>
 8006b6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10d      	bne.n	8006b96 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f040 81f5 	bne.w	8006f72 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f040 81ee 	bne.w	8006f72 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
 8006bf2:	e1be      	b.n	8006f72 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	78db      	ldrb	r3, [r3, #3]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f040 81b4 	bne.w	8006f6e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d917      	bls.n	8006c52 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	619a      	str	r2, [r3, #24]
 8006c50:	e00e      	b.n	8006c70 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 8085 	bne.w	8006d8c <USB_EPStartXfer+0x14fc>
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	011a      	lsls	r2, r3, #4
 8006cba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ce2:	d923      	bls.n	8006d2c <USB_EPStartXfer+0x149c>
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d104      	bne.n	8006d04 <USB_EPStartXfer+0x1474>
 8006cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	029b      	lsls	r3, r3, #10
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	e060      	b.n	8006dee <USB_EPStartXfer+0x155e>
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <USB_EPStartXfer+0x14be>
 8006d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e04f      	b.n	8006dee <USB_EPStartXfer+0x155e>
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <USB_EPStartXfer+0x14de>
 8006d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d68:	3301      	adds	r3, #1
 8006d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	029b      	lsls	r3, r3, #10
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	e030      	b.n	8006dee <USB_EPStartXfer+0x155e>
 8006d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d128      	bne.n	8006dee <USB_EPStartXfer+0x155e>
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	011a      	lsls	r2, r3, #4
 8006dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	785b      	ldrb	r3, [r3, #1]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f040 8085 	bne.w	8006f18 <USB_EPStartXfer+0x1688>
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e32:	4413      	add	r3, r2
 8006e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	011a      	lsls	r2, r3, #4
 8006e46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e6e:	d923      	bls.n	8006eb8 <USB_EPStartXfer+0x1628>
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d104      	bne.n	8006e90 <USB_EPStartXfer+0x1600>
 8006e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e05c      	b.n	8006f72 <USB_EPStartXfer+0x16e2>
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10c      	bne.n	8006eda <USB_EPStartXfer+0x164a>
 8006ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	e04b      	b.n	8006f72 <USB_EPStartXfer+0x16e2>
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <USB_EPStartXfer+0x166a>
 8006ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	029b      	lsls	r3, r3, #10
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	e02c      	b.n	8006f72 <USB_EPStartXfer+0x16e2>
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d124      	bne.n	8006f72 <USB_EPStartXfer+0x16e2>
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f3e:	4413      	add	r3, r2
 8006f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	011a      	lsls	r2, r3, #4
 8006f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	e001      	b.n	8006f72 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e03a      	b.n	8006fe8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fa4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fa8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	441a      	add	r2, r3
 8006fce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d020      	beq.n	8007046 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701a:	81bb      	strh	r3, [r7, #12]
 800701c:	89bb      	ldrh	r3, [r7, #12]
 800701e:	f083 0310 	eor.w	r3, r3, #16
 8007022:	81bb      	strh	r3, [r7, #12]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	89bb      	ldrh	r3, [r7, #12]
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]
 8007044:	e01f      	b.n	8007086 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	81fb      	strh	r3, [r7, #14]
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007064:	81fb      	strh	r3, [r7, #14]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	441a      	add	r2, r3
 8007070:	89fb      	ldrh	r3, [r7, #14]
 8007072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007082:	b29b      	uxth	r3, r3
 8007084:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr

08007092 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007092:	b480      	push	{r7}
 8007094:	b087      	sub	sp, #28
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	7b1b      	ldrb	r3, [r3, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 809d 	bne.w	80071e0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d04c      	beq.n	8007148 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	823b      	strh	r3, [r7, #16]
 80070bc:	8a3b      	ldrh	r3, [r7, #16]
 80070be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d01b      	beq.n	80070fe <USB_EPClearStall+0x6c>
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	81fb      	strh	r3, [r7, #14]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	89fb      	ldrh	r3, [r7, #14]
 80070ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	78db      	ldrb	r3, [r3, #3]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d06c      	beq.n	80071e0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711c:	81bb      	strh	r3, [r7, #12]
 800711e:	89bb      	ldrh	r3, [r7, #12]
 8007120:	f083 0320 	eor.w	r3, r3, #32
 8007124:	81bb      	strh	r3, [r7, #12]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	441a      	add	r2, r3
 8007130:	89bb      	ldrh	r3, [r7, #12]
 8007132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007142:	b29b      	uxth	r3, r3
 8007144:	8013      	strh	r3, [r2, #0]
 8007146:	e04b      	b.n	80071e0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	82fb      	strh	r3, [r7, #22]
 8007156:	8afb      	ldrh	r3, [r7, #22]
 8007158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01b      	beq.n	8007198 <USB_EPClearStall+0x106>
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	82bb      	strh	r3, [r7, #20]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	8abb      	ldrh	r3, [r7, #20]
 8007184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	b29b      	uxth	r3, r3
 8007196:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ae:	827b      	strh	r3, [r7, #18]
 80071b0:	8a7b      	ldrh	r3, [r7, #18]
 80071b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071b6:	827b      	strh	r3, [r7, #18]
 80071b8:	8a7b      	ldrh	r3, [r7, #18]
 80071ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071be:	827b      	strh	r3, [r7, #18]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	8a7b      	ldrh	r3, [r7, #18]
 80071cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071dc:	b29b      	uxth	r3, r3
 80071de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr

080071ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d103      	bne.n	8007206 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2280      	movs	r2, #128	; 0x80
 8007202:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr

08007212 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr

08007226 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007248:	b29b      	uxth	r3, r3
 800724a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr

08007258 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800726e:	b480      	push	{r7}
 8007270:	b08b      	sub	sp, #44	; 0x2c
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	4611      	mov	r1, r2
 800727a:	461a      	mov	r2, r3
 800727c:	460b      	mov	r3, r1
 800727e:	80fb      	strh	r3, [r7, #6]
 8007280:	4613      	mov	r3, r2
 8007282:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007284:	88bb      	ldrh	r3, [r7, #4]
 8007286:	3301      	adds	r3, #1
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	005a      	lsls	r2, r3, #1
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
 80072a6:	e01e      	b.n	80072e6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	3301      	adds	r3, #1
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	b21a      	sxth	r2, r3
 80072b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072bc:	4313      	orrs	r3, r2
 80072be:	b21b      	sxth	r3, r3
 80072c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	8a7a      	ldrh	r2, [r7, #18]
 80072c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	3302      	adds	r3, #2
 80072cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	3302      	adds	r3, #2
 80072d2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	3301      	adds	r3, #1
 80072de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	3b01      	subs	r3, #1
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1dd      	bne.n	80072a8 <USB_WritePMA+0x3a>
  }
}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	372c      	adds	r7, #44	; 0x2c
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr

080072f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b08b      	sub	sp, #44	; 0x2c
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4611      	mov	r1, r2
 8007304:	461a      	mov	r2, r3
 8007306:	460b      	mov	r3, r1
 8007308:	80fb      	strh	r3, [r7, #6]
 800730a:	4613      	mov	r3, r2
 800730c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800730e:	88bb      	ldrh	r3, [r7, #4]
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	b29b      	uxth	r3, r3
 8007314:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	005a      	lsls	r2, r3, #1
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800732a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
 8007330:	e01b      	b.n	800736a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	3302      	adds	r3, #2
 800733e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	3301      	adds	r3, #1
 800734c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	b2da      	uxtb	r2, r3
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	3301      	adds	r3, #1
 800735c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	3302      	adds	r3, #2
 8007362:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	3b01      	subs	r3, #1
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e0      	bne.n	8007332 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007370:	88bb      	ldrh	r3, [r7, #4]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d007      	beq.n	800738c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	701a      	strb	r2, [r3, #0]
  }
}
 800738c:	bf00      	nop
 800738e:	372c      	adds	r7, #44	; 0x2c
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr

08007396 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	7c1b      	ldrb	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d115      	bne.n	80073da <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b2:	2202      	movs	r2, #2
 80073b4:	2181      	movs	r1, #129	; 0x81
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 fe8f 	bl	80090da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c6:	2202      	movs	r2, #2
 80073c8:	2101      	movs	r1, #1
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fe85 	bl	80090da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80073d8:	e012      	b.n	8007400 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073da:	2340      	movs	r3, #64	; 0x40
 80073dc:	2202      	movs	r2, #2
 80073de:	2181      	movs	r1, #129	; 0x81
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 fe7a 	bl	80090da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073ec:	2340      	movs	r3, #64	; 0x40
 80073ee:	2202      	movs	r2, #2
 80073f0:	2101      	movs	r1, #1
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fe71 	bl	80090da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007400:	2308      	movs	r3, #8
 8007402:	2203      	movs	r2, #3
 8007404:	2182      	movs	r1, #130	; 0x82
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fe67 	bl	80090da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007412:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007416:	f001 ff87 	bl	8009328 <USBD_static_malloc>
 800741a:	4602      	mov	r2, r0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	e026      	b.n	8007480 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7c1b      	ldrb	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007466:	2101      	movs	r1, #1
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 ff27 	bl	80092bc <USBD_LL_PrepareReceive>
 800746e:	e007      	b.n	8007480 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007476:	2340      	movs	r3, #64	; 0x40
 8007478:	2101      	movs	r1, #1
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 ff1e 	bl	80092bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800749a:	2181      	movs	r1, #129	; 0x81
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fe42 	bl	8009126 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074a8:	2101      	movs	r1, #1
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fe3b 	bl	8009126 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074b8:	2182      	movs	r1, #130	; 0x82
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fe33 	bl	8009126 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 ff2d 	bl	8009340 <USBD_static_free>
    pdev->pClassData = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751e:	2b00      	cmp	r3, #0
 8007520:	d039      	beq.n	8007596 <USBD_CDC_Setup+0x9e>
 8007522:	2b20      	cmp	r3, #32
 8007524:	d17f      	bne.n	8007626 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d029      	beq.n	8007582 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	b25b      	sxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	da11      	bge.n	800755c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007544:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	88d2      	ldrh	r2, [r2, #6]
 800754a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800754c:	6939      	ldr	r1, [r7, #16]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	88db      	ldrh	r3, [r3, #6]
 8007552:	461a      	mov	r2, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 fa0a 	bl	800896e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800755a:	e06b      	b.n	8007634 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	785a      	ldrb	r2, [r3, #1]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	88db      	ldrh	r3, [r3, #6]
 800756a:	b2da      	uxtb	r2, r3
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007572:	6939      	ldr	r1, [r7, #16]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	88db      	ldrh	r3, [r3, #6]
 8007578:	461a      	mov	r2, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fa25 	bl	80089ca <USBD_CtlPrepareRx>
      break;
 8007580:	e058      	b.n	8007634 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	7850      	ldrb	r0, [r2, #1]
 800758e:	2200      	movs	r2, #0
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	4798      	blx	r3
      break;
 8007594:	e04e      	b.n	8007634 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b0b      	cmp	r3, #11
 800759c:	d02e      	beq.n	80075fc <USBD_CDC_Setup+0x104>
 800759e:	2b0b      	cmp	r3, #11
 80075a0:	dc38      	bgt.n	8007614 <USBD_CDC_Setup+0x11c>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <USBD_CDC_Setup+0xb4>
 80075a6:	2b0a      	cmp	r3, #10
 80075a8:	d014      	beq.n	80075d4 <USBD_CDC_Setup+0xdc>
 80075aa:	e033      	b.n	8007614 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d107      	bne.n	80075c6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80075b6:	f107 030c 	add.w	r3, r7, #12
 80075ba:	2202      	movs	r2, #2
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f9d5 	bl	800896e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075c4:	e02e      	b.n	8007624 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f966 	bl	800889a <USBD_CtlError>
            ret = USBD_FAIL;
 80075ce:	2302      	movs	r3, #2
 80075d0:	75fb      	strb	r3, [r7, #23]
          break;
 80075d2:	e027      	b.n	8007624 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d107      	bne.n	80075ee <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80075de:	f107 030f 	add.w	r3, r7, #15
 80075e2:	2201      	movs	r2, #1
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f9c1 	bl	800896e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ec:	e01a      	b.n	8007624 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 f952 	bl	800889a <USBD_CtlError>
            ret = USBD_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	75fb      	strb	r3, [r7, #23]
          break;
 80075fa:	e013      	b.n	8007624 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007602:	2b03      	cmp	r3, #3
 8007604:	d00d      	beq.n	8007622 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f946 	bl	800889a <USBD_CtlError>
            ret = USBD_FAIL;
 800760e:	2302      	movs	r3, #2
 8007610:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007612:	e006      	b.n	8007622 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 f93f 	bl	800889a <USBD_CtlError>
          ret = USBD_FAIL;
 800761c:	2302      	movs	r3, #2
 800761e:	75fb      	strb	r3, [r7, #23]
          break;
 8007620:	e000      	b.n	8007624 <USBD_CDC_Setup+0x12c>
          break;
 8007622:	bf00      	nop
      }
      break;
 8007624:	e006      	b.n	8007634 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 f936 	bl	800889a <USBD_CtlError>
      ret = USBD_FAIL;
 800762e:	2302      	movs	r3, #2
 8007630:	75fb      	strb	r3, [r7, #23]
      break;
 8007632:	bf00      	nop
  }

  return ret;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007650:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007658:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d03a      	beq.n	80076da <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007664:	78fa      	ldrb	r2, [r7, #3]
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	331c      	adds	r3, #28
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d029      	beq.n	80076ce <USBD_CDC_DataIn+0x90>
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	331c      	adds	r3, #28
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	78f9      	ldrb	r1, [r7, #3]
 800768e:	68b8      	ldr	r0, [r7, #8]
 8007690:	460b      	mov	r3, r1
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4403      	add	r3, r0
 800769a:	3338      	adds	r3, #56	; 0x38
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	fbb2 f1f3 	udiv	r1, r2, r3
 80076a2:	fb01 f303 	mul.w	r3, r1, r3
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d110      	bne.n	80076ce <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	331c      	adds	r3, #28
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076c0:	78f9      	ldrb	r1, [r7, #3]
 80076c2:	2300      	movs	r3, #0
 80076c4:	2200      	movs	r2, #0
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fdd5 	bl	8009276 <USBD_LL_Transmit>
 80076cc:	e003      	b.n	80076d6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e000      	b.n	80076dc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80076da:	2302      	movs	r3, #2
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 fe00 	bl	8009302 <USBD_LL_GetRxDataSize>
 8007702:	4602      	mov	r2, r0
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00d      	beq.n	8007730 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007728:	4611      	mov	r1, r2
 800772a:	4798      	blx	r3

    return USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e000      	b.n	8007732 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007730:	2302      	movs	r3, #2
  }
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007748:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007750:	2b00      	cmp	r3, #0
 8007752:	d015      	beq.n	8007780 <USBD_CDC_EP0_RxReady+0x46>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800775a:	2bff      	cmp	r3, #255	; 0xff
 800775c:	d010      	beq.n	8007780 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800776c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007774:	b292      	uxth	r2, r2
 8007776:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	22ff      	movs	r2, #255	; 0xff
 800777c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2243      	movs	r2, #67	; 0x43
 8007798:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800779a:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20000094 	.word	0x20000094

080077ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2243      	movs	r2, #67	; 0x43
 80077b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077ba:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20000050 	.word	0x20000050

080077cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2243      	movs	r2, #67	; 0x43
 80077d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80077da:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	200000d8 	.word	0x200000d8

080077ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	220a      	movs	r2, #10
 80077f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80077fa:	4b03      	ldr	r3, [pc, #12]	; (8007808 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	2000000c 	.word	0x2000000c

0800780c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007816:	2302      	movs	r3, #2
 8007818:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	bc80      	pop	{r7}
 8007868:	4770      	bx	lr

0800786a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr

08007890 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01c      	beq.n	80078e4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d115      	bne.n	80078e0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2181      	movs	r1, #129	; 0x81
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fccd 	bl	8009276 <USBD_LL_Transmit>

      return USBD_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	e002      	b.n	80078e6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80078e4:	2302      	movs	r3, #2
  }
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7c1b      	ldrb	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791a:	2101      	movs	r1, #1
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fccd 	bl	80092bc <USBD_LL_PrepareReceive>
 8007922:	e007      	b.n	8007934 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800792a:	2340      	movs	r3, #64	; 0x40
 800792c:	2101      	movs	r1, #1
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fcc4 	bl	80092bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	4613      	mov	r3, r2
 800794e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007956:	2302      	movs	r3, #2
 8007958:	e01a      	b.n	8007990 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	79fa      	ldrb	r2, [r7, #7]
 8007986:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f001 fb31 	bl	8008ff0 <USBD_LL_Init>

  return USBD_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]
 80079b8:	e001      	b.n	80079be <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079ba:	2302      	movs	r3, #2
 80079bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fb66 	bl	80090a4 <USBD_LL_Start>

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr

080079f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a02:	2302      	movs	r3, #2
 8007a04:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00c      	beq.n	8007a2a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	78fa      	ldrb	r2, [r7, #3]
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	4798      	blx	r3
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3

  return USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fed8 	bl	8008822 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a8e:	f003 031f 	and.w	r3, r3, #31
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d016      	beq.n	8007ac4 <USBD_LL_SetupStage+0x6a>
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d81c      	bhi.n	8007ad4 <USBD_LL_SetupStage+0x7a>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <USBD_LL_SetupStage+0x4a>
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d008      	beq.n	8007ab4 <USBD_LL_SetupStage+0x5a>
 8007aa2:	e017      	b.n	8007ad4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f9cb 	bl	8007e48 <USBD_StdDevReq>
      break;
 8007ab2:	e01a      	b.n	8007aea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa2d 	bl	8007f1c <USBD_StdItfReq>
      break;
 8007ac2:	e012      	b.n	8007aea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fa6d 	bl	8007fac <USBD_StdEPReq>
      break;
 8007ad2:	e00a      	b.n	8007aea <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ada:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 fb3e 	bl	8009164 <USBD_LL_StallEP>
      break;
 8007ae8:	bf00      	nop
  }

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	460b      	mov	r3, r1
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b02:	7afb      	ldrb	r3, [r7, #11]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d14b      	bne.n	8007ba0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b0e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d134      	bne.n	8007b84 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d919      	bls.n	8007b5a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d203      	bcs.n	8007b48 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	e002      	b.n	8007b4e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 ff57 	bl	8008a06 <USBD_CtlContinueRx>
 8007b58:	e038      	b.n	8007bcc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d105      	bne.n	8007b7c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 ff54 	bl	8008a2a <USBD_CtlSendStatus>
 8007b82:	e023      	b.n	8007bcc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	d11e      	bne.n	8007bcc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007b96:	2100      	movs	r1, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f001 fae3 	bl	8009164 <USBD_LL_StallEP>
 8007b9e:	e015      	b.n	8007bcc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00d      	beq.n	8007bc8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d108      	bne.n	8007bc8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	7afa      	ldrb	r2, [r7, #11]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	4798      	blx	r3
 8007bc6:	e001      	b.n	8007bcc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e000      	b.n	8007bce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	460b      	mov	r3, r1
 8007be0:	607a      	str	r2, [r7, #4]
 8007be2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d17f      	bne.n	8007cea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3314      	adds	r3, #20
 8007bee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d15c      	bne.n	8007cb4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d915      	bls.n	8007c32 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fec1 	bl	80089a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c24:	2300      	movs	r3, #0
 8007c26:	2200      	movs	r2, #0
 8007c28:	2100      	movs	r1, #0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f001 fb46 	bl	80092bc <USBD_LL_PrepareReceive>
 8007c30:	e04e      	b.n	8007cd0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	6912      	ldr	r2, [r2, #16]
 8007c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c3e:	fb01 f202 	mul.w	r2, r1, r2
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11c      	bne.n	8007c82 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d316      	bcc.n	8007c82 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d20f      	bcs.n	8007c82 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fe9d 	bl	80089a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c74:	2300      	movs	r3, #0
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f001 fb1e 	bl	80092bc <USBD_LL_PrepareReceive>
 8007c80:	e026      	b.n	8007cd0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d105      	bne.n	8007ca4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ca4:	2180      	movs	r1, #128	; 0x80
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f001 fa5c 	bl	8009164 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fecf 	bl	8008a50 <USBD_CtlReceiveStatus>
 8007cb2:	e00d      	b.n	8007cd0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d004      	beq.n	8007cc8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007cc8:	2180      	movs	r1, #128	; 0x80
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f001 fa4a 	bl	8009164 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d11d      	bne.n	8007d16 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fe81 	bl	80079e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ce8:	e015      	b.n	8007d16 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d108      	bne.n	8007d12 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	7afa      	ldrb	r2, [r7, #11]
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	4798      	blx	r3
 8007d10:	e001      	b.n	8007d16 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d12:	2302      	movs	r3, #2
 8007d14:	e000      	b.n	8007d18 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d28:	2340      	movs	r3, #64	; 0x40
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 f9d3 	bl	80090da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2240      	movs	r2, #64	; 0x40
 8007d40:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d44:	2340      	movs	r3, #64	; 0x40
 8007d46:	2200      	movs	r2, #0
 8007d48:	2180      	movs	r1, #128	; 0x80
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 f9c5 	bl	80090da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2240      	movs	r2, #64	; 0x40
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6852      	ldr	r2, [r2, #4]
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	4611      	mov	r1, r2
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
  }

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d105      	bne.n	8007e06 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr

08007e12 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d10b      	bne.n	8007e3c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d005      	beq.n	8007e6e <USBD_StdDevReq+0x26>
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d84f      	bhi.n	8007f06 <USBD_StdDevReq+0xbe>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d009      	beq.n	8007e7e <USBD_StdDevReq+0x36>
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d14b      	bne.n	8007f06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
      break;
 8007e7c:	e048      	b.n	8007f10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d839      	bhi.n	8007efa <USBD_StdDevReq+0xb2>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <USBD_StdDevReq+0x44>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007edd 	.word	0x08007edd
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	08007efb 	.word	0x08007efb
 8007e98:	08007ee7 	.word	0x08007ee7
 8007e9c:	08007efb 	.word	0x08007efb
 8007ea0:	08007ebf 	.word	0x08007ebf
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007efb 	.word	0x08007efb
 8007eac:	08007ed3 	.word	0x08007ed3
 8007eb0:	08007ec9 	.word	0x08007ec9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f9dc 	bl	8008274 <USBD_GetDescriptor>
          break;
 8007ebc:	e022      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fb3f 	bl	8008544 <USBD_SetAddress>
          break;
 8007ec6:	e01d      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fb7e 	bl	80085cc <USBD_SetConfig>
          break;
 8007ed0:	e018      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fc07 	bl	80086e8 <USBD_GetConfig>
          break;
 8007eda:	e013      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fc37 	bl	8008752 <USBD_GetStatus>
          break;
 8007ee4:	e00e      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc65 	bl	80087b8 <USBD_SetFeature>
          break;
 8007eee:	e009      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fc74 	bl	80087e0 <USBD_ClrFeature>
          break;
 8007ef8:	e004      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fccc 	bl	800889a <USBD_CtlError>
          break;
 8007f02:	bf00      	nop
      }
      break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fcc6 	bl	800889a <USBD_CtlError>
      break;
 8007f0e:	bf00      	nop
  }

  return ret;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop

08007f1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f32:	2b40      	cmp	r3, #64	; 0x40
 8007f34:	d005      	beq.n	8007f42 <USBD_StdItfReq+0x26>
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d82e      	bhi.n	8007f98 <USBD_StdItfReq+0x7c>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <USBD_StdItfReq+0x26>
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d12a      	bne.n	8007f98 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d81d      	bhi.n	8007f8a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d813      	bhi.n	8007f80 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d110      	bne.n	8007f94 <USBD_StdItfReq+0x78>
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10d      	bne.n	8007f94 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fd56 	bl	8008a2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f7e:	e009      	b.n	8007f94 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fc89 	bl	800889a <USBD_CtlError>
          break;
 8007f88:	e004      	b.n	8007f94 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc84 	bl	800889a <USBD_CtlError>
          break;
 8007f92:	e000      	b.n	8007f96 <USBD_StdItfReq+0x7a>
          break;
 8007f94:	bf00      	nop
      }
      break;
 8007f96:	e004      	b.n	8007fa2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fc7d 	bl	800889a <USBD_CtlError>
      break;
 8007fa0:	bf00      	nop
  }

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	889b      	ldrh	r3, [r3, #4]
 8007fbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	d007      	beq.n	8007fdc <USBD_StdEPReq+0x30>
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	f200 8146 	bhi.w	800825e <USBD_StdEPReq+0x2b2>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <USBD_StdEPReq+0x40>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	f040 8141 	bne.w	800825e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
      break;
 8007fea:	e13d      	b.n	8008268 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d10a      	bne.n	800800e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]

        return ret;
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	e12d      	b.n	800826a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	785b      	ldrb	r3, [r3, #1]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d007      	beq.n	8008026 <USBD_StdEPReq+0x7a>
 8008016:	2b03      	cmp	r3, #3
 8008018:	f300 811b 	bgt.w	8008252 <USBD_StdEPReq+0x2a6>
 800801c:	2b00      	cmp	r3, #0
 800801e:	d072      	beq.n	8008106 <USBD_StdEPReq+0x15a>
 8008020:	2b01      	cmp	r3, #1
 8008022:	d03a      	beq.n	800809a <USBD_StdEPReq+0xee>
 8008024:	e115      	b.n	8008252 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802c:	2b02      	cmp	r3, #2
 800802e:	d002      	beq.n	8008036 <USBD_StdEPReq+0x8a>
 8008030:	2b03      	cmp	r3, #3
 8008032:	d015      	beq.n	8008060 <USBD_StdEPReq+0xb4>
 8008034:	e02b      	b.n	800808e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <USBD_StdEPReq+0xaa>
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d009      	beq.n	8008056 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 f88c 	bl	8009164 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800804c:	2180      	movs	r1, #128	; 0x80
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 f888 	bl	8009164 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008054:	e020      	b.n	8008098 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fc1e 	bl	800889a <USBD_CtlError>
              break;
 800805e:	e01b      	b.n	8008098 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10e      	bne.n	8008086 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <USBD_StdEPReq+0xda>
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b80      	cmp	r3, #128	; 0x80
 8008072:	d008      	beq.n	8008086 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	88db      	ldrh	r3, [r3, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f86f 	bl	8009164 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fccf 	bl	8008a2a <USBD_CtlSendStatus>

              break;
 800808c:	e004      	b.n	8008098 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc02 	bl	800889a <USBD_CtlError>
              break;
 8008096:	bf00      	nop
          }
          break;
 8008098:	e0e0      	b.n	800825c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d002      	beq.n	80080aa <USBD_StdEPReq+0xfe>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d015      	beq.n	80080d4 <USBD_StdEPReq+0x128>
 80080a8:	e026      	b.n	80080f8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <USBD_StdEPReq+0x11e>
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b80      	cmp	r3, #128	; 0x80
 80080b4:	d009      	beq.n	80080ca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 f852 	bl	8009164 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080c0:	2180      	movs	r1, #128	; 0x80
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f84e 	bl	8009164 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080c8:	e01c      	b.n	8008104 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fbe4 	bl	800889a <USBD_CtlError>
              break;
 80080d2:	e017      	b.n	8008104 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	885b      	ldrh	r3, [r3, #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d112      	bne.n	8008102 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f859 	bl	80091a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fc9a 	bl	8008a2a <USBD_CtlSendStatus>
              }
              break;
 80080f6:	e004      	b.n	8008102 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fbcd 	bl	800889a <USBD_CtlError>
              break;
 8008100:	e000      	b.n	8008104 <USBD_StdEPReq+0x158>
              break;
 8008102:	bf00      	nop
          }
          break;
 8008104:	e0aa      	b.n	800825c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	2b02      	cmp	r3, #2
 800810e:	d002      	beq.n	8008116 <USBD_StdEPReq+0x16a>
 8008110:	2b03      	cmp	r3, #3
 8008112:	d032      	beq.n	800817a <USBD_StdEPReq+0x1ce>
 8008114:	e097      	b.n	8008246 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <USBD_StdEPReq+0x180>
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b80      	cmp	r3, #128	; 0x80
 8008120:	d004      	beq.n	800812c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fbb8 	bl	800889a <USBD_CtlError>
                break;
 800812a:	e091      	b.n	8008250 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800812c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	da0b      	bge.n	800814c <USBD_StdEPReq+0x1a0>
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	3310      	adds	r3, #16
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	4413      	add	r3, r2
 8008148:	3304      	adds	r3, #4
 800814a:	e00b      	b.n	8008164 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4413      	add	r3, r2
 8008162:	3304      	adds	r3, #4
 8008164:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2202      	movs	r2, #2
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fbfb 	bl	800896e <USBD_CtlSendData>
              break;
 8008178:	e06a      	b.n	8008250 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800817a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	da11      	bge.n	80081a6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	f003 020f 	and.w	r2, r3, #15
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	3318      	adds	r3, #24
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d117      	bne.n	80081cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fb7b 	bl	800889a <USBD_CtlError>
                  break;
 80081a4:	e054      	b.n	8008250 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	f003 020f 	and.w	r2, r3, #15
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	440b      	add	r3, r1
 80081b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fb68 	bl	800889a <USBD_CtlError>
                  break;
 80081ca:	e041      	b.n	8008250 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	da0b      	bge.n	80081ec <USBD_StdEPReq+0x240>
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081da:	4613      	mov	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	3310      	adds	r3, #16
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	4413      	add	r3, r2
 80081e8:	3304      	adds	r3, #4
 80081ea:	e00b      	b.n	8008204 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	3304      	adds	r3, #4
 8008204:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <USBD_StdEPReq+0x266>
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d103      	bne.n	800821a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e00e      	b.n	8008238 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 ffde 	bl	80091e0 <USBD_LL_IsStallEP>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e002      	b.n	8008238 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2202      	movs	r2, #2
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fb95 	bl	800896e <USBD_CtlSendData>
              break;
 8008244:	e004      	b.n	8008250 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fb26 	bl	800889a <USBD_CtlError>
              break;
 800824e:	bf00      	nop
          }
          break;
 8008250:	e004      	b.n	800825c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb20 	bl	800889a <USBD_CtlError>
          break;
 800825a:	bf00      	nop
      }
      break;
 800825c:	e004      	b.n	8008268 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fb1a 	bl	800889a <USBD_CtlError>
      break;
 8008266:	bf00      	nop
  }

  return ret;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	2b06      	cmp	r3, #6
 8008296:	f200 8128 	bhi.w	80084ea <USBD_GetDescriptor+0x276>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <USBD_GetDescriptor+0x2c>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082bd 	.word	0x080082bd
 80082a4:	080082d5 	.word	0x080082d5
 80082a8:	08008315 	.word	0x08008315
 80082ac:	080084eb 	.word	0x080084eb
 80082b0:	080084eb 	.word	0x080084eb
 80082b4:	0800848b 	.word	0x0800848b
 80082b8:	080084b7 	.word	0x080084b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7c12      	ldrb	r2, [r2, #16]
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
      break;
 80082d2:	e112      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7c1b      	ldrb	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10d      	bne.n	80082f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	f107 0208 	add.w	r2, r7, #8
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	2202      	movs	r2, #2
 80082f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082f6:	e100      	b.n	80084fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	f107 0208 	add.w	r2, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	2202      	movs	r2, #2
 8008310:	701a      	strb	r2, [r3, #0]
      break;
 8008312:	e0f2      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	885b      	ldrh	r3, [r3, #2]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b05      	cmp	r3, #5
 800831c:	f200 80ac 	bhi.w	8008478 <USBD_GetDescriptor+0x204>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <USBD_GetDescriptor+0xb4>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	08008341 	.word	0x08008341
 800832c:	08008375 	.word	0x08008375
 8008330:	080083a9 	.word	0x080083a9
 8008334:	080083dd 	.word	0x080083dd
 8008338:	08008411 	.word	0x08008411
 800833c:	08008445 	.word	0x08008445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e091      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa97 	bl	800889a <USBD_CtlError>
            err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
          break;
 8008372:	e089      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008396:	e077      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa7d 	bl	800889a <USBD_CtlError>
            err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
          break;
 80083a6:	e06f      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ca:	e05d      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa63 	bl	800889a <USBD_CtlError>
            err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
          break;
 80083da:	e055      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fe:	e043      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa49 	bl	800889a <USBD_CtlError>
            err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
          break;
 800840e:	e03b      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	f107 0108 	add.w	r1, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008432:	e029      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa2f 	bl	800889a <USBD_CtlError>
            err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
          break;
 8008442:	e021      	b.n	8008488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	7c12      	ldrb	r2, [r2, #16]
 800845c:	f107 0108 	add.w	r1, r7, #8
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
 8008464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008466:	e00f      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa15 	bl	800889a <USBD_CtlError>
            err++;
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	3301      	adds	r3, #1
 8008474:	72fb      	strb	r3, [r7, #11]
          break;
 8008476:	e007      	b.n	8008488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa0d 	bl	800889a <USBD_CtlError>
          err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008486:	e038      	b.n	80084fa <USBD_GetDescriptor+0x286>
 8008488:	e037      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7c1b      	ldrb	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	f107 0208 	add.w	r2, r7, #8
 800849e:	4610      	mov	r0, r2
 80084a0:	4798      	blx	r3
 80084a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a4:	e029      	b.n	80084fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f9f6 	bl	800889a <USBD_CtlError>
        err++;
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	3301      	adds	r3, #1
 80084b2:	72fb      	strb	r3, [r7, #11]
      break;
 80084b4:	e021      	b.n	80084fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7c1b      	ldrb	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c6:	f107 0208 	add.w	r2, r7, #8
 80084ca:	4610      	mov	r0, r2
 80084cc:	4798      	blx	r3
 80084ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	2207      	movs	r2, #7
 80084d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084d8:	e00f      	b.n	80084fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f9dc 	bl	800889a <USBD_CtlError>
        err++;
 80084e2:	7afb      	ldrb	r3, [r7, #11]
 80084e4:	3301      	adds	r3, #1
 80084e6:	72fb      	strb	r3, [r7, #11]
      break;
 80084e8:	e007      	b.n	80084fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9d4 	bl	800889a <USBD_CtlError>
      err++;
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	3301      	adds	r3, #1
 80084f6:	72fb      	strb	r3, [r7, #11]
      break;
 80084f8:	bf00      	nop
  }

  if (err != 0U)
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d11c      	bne.n	800853a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008500:	893b      	ldrh	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d011      	beq.n	800852a <USBD_GetDescriptor+0x2b6>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00d      	beq.n	800852a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88da      	ldrh	r2, [r3, #6]
 8008512:	893b      	ldrh	r3, [r7, #8]
 8008514:	4293      	cmp	r3, r2
 8008516:	bf28      	it	cs
 8008518:	4613      	movcs	r3, r2
 800851a:	b29b      	uxth	r3, r3
 800851c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800851e:	893b      	ldrh	r3, [r7, #8]
 8008520:	461a      	mov	r2, r3
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa22 	bl	800896e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d104      	bne.n	800853c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fa79 	bl	8008a2a <USBD_CtlSendStatus>
 8008538:	e000      	b.n	800853c <USBD_GetDescriptor+0x2c8>
    return;
 800853a:	bf00      	nop
    }
  }
}
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop

08008544 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	889b      	ldrh	r3, [r3, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d130      	bne.n	80085b8 <USBD_SetAddress+0x74>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	88db      	ldrh	r3, [r3, #6]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d12c      	bne.n	80085b8 <USBD_SetAddress+0x74>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	885b      	ldrh	r3, [r3, #2]
 8008562:	2b7f      	cmp	r3, #127	; 0x7f
 8008564:	d828      	bhi.n	80085b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008570:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008578:	2b03      	cmp	r3, #3
 800857a:	d104      	bne.n	8008586 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f98b 	bl	800889a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	e01d      	b.n	80085c2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	7bfa      	ldrb	r2, [r7, #15]
 800858a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fe50 	bl	8009238 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa46 	bl	8008a2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ac:	e009      	b.n	80085c2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	e004      	b.n	80085c2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f96d 	bl	800889a <USBD_CtlError>
  }
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	885b      	ldrh	r3, [r3, #2]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	4b41      	ldr	r3, [pc, #260]	; (80086e4 <USBD_SetConfig+0x118>)
 80085de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085e0:	4b40      	ldr	r3, [pc, #256]	; (80086e4 <USBD_SetConfig+0x118>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d904      	bls.n	80085f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f955 	bl	800889a <USBD_CtlError>
 80085f0:	e075      	b.n	80086de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d002      	beq.n	8008602 <USBD_SetConfig+0x36>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d023      	beq.n	8008648 <USBD_SetConfig+0x7c>
 8008600:	e062      	b.n	80086c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008602:	4b38      	ldr	r3, [pc, #224]	; (80086e4 <USBD_SetConfig+0x118>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01a      	beq.n	8008640 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800860a:	4b36      	ldr	r3, [pc, #216]	; (80086e4 <USBD_SetConfig+0x118>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2203      	movs	r2, #3
 8008618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800861c:	4b31      	ldr	r3, [pc, #196]	; (80086e4 <USBD_SetConfig+0x118>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff f9e7 	bl	80079f6 <USBD_SetClassConfig>
 8008628:	4603      	mov	r3, r0
 800862a:	2b02      	cmp	r3, #2
 800862c:	d104      	bne.n	8008638 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f932 	bl	800889a <USBD_CtlError>
            return;
 8008636:	e052      	b.n	80086de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f9f6 	bl	8008a2a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800863e:	e04e      	b.n	80086de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f9f2 	bl	8008a2a <USBD_CtlSendStatus>
        break;
 8008646:	e04a      	b.n	80086de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008648:	4b26      	ldr	r3, [pc, #152]	; (80086e4 <USBD_SetConfig+0x118>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d112      	bne.n	8008676 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008658:	4b22      	ldr	r3, [pc, #136]	; (80086e4 <USBD_SetConfig+0x118>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <USBD_SetConfig+0x118>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff f9e3 	bl	8007a34 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f9db 	bl	8008a2a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008674:	e033      	b.n	80086de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008676:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <USBD_SetConfig+0x118>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d01d      	beq.n	80086c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff f9d1 	bl	8007a34 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008692:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <USBD_SetConfig+0x118>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800869c:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <USBD_SetConfig+0x118>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff f9a7 	bl	80079f6 <USBD_SetClassConfig>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d104      	bne.n	80086b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8f2 	bl	800889a <USBD_CtlError>
            return;
 80086b6:	e012      	b.n	80086de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f9b6 	bl	8008a2a <USBD_CtlSendStatus>
        break;
 80086be:	e00e      	b.n	80086de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f9b2 	bl	8008a2a <USBD_CtlSendStatus>
        break;
 80086c6:	e00a      	b.n	80086de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f8e5 	bl	800889a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80086d0:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <USBD_SetConfig+0x118>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff f9ac 	bl	8007a34 <USBD_ClrClassConfig>
        break;
 80086dc:	bf00      	nop
    }
  }
}
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000224 	.word	0x20000224

080086e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	88db      	ldrh	r3, [r3, #6]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d004      	beq.n	8008704 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8cc 	bl	800889a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008702:	e022      	b.n	800874a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870a:	2b02      	cmp	r3, #2
 800870c:	dc02      	bgt.n	8008714 <USBD_GetConfig+0x2c>
 800870e:	2b00      	cmp	r3, #0
 8008710:	dc03      	bgt.n	800871a <USBD_GetConfig+0x32>
 8008712:	e015      	b.n	8008740 <USBD_GetConfig+0x58>
 8008714:	2b03      	cmp	r3, #3
 8008716:	d00b      	beq.n	8008730 <USBD_GetConfig+0x48>
 8008718:	e012      	b.n	8008740 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3308      	adds	r3, #8
 8008724:	2201      	movs	r2, #1
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f920 	bl	800896e <USBD_CtlSendData>
        break;
 800872e:	e00c      	b.n	800874a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3304      	adds	r3, #4
 8008734:	2201      	movs	r2, #1
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f918 	bl	800896e <USBD_CtlSendData>
        break;
 800873e:	e004      	b.n	800874a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f8a9 	bl	800889a <USBD_CtlError>
        break;
 8008748:	bf00      	nop
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008762:	3b01      	subs	r3, #1
 8008764:	2b02      	cmp	r3, #2
 8008766:	d81e      	bhi.n	80087a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	88db      	ldrh	r3, [r3, #6]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d004      	beq.n	800877a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f891 	bl	800889a <USBD_CtlError>
        break;
 8008778:	e01a      	b.n	80087b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f043 0202 	orr.w	r2, r3, #2
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	330c      	adds	r3, #12
 800879a:	2202      	movs	r2, #2
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f8e5 	bl	800896e <USBD_CtlSendData>
      break;
 80087a4:	e004      	b.n	80087b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f876 	bl	800889a <USBD_CtlError>
      break;
 80087ae:	bf00      	nop
  }
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	885b      	ldrh	r3, [r3, #2]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d106      	bne.n	80087d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f929 	bl	8008a2a <USBD_CtlSendStatus>
  }
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f0:	3b01      	subs	r3, #1
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d80b      	bhi.n	800880e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	885b      	ldrh	r3, [r3, #2]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d10c      	bne.n	8008818 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f90f 	bl	8008a2a <USBD_CtlSendStatus>
      }
      break;
 800880c:	e004      	b.n	8008818 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f842 	bl	800889a <USBD_CtlError>
      break;
 8008816:	e000      	b.n	800881a <USBD_ClrFeature+0x3a>
      break;
 8008818:	bf00      	nop
  }
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781a      	ldrb	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	785a      	ldrb	r2, [r3, #1]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	3302      	adds	r3, #2
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	b29a      	uxth	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	3303      	adds	r3, #3
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	b29b      	uxth	r3, r3
 8008850:	4413      	add	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	3304      	adds	r3, #4
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	b29a      	uxth	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	3305      	adds	r3, #5
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b29b      	uxth	r3, r3
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	b29b      	uxth	r3, r3
 800886c:	4413      	add	r3, r2
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	3306      	adds	r3, #6
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b29a      	uxth	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	3307      	adds	r3, #7
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	021b      	lsls	r3, r3, #8
 8008886:	b29b      	uxth	r3, r3
 8008888:	4413      	add	r3, r2
 800888a:	b29a      	uxth	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	80da      	strh	r2, [r3, #6]

}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr

0800889a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fc5c 	bl	8009164 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fc58 	bl	8009164 <USBD_LL_StallEP>
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d032      	beq.n	8008938 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 f834 	bl	8008940 <USBD_GetLen>
 80088d8:	4603      	mov	r3, r0
 80088da:	3301      	adds	r3, #1
 80088dc:	b29b      	uxth	r3, r3
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	75fa      	strb	r2, [r7, #23]
 80088ec:	461a      	mov	r2, r3
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	4413      	add	r3, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	7812      	ldrb	r2, [r2, #0]
 80088f6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	75fa      	strb	r2, [r7, #23]
 80088fe:	461a      	mov	r2, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4413      	add	r3, r2
 8008904:	2203      	movs	r2, #3
 8008906:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008908:	e012      	b.n	8008930 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	60fa      	str	r2, [r7, #12]
 8008910:	7dfa      	ldrb	r2, [r7, #23]
 8008912:	1c51      	adds	r1, r2, #1
 8008914:	75f9      	strb	r1, [r7, #23]
 8008916:	4611      	mov	r1, r2
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	440a      	add	r2, r1
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	75fa      	strb	r2, [r7, #23]
 8008926:	461a      	mov	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4413      	add	r3, r2
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e8      	bne.n	800890a <USBD_GetString+0x4e>
    }
  }
}
 8008938:	bf00      	nop
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800894c:	e005      	b.n	800895a <USBD_GetLen+0x1a>
  {
    len++;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	3301      	adds	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3301      	adds	r3, #1
 8008958:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f5      	bne.n	800894e <USBD_GetLen+0xe>
  }

  return len;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	bc80      	pop	{r7}
 800896c:	4770      	bx	lr

0800896e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	4613      	mov	r3, r2
 800897a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2202      	movs	r2, #2
 8008980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008984:	88fa      	ldrh	r2, [r7, #6]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	2100      	movs	r1, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fc6d 	bl	8009276 <USBD_LL_Transmit>

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	2100      	movs	r1, #0
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fc5b 	bl	8009276 <USBD_LL_Transmit>

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	4613      	mov	r3, r2
 80089d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2203      	movs	r2, #3
 80089dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f0:	88fb      	ldrh	r3, [r7, #6]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	2100      	movs	r1, #0
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 fc60 	bl	80092bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	4613      	mov	r3, r2
 8008a12:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fc4e 	bl	80092bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2204      	movs	r2, #4
 8008a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2100      	movs	r1, #0
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fc18 	bl	8009276 <USBD_LL_Transmit>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc28 	bl	80092bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4912      	ldr	r1, [pc, #72]	; (8008ac8 <MX_USB_DEVICE_Init+0x50>)
 8008a80:	4812      	ldr	r0, [pc, #72]	; (8008acc <MX_USB_DEVICE_Init+0x54>)
 8008a82:	f7fe ff5e 	bl	8007942 <USBD_Init>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a8c:	f7f8 fa7c 	bl	8000f88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a90:	490f      	ldr	r1, [pc, #60]	; (8008ad0 <MX_USB_DEVICE_Init+0x58>)
 8008a92:	480e      	ldr	r0, [pc, #56]	; (8008acc <MX_USB_DEVICE_Init+0x54>)
 8008a94:	f7fe ff80 	bl	8007998 <USBD_RegisterClass>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a9e:	f7f8 fa73 	bl	8000f88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008aa2:	490c      	ldr	r1, [pc, #48]	; (8008ad4 <MX_USB_DEVICE_Init+0x5c>)
 8008aa4:	4809      	ldr	r0, [pc, #36]	; (8008acc <MX_USB_DEVICE_Init+0x54>)
 8008aa6:	f7fe feb1 	bl	800780c <USBD_CDC_RegisterInterface>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ab0:	f7f8 fa6a 	bl	8000f88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ab4:	4805      	ldr	r0, [pc, #20]	; (8008acc <MX_USB_DEVICE_Init+0x54>)
 8008ab6:	f7fe ff88 	bl	80079ca <USBD_Start>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ac0:	f7f8 fa62 	bl	8000f88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ac4:	bf00      	nop
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	2000012c 	.word	0x2000012c
 8008acc:	20000228 	.word	0x20000228
 8008ad0:	20000018 	.word	0x20000018
 8008ad4:	2000011c 	.word	0x2000011c

08008ad8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008adc:	2200      	movs	r2, #0
 8008ade:	4905      	ldr	r1, [pc, #20]	; (8008af4 <CDC_Init_FS+0x1c>)
 8008ae0:	4805      	ldr	r0, [pc, #20]	; (8008af8 <CDC_Init_FS+0x20>)
 8008ae2:	f7fe fea9 	bl	8007838 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ae6:	4905      	ldr	r1, [pc, #20]	; (8008afc <CDC_Init_FS+0x24>)
 8008ae8:	4803      	ldr	r0, [pc, #12]	; (8008af8 <CDC_Init_FS+0x20>)
 8008aea:	f7fe febe 	bl	800786a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008aee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	200008ec 	.word	0x200008ec
 8008af8:	20000228 	.word	0x20000228
 8008afc:	200004ec 	.word	0x200004ec

08008b00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr
	...

08008b10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	71fb      	strb	r3, [r7, #7]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	2b23      	cmp	r3, #35	; 0x23
 8008b24:	d84a      	bhi.n	8008bbc <CDC_Control_FS+0xac>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <CDC_Control_FS+0x1c>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008bbd 	.word	0x08008bbd
 8008b30:	08008bbd 	.word	0x08008bbd
 8008b34:	08008bbd 	.word	0x08008bbd
 8008b38:	08008bbd 	.word	0x08008bbd
 8008b3c:	08008bbd 	.word	0x08008bbd
 8008b40:	08008bbd 	.word	0x08008bbd
 8008b44:	08008bbd 	.word	0x08008bbd
 8008b48:	08008bbd 	.word	0x08008bbd
 8008b4c:	08008bbd 	.word	0x08008bbd
 8008b50:	08008bbd 	.word	0x08008bbd
 8008b54:	08008bbd 	.word	0x08008bbd
 8008b58:	08008bbd 	.word	0x08008bbd
 8008b5c:	08008bbd 	.word	0x08008bbd
 8008b60:	08008bbd 	.word	0x08008bbd
 8008b64:	08008bbd 	.word	0x08008bbd
 8008b68:	08008bbd 	.word	0x08008bbd
 8008b6c:	08008bbd 	.word	0x08008bbd
 8008b70:	08008bbd 	.word	0x08008bbd
 8008b74:	08008bbd 	.word	0x08008bbd
 8008b78:	08008bbd 	.word	0x08008bbd
 8008b7c:	08008bbd 	.word	0x08008bbd
 8008b80:	08008bbd 	.word	0x08008bbd
 8008b84:	08008bbd 	.word	0x08008bbd
 8008b88:	08008bbd 	.word	0x08008bbd
 8008b8c:	08008bbd 	.word	0x08008bbd
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	08008bbd 	.word	0x08008bbd
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008bbd 	.word	0x08008bbd
 8008ba0:	08008bbd 	.word	0x08008bbd
 8008ba4:	08008bbd 	.word	0x08008bbd
 8008ba8:	08008bbd 	.word	0x08008bbd
 8008bac:	08008bbd 	.word	0x08008bbd
 8008bb0:	08008bbd 	.word	0x08008bbd
 8008bb4:	08008bbd 	.word	0x08008bbd
 8008bb8:	08008bbd 	.word	0x08008bbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bbc:	bf00      	nop
  }

  return (USBD_OK);
 8008bbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bc80      	pop	{r7}
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop

08008bcc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <CDC_Receive_FS+0x24>)
 8008bda:	f7fe fe46 	bl	800786a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bde:	4804      	ldr	r0, [pc, #16]	; (8008bf0 <CDC_Receive_FS+0x24>)
 8008be0:	f7fe fe85 	bl	80078ee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008be4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000228 	.word	0x20000228

08008bf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c04:	4b0d      	ldr	r3, [pc, #52]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e00b      	b.n	8008c32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c1a:	887b      	ldrh	r3, [r7, #2]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4806      	ldr	r0, [pc, #24]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c22:	f7fe fe09 	bl	8007838 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c26:	4805      	ldr	r0, [pc, #20]	; (8008c3c <CDC_Transmit_FS+0x48>)
 8008c28:	f7fe fe32 	bl	8007890 <USBD_CDC_TransmitPacket>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000228 	.word	0x20000228

08008c40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2212      	movs	r2, #18
 8008c50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c52:	4b03      	ldr	r3, [pc, #12]	; (8008c60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	20000148 	.word	0x20000148

08008c64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2204      	movs	r2, #4
 8008c74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c76:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bc80      	pop	{r7}
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	2000015c 	.word	0x2000015c

08008c88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	6039      	str	r1, [r7, #0]
 8008c92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d105      	bne.n	8008ca6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	4907      	ldr	r1, [pc, #28]	; (8008cbc <USBD_FS_ProductStrDescriptor+0x34>)
 8008c9e:	4808      	ldr	r0, [pc, #32]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ca0:	f7ff fe0c 	bl	80088bc <USBD_GetString>
 8008ca4:	e004      	b.n	8008cb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	4904      	ldr	r1, [pc, #16]	; (8008cbc <USBD_FS_ProductStrDescriptor+0x34>)
 8008caa:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cac:	f7ff fe06 	bl	80088bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb0:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000cec 	.word	0x20000cec
 8008cc0:	08009430 	.word	0x08009430

08008cc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	6039      	str	r1, [r7, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	4904      	ldr	r1, [pc, #16]	; (8008ce4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cd4:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cd6:	f7ff fdf1 	bl	80088bc <USBD_GetString>
  return USBD_StrDesc;
 8008cda:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20000cec 	.word	0x20000cec
 8008ce8:	08009448 	.word	0x08009448

08008cec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	221a      	movs	r2, #26
 8008cfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cfe:	f000 f843 	bl	8008d88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d02:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000160 	.word	0x20000160

08008d10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d105      	bne.n	8008d2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	4907      	ldr	r1, [pc, #28]	; (8008d44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d26:	4808      	ldr	r0, [pc, #32]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d28:	f7ff fdc8 	bl	80088bc <USBD_GetString>
 8008d2c:	e004      	b.n	8008d38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	4904      	ldr	r1, [pc, #16]	; (8008d44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d32:	4805      	ldr	r0, [pc, #20]	; (8008d48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d34:	f7ff fdc2 	bl	80088bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d38:	4b02      	ldr	r3, [pc, #8]	; (8008d44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000cec 	.word	0x20000cec
 8008d48:	0800945c 	.word	0x0800945c

08008d4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4907      	ldr	r1, [pc, #28]	; (8008d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d62:	4808      	ldr	r0, [pc, #32]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d64:	f7ff fdaa 	bl	80088bc <USBD_GetString>
 8008d68:	e004      	b.n	8008d74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4904      	ldr	r1, [pc, #16]	; (8008d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d6e:	4805      	ldr	r0, [pc, #20]	; (8008d84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d70:	f7ff fda4 	bl	80088bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d74:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000cec 	.word	0x20000cec
 8008d84:	08009468 	.word	0x08009468

08008d88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <Get_SerialNum+0x44>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d94:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <Get_SerialNum+0x48>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <Get_SerialNum+0x4c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dae:	2208      	movs	r2, #8
 8008db0:	4909      	ldr	r1, [pc, #36]	; (8008dd8 <Get_SerialNum+0x50>)
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f814 	bl	8008de0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008db8:	2204      	movs	r2, #4
 8008dba:	4908      	ldr	r1, [pc, #32]	; (8008ddc <Get_SerialNum+0x54>)
 8008dbc:	68b8      	ldr	r0, [r7, #8]
 8008dbe:	f000 f80f 	bl	8008de0 <IntToUnicode>
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	1ffff7e8 	.word	0x1ffff7e8
 8008dd0:	1ffff7ec 	.word	0x1ffff7ec
 8008dd4:	1ffff7f0 	.word	0x1ffff7f0
 8008dd8:	20000162 	.word	0x20000162
 8008ddc:	20000172 	.word	0x20000172

08008de0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
 8008df6:	e027      	b.n	8008e48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	0f1b      	lsrs	r3, r3, #28
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d80b      	bhi.n	8008e18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	0f1b      	lsrs	r3, r3, #28
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	440b      	add	r3, r1
 8008e10:	3230      	adds	r2, #48	; 0x30
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e00a      	b.n	8008e2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	0f1b      	lsrs	r3, r3, #28
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	4619      	mov	r1, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	440b      	add	r3, r1
 8008e28:	3237      	adds	r2, #55	; 0x37
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	005b      	lsls	r3, r3, #1
 8008e38:	3301      	adds	r3, #1
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	3301      	adds	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
 8008e48:	7dfa      	ldrb	r2, [r7, #23]
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d3d3      	bcc.n	8008df8 <IntToUnicode+0x18>
  }
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <HAL_PCD_MspInit+0x54>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d11b      	bne.n	8008ea6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e6e:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <HAL_PCD_MspInit+0x58>)
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	4a10      	ldr	r2, [pc, #64]	; (8008eb4 <HAL_PCD_MspInit+0x58>)
 8008e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e78:	61d3      	str	r3, [r2, #28]
 8008e7a:	4b0e      	ldr	r3, [pc, #56]	; (8008eb4 <HAL_PCD_MspInit+0x58>)
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008e86:	2200      	movs	r2, #0
 8008e88:	2100      	movs	r1, #0
 8008e8a:	2013      	movs	r0, #19
 8008e8c:	f7f8 fa69 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008e90:	2013      	movs	r0, #19
 8008e92:	f7f8 fa82 	bl	800139a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008e96:	2200      	movs	r2, #0
 8008e98:	2100      	movs	r1, #0
 8008e9a:	2014      	movs	r0, #20
 8008e9c:	f7f8 fa61 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008ea0:	2014      	movs	r0, #20
 8008ea2:	f7f8 fa7a 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	40005c00 	.word	0x40005c00
 8008eb4:	40021000 	.word	0x40021000

08008eb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7fe fdc3 	bl	8007a5a <USBD_LL_SetupStage>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	440b      	add	r3, r1
 8008efc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f7fe fdf5 	bl	8007af4 <USBD_LL_DataOutStage>
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008f24:	78fa      	ldrb	r2, [r7, #3]
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	440b      	add	r3, r1
 8008f32:	333c      	adds	r3, #60	; 0x3c
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	f7fe fe4c 	bl	8007bd6 <USBD_LL_DataInStage>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe ff5c 	bl	8007e12 <USBD_LL_SOF>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d001      	beq.n	8008f7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f76:	f7f8 f807 	bl	8000f88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008f80:	7bfa      	ldrb	r2, [r7, #15]
 8008f82:	4611      	mov	r1, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe ff0c 	bl	8007da2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fec5 	bl	8007d20 <USBD_LL_Reset>
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe ff06 	bl	8007dc0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d005      	beq.n	8008fc8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <HAL_PCD_SuspendCallback+0x30>)
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	4a03      	ldr	r2, [pc, #12]	; (8008fd0 <HAL_PCD_SuspendCallback+0x30>)
 8008fc2:	f043 0306 	orr.w	r3, r3, #6
 8008fc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	e000ed00 	.word	0xe000ed00

08008fd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe ff00 	bl	8007de8 <USBD_LL_Resume>
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ff8:	4a28      	ldr	r2, [pc, #160]	; (800909c <USBD_LL_Init+0xac>)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a26      	ldr	r2, [pc, #152]	; (800909c <USBD_LL_Init+0xac>)
 8009004:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009008:	4b24      	ldr	r3, [pc, #144]	; (800909c <USBD_LL_Init+0xac>)
 800900a:	4a25      	ldr	r2, [pc, #148]	; (80090a0 <USBD_LL_Init+0xb0>)
 800900c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800900e:	4b23      	ldr	r3, [pc, #140]	; (800909c <USBD_LL_Init+0xac>)
 8009010:	2208      	movs	r2, #8
 8009012:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009014:	4b21      	ldr	r3, [pc, #132]	; (800909c <USBD_LL_Init+0xac>)
 8009016:	2202      	movs	r2, #2
 8009018:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800901a:	4b20      	ldr	r3, [pc, #128]	; (800909c <USBD_LL_Init+0xac>)
 800901c:	2200      	movs	r2, #0
 800901e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <USBD_LL_Init+0xac>)
 8009022:	2200      	movs	r2, #0
 8009024:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009026:	4b1d      	ldr	r3, [pc, #116]	; (800909c <USBD_LL_Init+0xac>)
 8009028:	2200      	movs	r2, #0
 800902a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800902c:	481b      	ldr	r0, [pc, #108]	; (800909c <USBD_LL_Init+0xac>)
 800902e:	f7f9 fbf6 	bl	800281e <HAL_PCD_Init>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009038:	f7f7 ffa6 	bl	8000f88 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009042:	2318      	movs	r3, #24
 8009044:	2200      	movs	r2, #0
 8009046:	2100      	movs	r1, #0
 8009048:	f7fb f915 	bl	8004276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009052:	2358      	movs	r3, #88	; 0x58
 8009054:	2200      	movs	r2, #0
 8009056:	2180      	movs	r1, #128	; 0x80
 8009058:	f7fb f90d 	bl	8004276 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009062:	23c0      	movs	r3, #192	; 0xc0
 8009064:	2200      	movs	r2, #0
 8009066:	2181      	movs	r1, #129	; 0x81
 8009068:	f7fb f905 	bl	8004276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009072:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009076:	2200      	movs	r2, #0
 8009078:	2101      	movs	r1, #1
 800907a:	f7fb f8fc 	bl	8004276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009088:	2200      	movs	r2, #0
 800908a:	2182      	movs	r1, #130	; 0x82
 800908c:	f7fb f8f3 	bl	8004276 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000eec 	.word	0x20000eec
 80090a0:	40005c00 	.word	0x40005c00

080090a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f9 fcae 	bl	8002a1c <HAL_PCD_Start>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f94e 	bl	8009368 <USBD_Get_USB_Status>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	4608      	mov	r0, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	461a      	mov	r2, r3
 80090e8:	4603      	mov	r3, r0
 80090ea:	70fb      	strb	r3, [r7, #3]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70bb      	strb	r3, [r7, #2]
 80090f0:	4613      	mov	r3, r2
 80090f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009102:	78bb      	ldrb	r3, [r7, #2]
 8009104:	883a      	ldrh	r2, [r7, #0]
 8009106:	78f9      	ldrb	r1, [r7, #3]
 8009108:	f7f9 fe03 	bl	8002d12 <HAL_PCD_EP_Open>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f928 	bl	8009368 <USBD_Get_USB_Status>
 8009118:	4603      	mov	r3, r0
 800911a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911c:	7bbb      	ldrb	r3, [r7, #14]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009140:	78fa      	ldrb	r2, [r7, #3]
 8009142:	4611      	mov	r1, r2
 8009144:	4618      	mov	r0, r3
 8009146:	f7f9 fe41 	bl	8002dcc <HAL_PCD_EP_Close>
 800914a:	4603      	mov	r3, r0
 800914c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	4618      	mov	r0, r3
 8009152:	f000 f909 	bl	8009368 <USBD_Get_USB_Status>
 8009156:	4603      	mov	r3, r0
 8009158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915a:	7bbb      	ldrb	r3, [r7, #14]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f7f9 fee9 	bl	8002f5a <HAL_PCD_EP_SetStall>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 f8ea 	bl	8009368 <USBD_Get_USB_Status>
 8009194:	4603      	mov	r3, r0
 8009196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009198:	7bbb      	ldrb	r3, [r7, #14]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7f9 ff2a 	bl	800301a <HAL_PCD_EP_ClrStall>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 f8cb 	bl	8009368 <USBD_Get_USB_Status>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80091f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da0c      	bge.n	8009216 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	1c5a      	adds	r2, r3, #1
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	440b      	add	r3, r1
 8009210:	3302      	adds	r3, #2
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	e00b      	b.n	800922e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009216:	78fb      	ldrb	r3, [r7, #3]
 8009218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800921c:	68f9      	ldr	r1, [r7, #12]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	440b      	add	r3, r1
 8009228:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800922c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	bc80      	pop	{r7}
 8009236:	4770      	bx	lr

08009238 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7f9 fd36 	bl	8002cc8 <HAL_PCD_SetAddress>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f880 	bl	8009368 <USBD_Get_USB_Status>
 8009268:	4603      	mov	r3, r0
 800926a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800926c:	7bbb      	ldrb	r3, [r7, #14]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b086      	sub	sp, #24
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	461a      	mov	r2, r3
 8009282:	460b      	mov	r3, r1
 8009284:	72fb      	strb	r3, [r7, #11]
 8009286:	4613      	mov	r3, r2
 8009288:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009298:	893b      	ldrh	r3, [r7, #8]
 800929a:	7af9      	ldrb	r1, [r7, #11]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	f7f9 fe25 	bl	8002eec <HAL_PCD_EP_Transmit>
 80092a2:	4603      	mov	r3, r0
 80092a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f85d 	bl	8009368 <USBD_Get_USB_Status>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	461a      	mov	r2, r3
 80092c8:	460b      	mov	r3, r1
 80092ca:	72fb      	strb	r3, [r7, #11]
 80092cc:	4613      	mov	r3, r2
 80092ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092de:	893b      	ldrh	r3, [r7, #8]
 80092e0:	7af9      	ldrb	r1, [r7, #11]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	f7f9 fdba 	bl	8002e5c <HAL_PCD_EP_Receive>
 80092e8:	4603      	mov	r3, r0
 80092ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f83a 	bl	8009368 <USBD_Get_USB_Status>
 80092f4:	4603      	mov	r3, r0
 80092f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7f9 fdd0 	bl	8002ebe <HAL_PCD_EP_GetRxCount>
 800931e:	4603      	mov	r3, r0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009330:	4b02      	ldr	r3, [pc, #8]	; (800933c <USBD_static_malloc+0x14>)
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	bc80      	pop	{r7}
 800933a:	4770      	bx	lr
 800933c:	200011dc 	.word	0x200011dc

08009340 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]

}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr

08009352 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr

08009368 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d817      	bhi.n	80093ac <USBD_Get_USB_Status+0x44>
 800937c:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <USBD_Get_USB_Status+0x1c>)
 800937e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009382:	bf00      	nop
 8009384:	08009395 	.word	0x08009395
 8009388:	0800939b 	.word	0x0800939b
 800938c:	080093a1 	.word	0x080093a1
 8009390:	080093a7 	.word	0x080093a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
    break;
 8009398:	e00b      	b.n	80093b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	73fb      	strb	r3, [r7, #15]
    break;
 800939e:	e008      	b.n	80093b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093a0:	2301      	movs	r3, #1
 80093a2:	73fb      	strb	r3, [r7, #15]
    break;
 80093a4:	e005      	b.n	80093b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093a6:	2302      	movs	r3, #2
 80093a8:	73fb      	strb	r3, [r7, #15]
    break;
 80093aa:	e002      	b.n	80093b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093ac:	2302      	movs	r3, #2
 80093ae:	73fb      	strb	r3, [r7, #15]
    break;
 80093b0:	bf00      	nop
  }
  return usb_status;
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop

080093c0 <memset>:
 80093c0:	4603      	mov	r3, r0
 80093c2:	4402      	add	r2, r0
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d100      	bne.n	80093ca <memset+0xa>
 80093c8:	4770      	bx	lr
 80093ca:	f803 1b01 	strb.w	r1, [r3], #1
 80093ce:	e7f9      	b.n	80093c4 <memset+0x4>

080093d0 <__libc_init_array>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	2600      	movs	r6, #0
 80093d4:	4d0c      	ldr	r5, [pc, #48]	; (8009408 <__libc_init_array+0x38>)
 80093d6:	4c0d      	ldr	r4, [pc, #52]	; (800940c <__libc_init_array+0x3c>)
 80093d8:	1b64      	subs	r4, r4, r5
 80093da:	10a4      	asrs	r4, r4, #2
 80093dc:	42a6      	cmp	r6, r4
 80093de:	d109      	bne.n	80093f4 <__libc_init_array+0x24>
 80093e0:	f000 f81a 	bl	8009418 <_init>
 80093e4:	2600      	movs	r6, #0
 80093e6:	4d0a      	ldr	r5, [pc, #40]	; (8009410 <__libc_init_array+0x40>)
 80093e8:	4c0a      	ldr	r4, [pc, #40]	; (8009414 <__libc_init_array+0x44>)
 80093ea:	1b64      	subs	r4, r4, r5
 80093ec:	10a4      	asrs	r4, r4, #2
 80093ee:	42a6      	cmp	r6, r4
 80093f0:	d105      	bne.n	80093fe <__libc_init_array+0x2e>
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f8:	4798      	blx	r3
 80093fa:	3601      	adds	r6, #1
 80093fc:	e7ee      	b.n	80093dc <__libc_init_array+0xc>
 80093fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009402:	4798      	blx	r3
 8009404:	3601      	adds	r6, #1
 8009406:	e7f2      	b.n	80093ee <__libc_init_array+0x1e>
 8009408:	080094a4 	.word	0x080094a4
 800940c:	080094a4 	.word	0x080094a4
 8009410:	080094a4 	.word	0x080094a4
 8009414:	080094a8 	.word	0x080094a8

08009418 <_init>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	bf00      	nop
 800941c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941e:	bc08      	pop	{r3}
 8009420:	469e      	mov	lr, r3
 8009422:	4770      	bx	lr

08009424 <_fini>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	bf00      	nop
 8009428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942a:	bc08      	pop	{r3}
 800942c:	469e      	mov	lr, r3
 800942e:	4770      	bx	lr
